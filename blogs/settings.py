"""
Django settings for blogs project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
import time

# settings.py是项目的一些属性设置, 如数据库连接, debug的方式等.
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n()rhn8g-k^p+9f4cl^l*i0lb5t1#sb*koah4w&_i)_ux-g#6k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog.apps.BlogConfig',
    'ckeditor',
    'ckeditor_uploader',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blogs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'blogs.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'blog',
        'USER': 'root',
        'PASSWORD': 'yourpassword',
        'HOST': '172.18.0.1',
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

DEFAULT_CHARSET = 'utf-8'

FILE_CHARSET = 'utf-8'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, STATIC_URL.strip('/'))
STATICFILES_DIRS = (
    ('', '/project/blogs/static'),
)

CKEDITOR_UPLOAD_PATH = 'upload/'

# Flash测试地址: http://sucai.flashline.cn/flash5/yinyue/rcqwl.swf
# ['div', 'Source', '-', 'Save', 'NewPage', 'Preview', '-', 'Templates'],
# ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Print', 'SpellChecker', 'Scayt'],
# ['Undo', 'Redo', '-', 'Find', 'Replace', '-', 'SelectAll', 'RemoveFormat'],
# ['Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton', 'HiddenField'],
# ['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', 'Superscript'],
# ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', 'Blockquote'],
# ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
# ['Link', 'Unlink', 'Anchor'],
# ['Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak'],
# ['Styles', 'Format', 'Font', 'FontSize'],
# ['TextColor', 'BGColor'],
# ['Maximize', 'ShowBlocks', '-', 'About', 'pbckcode'],
CKEDITOR_CONFIGS = {
    'default': {
        # 'language': 'zh-cn',
        'toolbar': (
            ['Source', 'Print', 'Undo', 'Redo', 'Replace', 'RemoveFormat', 'Bold',
             'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript',
             'NumberedList', 'BulletedList', 'Outdent', 'Indent', 'Blockquote',
             'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'Link',
             'Image', 'CodeSnippet', 'Flash', 'Table', 'Outdent', 'Indent', 'Smiley',
             'Font', 'FontSize', 'TextColor', 'BGColor', 'Maximize'],
        ),
        'height': 618,
        'width': 1150,
        'extraPlugins': ','.join(['codesnippet', 'uploadimage', 'prism', 'widget', 'lineutils', ]),
    },
}

# 下面是logging的配置
# # 项目根路径
# cur_path = os.path.dirname(os.path.realpath(__file__))
# # log_path是存放日志的路径
# log_path = os.path.join(os.path.dirname(cur_path), 'logs')
# # 如果不存在这个logs文件夹，就自动创建一个
# if not os.path.exists(log_path):
#     os.mkdir(log_path)
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': True,
#     'formatters': {
#         # 日志格式
#         'standard': {
#             'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
#                       '[%(levelname)s]- %(message)s'},
#         'simple': {  # 简单格式
#             'format': '%(levelname)s %(message)s'
#         },
#     },
#     # 过滤
#     'filters': {
#     },
#     # 定义具体处理日志的方式
#     'handlers': {
#         # 默认记录所有日志
#         'default': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(log_path, 'all-{}.log'.format(time.strftime('%Y-%m-%d'))),
#             'maxBytes': 1024 * 1024 * 5,  # 文件大小
#             'backupCount': 5,  # 备份数
#             'formatter': 'standard',  # 输出格式
#             'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
#         },
#         # 输出错误日志
#         'error': {
#             'level': 'ERROR',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(log_path, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),
#             'maxBytes': 1024 * 1024 * 5,  # 文件大小
#             'backupCount': 5,  # 备份数
#             'formatter': 'standard',  # 输出格式
#             'encoding': 'utf-8',  # 设置默认编码
#         },
#         # 输出warning日志
#         'warning': {
#             'level': 'WARNING',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(log_path, 'warning-{}.log'.format(time.strftime('%Y-%m-%d'))),
#             'maxBytes': 1024 * 1024 * 5,
#             'backupCount': 5,
#             'formatter': 'standard',
#             'encoding': 'utf-8',  # 设置默认编码
#         },
#         # 输出info日志
#         'info': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(log_path, 'info-{}.log'.format(time.strftime('%Y-%m-%d'))),
#             'maxBytes': 1024 * 1024 * 5,
#             'backupCount': 5,
#             'formatter': 'standard',
#             'encoding': 'utf-8',  # 设置默认编码
#         },
#         # 控制台输出
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'standard'
#         },
#     },
#     # 配置用哪几种 handlers 来处理日志
#     'loggers': {
#         # 类型 为 django 处理所有类型的日志， 默认调用
#         'django': {
#             'handlers': ['default', 'console'],
#             'level': 'INFO',
#             'propagate': False
#         },
#         # log 调用时需要当作参数传入
#         'log': {
#             'handlers': ['error', 'warning', 'info', 'console', 'default'],
#             'level': 'INFO',
#             'propagate': True
#         },
#     }
# }