SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for auth_group
-- ----------------------------
DROP TABLE IF EXISTS `auth_group`;
CREATE TABLE `auth_group`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `name`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for auth_group_permissions
-- ----------------------------
DROP TABLE IF EXISTS `auth_group_permissions`;
CREATE TABLE `auth_group_permissions`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_group_permissions_group_id_permission_id_0cd325b0_uniq`(`group_id`, `permission_id`) USING BTREE,
  INDEX `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm`(`permission_id`) USING BTREE,
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for auth_permission
-- ----------------------------
DROP TABLE IF EXISTS `auth_permission`;
CREATE TABLE `auth_permission`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_permission_content_type_id_codename_01ab375a_uniq`(`content_type_id`, `codename`) USING BTREE,
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of auth_permission
-- ----------------------------
INSERT INTO `auth_permission` VALUES (1, 'Can add log entry', 1, 'add_logentry');
INSERT INTO `auth_permission` VALUES (2, 'Can change log entry', 1, 'change_logentry');
INSERT INTO `auth_permission` VALUES (3, 'Can delete log entry', 1, 'delete_logentry');
INSERT INTO `auth_permission` VALUES (4, 'Can add permission', 2, 'add_permission');
INSERT INTO `auth_permission` VALUES (5, 'Can change permission', 2, 'change_permission');
INSERT INTO `auth_permission` VALUES (6, 'Can delete permission', 2, 'delete_permission');
INSERT INTO `auth_permission` VALUES (7, 'Can add group', 3, 'add_group');
INSERT INTO `auth_permission` VALUES (8, 'Can change group', 3, 'change_group');
INSERT INTO `auth_permission` VALUES (9, 'Can delete group', 3, 'delete_group');
INSERT INTO `auth_permission` VALUES (10, 'Can add user', 4, 'add_user');
INSERT INTO `auth_permission` VALUES (11, 'Can change user', 4, 'change_user');
INSERT INTO `auth_permission` VALUES (12, 'Can delete user', 4, 'delete_user');
INSERT INTO `auth_permission` VALUES (13, 'Can add content type', 5, 'add_contenttype');
INSERT INTO `auth_permission` VALUES (14, 'Can change content type', 5, 'change_contenttype');
INSERT INTO `auth_permission` VALUES (15, 'Can delete content type', 5, 'delete_contenttype');
INSERT INTO `auth_permission` VALUES (16, 'Can add session', 6, 'add_session');
INSERT INTO `auth_permission` VALUES (17, 'Can change session', 6, 'change_session');
INSERT INTO `auth_permission` VALUES (18, 'Can delete session', 6, 'delete_session');
INSERT INTO `auth_permission` VALUES (19, 'Can add blog', 7, 'add_blog');
INSERT INTO `auth_permission` VALUES (20, 'Can change blog', 7, 'change_blog');
INSERT INTO `auth_permission` VALUES (21, 'Can delete blog', 7, 'delete_blog');
INSERT INTO `auth_permission` VALUES (22, 'Can add status', 8, 'add_status');
INSERT INTO `auth_permission` VALUES (23, 'Can change status', 8, 'change_status');
INSERT INTO `auth_permission` VALUES (24, 'Can delete status', 8, 'delete_status');
INSERT INTO `auth_permission` VALUES (25, 'Can add label', 9, 'add_label');
INSERT INTO `auth_permission` VALUES (26, 'Can change label', 9, 'change_label');
INSERT INTO `auth_permission` VALUES (27, 'Can delete label', 9, 'delete_label');

-- ----------------------------
-- Table structure for auth_user
-- ----------------------------
DROP TABLE IF EXISTS `auth_user`;
CREATE TABLE `auth_user`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `last_login` datetime(6) NULL DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `first_name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `last_name` varchar(150) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `email` varchar(254) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of auth_user
-- ----------------------------
INSERT INTO `auth_user` VALUES (1, 'pbkdf2_sha256$100000$X21WyDJKISrb$UrbYaKcfEkbMIIeH3RDz6YVu5+a+LcmXwSYeEbFhnCs=', '2019-10-24 08:31:01.473226', 1, 'admin', '', '', 'paulandcode@gmail.com', 1, 1, '2018-07-11 03:00:25.269112');

-- ----------------------------
-- Table structure for auth_user_groups
-- ----------------------------
DROP TABLE IF EXISTS `auth_user_groups`;
CREATE TABLE `auth_user_groups`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_user_groups_user_id_group_id_94350c0c_uniq`(`user_id`, `group_id`) USING BTREE,
  INDEX `auth_user_groups_group_id_97559544_fk_auth_group_id`(`group_id`) USING BTREE,
  CONSTRAINT `auth_user_groups_group_id_97559544_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `auth_user_groups_user_id_6a12ed8b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for auth_user_user_permissions
-- ----------------------------
DROP TABLE IF EXISTS `auth_user_user_permissions`;
CREATE TABLE `auth_user_user_permissions`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `auth_user_user_permissions_user_id_permission_id_14a6b632_uniq`(`user_id`, `permission_id`) USING BTREE,
  INDEX `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm`(`permission_id`) USING BTREE,
  CONSTRAINT `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for blog_blog
-- ----------------------------
DROP TABLE IF EXISTS `blog_blog`;
CREATE TABLE `blog_blog`  (
  `id` char(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `title` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `modify_date` datetime(6) NOT NULL,
  `status_id` char(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `blog_blog_status_id_bf2fc86b_fk_blog_status_id`(`status_id`) USING BTREE,
  CONSTRAINT `blog_blog_status_id_bf2fc86b_fk_blog_status_id` FOREIGN KEY (`status_id`) REFERENCES `blog_status` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_blog
-- ----------------------------
INSERT INTO `blog_blog` VALUES ('0252f91ade2245a1a11c5f65e7065e71', 'Jenkins自动部署Maven项目', '<p>1. 在安装了基本配置的那些插件后, 需要再安装两个插件:&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">Maven Integration plugin</p>\r\n\r\n<p style=\"margin-left:40px\">Publish Over SSH</p>\r\n\r\n<p>2. 配置JDK, Maven, Git</p>\r\n\r\n<p style=\"margin-left:40px\">(1)Manage Jenkins --&gt; Global Tool Configuration</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/01.png\" style=\"height:758px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(2)设置本地JDK的安装路径(若不使用本地已有的JDK, 可选中Install automatically, Jenkins会自动安装)</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/02.png\" style=\"height:303px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(3)设置本地Maven的安装路径(若不使用本地已有的Maven, 可选中Install automatically, Jenkins会自动安装)</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/03.png\" style=\"height:285px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(4)设置Maven自定义配置文件的路径</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/04.png\" style=\"height:325px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(5)设置本地Git的exe路径(若不使用本地已有的Git, 可选中Install automatically, Jenkins会自动安装)</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/06.png\" style=\"height:257px; width:800px\" /></p>\r\n\r\n<p>3. 配置SSH</p>\r\n\r\n<p style=\"margin-left:40px\">(1)Manage Jenkins --&gt; Configure System 在页面中找到Publish over SSH, 点击Add按钮, 然后点击Advanced...按钮并在Use password authentication, or use a different key前面打钩, 填写如下内容:&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/05.png\" style=\"height:648px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">&lt;1&gt;name: SSH连接的名称</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;2&gt;Hostname: 远程服务器IP</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;3&gt;Username: 远程服务器用户名</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;4&gt;Remote Directory: 这个是相对于远程服务器的路径, 具体项目中的SSH配置还需要填写Source files, Remote Directory, Remove prefix这三项, Jenkins会通过这几个配置得出最终文件上传后远程服务器中文件的路径. 参考第5(5)&lt;4&gt;步.</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;5&gt;Passphrase/Password:&nbsp;远程服务器密码</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;6&gt;Path to key:&nbsp;远程服务器SSH秘钥路径</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;7&gt;Port:&nbsp;远程服务器SSH连接端口号</p>\r\n\r\n<p>4. 新建Maven项目</p>\r\n\r\n<p style=\"margin-left:40px\">(1) New Item</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/07.png\" style=\"height:300px; width:444px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(2) 选择Maven Project, 填写Jenkins项目名称, 点击OK</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/08.png\" style=\"height:801px; width:800px\" /></p>\r\n\r\n<p>5. 项目配置说明</p>\r\n\r\n<p style=\"margin-left:40px\">(1)Description: 项目描述</p>\r\n\r\n<p style=\"margin-left:40px\">(2)Source Code Management: 配置代码管理</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;1&gt;使用Git</p>\r\n\r\n<p style=\"margin-left:80px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/09.png\" style=\"height:642px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:80px\">填写URL, 用户名, 密码, 分支, Jenkins会在安装目录下的workspace目录下一个文件夹, 文件夹名称为当前Jenkins项目的名称, 这个文件夹下存放所有下载的代码.&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;2&gt;使用SVN</p>\r\n\r\n<p style=\"margin-left:80px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/10.png\" style=\"height:743px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:80px\">Local module directory: 用来指定代码存放路径, 这个与Git有所区别, 若不填, 则存放位置与Git类似, 若填写, 则为默认路径的相对路径. 例如: Jenkins安装目录为:&nbsp;C:\\Program Files (x86)\\Jenkins, 当前Jenkins项目名称为blogs,&nbsp;Local module directory为: all, 则最终代码存放路径为:&nbsp;C:\\Program Files (x86)\\Jenkins\\workspace\\blogs\\all</p>\r\n\r\n<p style=\"margin-left:40px\">(3) 自动部署触发器</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/11.png\" style=\"height:407px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:80px\">&lt;1&gt; 可以不设置, 每次手动点击按钮进行一键部署</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;2&gt; 可以在上面的各种情况下设置部署, 上图选择的是通过Poll SCM定时部署, H/24 * * * *代表每24小时部署一次, 下面还会显示上一次部署时间和下一次部署时间.</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;3&gt; 也可以通过安装如Github plugin等插件实现每次版本控制器有代码提交, 就自动部署, 但正式环境不建议这么干.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">(4) 配置pom文件路径与Maven执行命令(Root POM也可以是相对路径)</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/12.png\" style=\"height:189px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(5) 通过SSH上传文件至远程服务器并执行备份等操作</p>\r\n\r\n<p style=\"margin-left:40px\">在Post-build Actions的下拉框中选择Send build artifacts over SSH</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/13.png\" style=\"height:336px; width:407px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">SSHServer的配置如下:</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Maven%E9%A1%B9%E7%9B%AE/14.png\" style=\"height:767px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:80px\">&lt;1&gt;Name: 下拉框选择第3步配置的SSH服务器</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;2&gt;Source files: 指定需要上传到远程服务器的文件相对路径(相对于代码存放路径), 例如: 代码存放路径为:&nbsp;C:\\Program Files (x86)\\Jenkins\\workspace\\all, Source files为: oa_jinnan/target/oa_jinnan.war, 则上传前文件的最终路径为:&nbsp;C:\\Program Files (x86)\\Jenkins\\workspace\\all\\oa_jinnan\\target\\oa_jinnan.war.&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;3&gt; Remote directory: 参考第5(5)&lt;4&gt;步.&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;4&gt;Remove prefix: 需要移除的目录前缀, 如果设置了此项属性, 则Source files必须以这个目录前缀开头.&nbsp;</p>\r\n\r\n<p style=\"margin-left:120px\">举例说明该属性的作用, 假设配置如下:</p>\r\n\r\n<ul style=\"margin-left:160px\">\r\n	<li>系统中SSH配置的Remote directory为: /usr/local/test</li>\r\n	<li>当前Jenkins项目SSH配置的Source files为:&nbsp;oa_jinnan/target/oa_jinnan.war</li>\r\n	<li>当前Jenkins项目SSH配置的Remove prefix为:&nbsp;oa_jinnan/target</li>\r\n	<li>当前Jenkins项目SSH配置的Remote directory为:&nbsp;../projects/blogs</li>\r\n</ul>\r\n\r\n<p style=\"margin-left:120px\">则最终文件上传后远程服务器中文件的路径为: /usr/local/projects/blogs/oa_jinnan.war.</p>\r\n\r\n<p style=\"margin-left:120px\">如果不配置当前Jenkins项目SSH配置的Remove prefix,&nbsp;则最终文件上传后远程服务器中文件的路径为: /usr/local/projects/blogs/oa_jinnan/target/oa_jinnan.war</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;5&gt;Exec command: 文件上传后, 远程服务器要执行的命令</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">export DATE=$(date \"+%Y%m%d_%H%M%S\")\r\nsleep 5\r\ncp -rf /usr/local/tomcat/webapps/ROOT /usr/local/bak/oa_$DATE\r\nsh /usr/local/tomcat/bin/shutdown.sh\r\nnetstat -apn |grep java |awk \'{print $7}\' |xargs |awk -F \'/\' \'{print $1}\' |xargs kill -9\r\nrm -rf /usr/local/tomcat/webapps/ROOT\r\ncp -rf /usr/local/tomcat/webapps/oa_jinnan/* /usr/local/tomcat/webapps/ROOT\r\nrm -rf /usr/local/tomcat/webapps/oa_jinnan.war /usr/local/tomcat/webapps/oa_jinnan\r\nsh /usr/local/tomcat/bin/startup.sh</code></pre>\r\n\r\n<p style=\"margin-left:120px\">可以不用重启Tomcat, 因为Tomcat会自动解压缩, 视需要而定.&nbsp;</p>\r\n\r\n<p style=\"margin-left:120px\">export DATE=$(date &quot;+%Y%m%d_%H%M%S&quot;)这一句是用来给备份文件添加年月日时分秒的后缀</p>\r\n\r\n<p style=\"margin-left:120px\">备份也可以在文件上传之前执行, 在Pre Steps的下拉框中选择Send files or execute commands Over SSH, 配置方法与上面相同.&nbsp;</p>\r\n\r\n<p style=\"margin-left:120px\">netstat -apn |grep java |awk &#39;{print $7}&#39; |xargs |awk -F &#39;/&#39; &#39;{print $1}&#39; |xargs kill -9这一句代表查出java进程的PID, 然后kill掉.&nbsp;</p>', '2018-07-25 07:52:10.567959', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('02713a65903e4fd0b1aafa7e3ad903a3', '去掉右下角的WPS登录图标, 关闭WPS广告', '<p>1. 在WPS安装目录(如: D:\\WPS\\10.1.0.7565\\office6)下, 找到如下三个文件:&nbsp;wpscenter.exe,&nbsp;wpscloudsvr.exe,&nbsp;wpsrenderer.exe, 分别右键编辑, 将里面的内容全部删除, 然后保存.&nbsp;</p>\r\n\r\n<p>2. 重启电脑, 或者在任务管理器中找到上面三个进程, 将这些进程关掉即可.</p>\r\n\r\n<p>3. 关闭WPS广告: 在控制面板中找到WPS并进入卸载页面, 在卸载页面会问你为什么卸载, 里面有个广告太多的选项, 点进去可以关闭广告.</p>', '2018-12-10 00:57:17.968147', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('050901e2f1ec411a8394353296c46a7e', '通过命令行使用Git', '<p>1.&nbsp;安装Git-2.12.2.2-64-bit.exe</p>\r\n\r\n<p>2.&nbsp;任何目录下, 右键, Git Bash Here</p>\r\n\r\n<p>3.&nbsp;初次安装git配置用户名和邮箱</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">git config --global user.name \"paul\"\r\ngit config --global user.email \"paulandcode@gmail.com\"</code></pre>\r\n\r\n<p>4.&nbsp;查看是否已有ssh公钥</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">type %userprofile%\\.ssh\\id_rsa.pub</code></pre>\r\n\r\n<p>若没有, 则会提示找不到文件</p>\r\n\r\n<p>5.&nbsp;若没有, 生成公钥</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">ssh-keygen -t rsa -C \"paulandcode@gmail.com\" -b 4096</code></pre>\r\n\r\n<p>生成过程中会让你设置公钥路径, 直接回车使用默认路径即可<br />\r\n还会让你设置密码, 若不设置密码, 则直接回车即可</p>\r\n\r\n<p>6.&nbsp;添加公钥到远程仓库</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">cat ~/.ssh/id_rsa.pub</code></pre>\r\n\r\n<p>上面的命令会获得公钥, 然后需要你手动将公钥添加到远程仓库</p>\r\n\r\n<p>7.&nbsp;若是搭建的gitlab私服,则连接仓库时会提示无法解析主机名, 此时要在C:\\Windows\\System32\\drivers\\etc下的hosts文件中加入一行代码</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">192.168.0.233 gitlab.ywz.com</code></pre>\r\n\r\n<p>8. 若本地没有原始代码, 需要从远程Git仓库下载原始代码到本地</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">cd new_folder\r\ngit clone ssh://git@github.com:paulandcode/blogs.git</code></pre>\r\n\r\n<p>9. 若本地有原始代码, 远程Git仓库没有原始代码, 需要将原始代码上传到远程仓库.&nbsp;若使用GitHub, 最好加上README.md, .gitignore,&nbsp;LICENSE这几个基本文件.&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">cd existing_folder\r\ngit init\r\ngit remote add origin https://github.com/paulandcode/paulandcode_lucene.git\r\ngit add .\r\ngit commit -m \"Initial commit\"\r\ngit push -u origin master</code></pre>\r\n\r\n<p style=\"margin-left:40px\">若提示: fatal: remote origin already exists, 则移除后再添加Git仓库</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">git remote rm origin</code></pre>\r\n\r\n<p>10. 同步远程Git仓库代码到本地</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">git pull --rebase origin master</code></pre>\r\n\r\n<p>11. 提交代码到本地Git仓库</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">git add test.html\r\ngit commit -m \"Commit test.html\"</code></pre>\r\n\r\n<p>12. 提交本地Git仓库代码到远程Git仓库</p>\r\n\r\n<pre>\r\n<code class=\"language-git\">git push -u origin master</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-08 12:25:23.717044', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('055ae804b4944028a413731e36b49aae', 'Windows安装Jenkins', '<p>1. Jenkins官网:&nbsp;<a href=\"https://jenkins.io/\" target=\"_blank\">https://jenkins.io/</a></p>\r\n\r\n<p>2. 下载msi文件并安装</p>\r\n\r\n<p>msi下载路径:&nbsp;<a href=\"https://jenkins.io/content/thank-you-downloading-windows-installer/\" target=\"_blank\">https://jenkins.io/content/thank-you-downloading-windows-installer/</a></p>\r\n\r\n<p>3. 访问页面</p>\r\n\r\n<p>安装后程序会自动创建了一个Windows服务, Jenkins默认使用的端口是8080, 在浏览器中输入地址: http://127.0.0.1:8080.</p>\r\n\r\n<p>4. 更改端口号</p>\r\n\r\n<p style=\"margin-left:40px\">方式一. (此方式是命令行启动Jenkins)</p>\r\n\r\n<p style=\"margin-left:40px\">在Jenkins根目录执行如下命令启动服务:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">java -jar jenkins.war --httpPort=8081</code></pre>\r\n\r\n<p style=\"margin-left:40px\">方式二.&nbsp;(此方式是通过Windows服务启动Jenkins)</p>\r\n\r\n<p style=\"margin-left:40px\">在Jenkins根目录下的jenkins.xml中搜索httpPort, 将其后面默认的8080改为要设置的端口号, 改好后重新启动Jenkins的Windows服务.&nbsp;</p>\r\n\r\n<p>5. 根据提示输入密钥并安装所需要的插件, 如果不知道需要哪些插件, 安装标准配置插件即可.&nbsp;</p>', '2018-07-18 01:53:17.046535', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('05803bd048be417ab4aecac505fb5d9c', 'Shiro工具类', '<p>1. Maven导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\r\n    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;\r\n    &lt;version&gt;1.3.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\r\n    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;\r\n    &lt;version&gt;1.3.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n	&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\r\n	&lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;\r\n	&lt;version&gt;1.3.2&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>2. 工具类&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import com.paulandcode.entity.SysUserEntity;\r\n\r\nimport org.apache.shiro.SecurityUtils;\r\nimport org.apache.shiro.session.Session;\r\nimport org.apache.shiro.subject.Subject;\r\n\r\n/**\r\n * Shiro工具类\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:29:19\r\n */\r\npublic class ShiroUtils {\r\n	/**\r\n	 * \r\n	 * 获得ShiroSession.\r\n	 * @return\r\n	 */\r\n	public static Session getSession() {\r\n		return SecurityUtils.getSubject().getSession();\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 获得Subject.\r\n	 * @return\r\n	 */\r\n	public static Subject getSubject() {\r\n		return SecurityUtils.getSubject();\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 获得Princpal, 此处的SysUserEntity是自定义UserRealm中的doGetAuthenticationInfo方法中设置的.\r\n	 * @return\r\n	 */\r\n	public static SysUserEntity getUserEntity() {\r\n		return (SysUserEntity)SecurityUtils.getSubject().getPrincipal();\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 获得用户id.\r\n	 * @return\r\n	 */\r\n	public static Long getUserId() {\r\n		return getUserEntity().getUserId();\r\n	}\r\n	\r\n	/**\r\n	 * \r\n	 * ShiroSession中放置某个键值对\r\n	 * @param key\r\n	 * @param value\r\n	 */\r\n	public static void setSessionAttribute(Object key, Object value) {\r\n		getSession().setAttribute(key, value);\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 获得ShiroSession中某个键值对\r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	public static Object getSessionAttribute(Object key) {\r\n		return getSession().getAttribute(key);\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 是否已经登录.\r\n	 * @return\r\n	 */\r\n	public static boolean isLogin() {\r\n		return SecurityUtils.getSubject().getPrincipal() != null;\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 退出登录.\r\n	 */\r\n	public static void logout() {\r\n		SecurityUtils.getSubject().logout();\r\n	}\r\n	\r\n	/**\r\n	 * \r\n	 * 获得验证码, 获得一次后, 从ShiroSession中移除, 无法再次获得.\r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	public static String getKaptcha(String key) {\r\n		String kaptcha = getSessionAttribute(key).toString();\r\n		getSession().removeAttribute(key);\r\n		return kaptcha;\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 03:10:14.635786', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('05e53c833a5b4b5a870b2a905a85c4b3', 'Jenkins配置用户权限', '<p>1. 点击左侧的Manage Jenkins --&gt; Configure Global Security, 选择Enable security,&nbsp;Jenkins&rsquo; own user database,&nbsp;Allow users to sign up, Matrix-based security, 在Anonymous Users这一行全部打钩, 点击保存.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/Jenkins%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/01.png\" style=\"height:388px; width:800px\" /></p>\r\n\r\n<p>2. 退出登录, 注册新账户, 然后用新账户登录, 同样点开上一步页面, 取消Allow users to sign up, 取消Anonymous Users这一行的打钩, 在User/group to add这里填写新注册的账户, 点击Add,&nbsp;在paul这一行全部打钩, 点击保存.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/Jenkins%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/02.png\" style=\"height:589px; width:800px\" /></p>\r\n\r\n<p>3. 新建的paul用户拥有所有的权限, 可以根据需要更改权限, 并且设置后Jenkins不允许注册新账号</p>', '2018-07-25 07:53:58.295876', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('065ede53a76646e498ada9adef5cfd63', 'MyBatis的mapper文件中#与$的用法', '<p>${}一般用于传输数据库的表名、字段名等</p>\r\n\r\n<p>能用#{}的地方尽量别用${}</p>', '2018-07-13 06:29:46.294979', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('075e02a6942647d19d8441e5ca1c8a79', 'gradle下载慢的问题及下载位置', '<p>1. 修改项目根目录下的文件 build.gradle ，使用国内阿里云镜像仓库地址</p>\r\n\r\n<pre>\r\n<code class=\"language-javascript\">buildscript {\r\n    repositories {\r\n        maven{ url \'http://maven.aliyun.com/nexus/content/groups/public/\'}\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        maven{ url \'http://maven.aliyun.com/nexus/content/groups/public/\'}\r\n    }\r\n}</code></pre>\r\n\r\n<p>2.&nbsp;Windows系统默认下载到：<br />\r\n<a href=\"https://www.baidu.com/s?wd=C%3A&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\">C:</a>\\Users\\(用户名)\\.gradle\\caches\\modules-2\\files-2.1</p>', '2019-03-15 02:35:44.223401', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('080897478c494a3e93c6afc5e045472e', 'log4j.properties文件', '<pre>\r\n<code class=\"language-basic\"># 日志级别(由低到高):\r\n# ALL   打开所有日志记录\r\n# DEBUG 调试信息\r\n# INFO  运行信息\r\n# WARN  警告信息,有潜在错误\r\n# ERROR 错误信息,但不影响程序运行\r\n# FATAL 严重信息,会导致程序退出\r\n# OFF   关闭所有日志记录\r\n\r\n# 日志的输出方式:\r\n# org.apache.log4j.ConsoleAppender(控制台)\r\n# org.apache.log4j.FileAppender(文件)\r\n# org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)\r\n# org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)\r\n# org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)\r\n\r\n# 日志的输出格式:\r\n# org.apache.log4j.HTMLLayout(以HTML表格形式布局)\r\n# org.apache.log4j.PatternLayout(可以灵活地指定布局模式)\r\n# org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串)\r\n# org.apache.log4j.TTCCLayout(包含日志产生的时间,线程,类别等信息)\r\n\r\n# 灵活指定日志输出格式:\r\n# %c: 输出所属的类目,通常就是所在类的全名\r\n# %d: 输出日志时间点的日期或时间,默认格式为ISO8601,也可以在其后指定格式,比如: %d{yyyy-MM-dd HH:mm:ss} 输出类似:2002-10-18 22:10:28\r\n# %l: 输出日志事件的发生位置,包括类目名,发生的线程,在代码中的行数.举例: Testlog4.main(TestLog4.java:10)\r\n# %m: 输出代码中指定的消息\r\n# %n: 输出一个回车换行符,Windows平台为\"/r/n\",Unix平台为\"/n\"\r\n# %p: 输出优先级,即DEBUG,INFO,WARN,ERROR,FATAL\r\n# %r: 输出自应用启动到输出该log信息耗费的毫秒数\r\n# %t: 输出产生该日志事件的线程名\r\n\r\n# 将所有包的日志级别设为INFO(输出INFO及以上级别日志)\r\n# 为这些日志配置4种日志输出并命名为: console,info,warn,error(这些名字随便取)\r\nlog4j.rootLogger=INFO,console,info,warn,error\r\n# 将org与com.alibaba包的日志级别设为OFF(关闭所有日志记录)\r\nlog4j.logger.org=OFF\r\nlog4j.logger.com.alibaba=OFF\r\n\r\n# console\r\n# 输出方式为: 控制台输出\r\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.console.Target=System.out\r\n# 输出级别为INFO(包括INFO,WARN,ERROR,FATAL)\r\nlog4j.appender.console.Threshold=INFO\r\n# 输出格式为: 灵活指定格式\r\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.console.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# info\r\n# 输出方式为: 每天产生一个日志文件\r\nlog4j.appender.info=org.apache.log4j.DailyRollingFileAppender\r\n# 日志文件位置: ${catalina.home}/logs/paulandcode/base/info.log(${catalina.home}指: D:/Java/apache-tomcat-9.0.0)\r\nlog4j.appender.info.File=${catalina.home}/logs/paulandcode/base/info.log\r\n# 每日生成的日志文件命名方式: info.log.2017-05-24\r\nlog4j.appender.info.append=true\r\nlog4j.appender.info.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.info.Threshold=INFO\r\nlog4j.appender.info.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.info.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# warn\r\nlog4j.appender.warn=org.apache.log4j.DailyRollingFileAppender\r\nlog4j.appender.warn.File=${catalina.home}/logs/paulandcode/base/warn.log\r\nlog4j.appender.warn.append=true\r\nlog4j.appender.warn.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.warn.Threshold=WARN\r\nlog4j.appender.warn.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.warn.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# error\r\nlog4j.appender.error=org.apache.log4j.DailyRollingFileAppender\r\nlog4j.appender.error.File=${catalina.home}/logs/paulandcode/base/error.log\r\nlog4j.appender.error.append=true\r\nlog4j.appender.error.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.error.Threshold=ERROR\r\nlog4j.appender.error.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.error.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# slowsql\r\nlog4j.logger.com.alibaba.druid.filter.stat.StatFilter=ERROR,slowsql\r\nlog4j.appender.slowsql=org.apache.log4j.DailyRollingFileAppender\r\nlog4j.appender.slowsql.File=${catalina.home}/logs/paulandcode/base/slow_sql.log\r\nlog4j.appender.slowsql.append=true\r\nlog4j.appender.slowsql.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.slowsql.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.slowsql.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %m %n\r\n\r\n# sql\r\n# 将com.paulandcode.dao包下的日志级别设为DEBUG\r\n# 为这些日志配置1种日志输出并命名为:sql\r\nlog4j.logger.com.paulandcode.dao=DEBUG,sql\r\nlog4j.appender.sql=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.sql.Target=System.out\r\nlog4j.appender.sql.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.sql.layout.ConversionPattern=%m %n</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-11-02 05:26:00.206251', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('081d97cb01ae46618d0bb59575e14bd1', 'MySQL乐观锁', '<p>悲观锁并不是适用于任何场景，它也有它存在的一些不足，因为悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响了程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是对长事务而言，这样的开销往往无法承受。所以与悲观锁相对的，我们有了乐观锁，具体参见下面介绍：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;乐观锁介绍：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。那么我们如何实现乐观锁呢，一般来说有以下2种方式：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;1.使用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 &ldquo;version&rdquo; 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。如果更新操作顺序执行，则数据的版本（version）依次递增，不会产生冲突。但是如果发生有不同的业务操作对同一版本的数据进行修改，那么，先提交的操作会把数据version更新为2，当A在B之后提交更新时发现数据的version已经被修改了，那么A的更新操作会失败。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;2.乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）, 和上面的version类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;使用举例：以MySQL InnoDB为例</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;还是拿之前的实例来举：商品goods表中有一个字段status，status为1代表商品未被下单，status为2代表商品已经被下单，那么我们对某个商品下单时必须确保该商品status为1。假设商品的id为1。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;下单操作包括3步骤：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;1.查询出商品信息</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;select (status,status,version) from t_goods where id=#{id}</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;2.根据商品信息生成订单</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;3.修改商品status为2</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;update t_goods&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;set status=2,version=version+1</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;where id=#{id} and version=#{version};</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;那么为了使用乐观锁，我们首先修改t_goods表，增加一个version字段，数据默认version值为1。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;t_goods表初始数据如下：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Sql代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;mysql&gt; select * from t_goods; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;+----+--------+------+---------+ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;| id | status | name | version | &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;+----+--------+------+---------+ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;| &nbsp;1 | &nbsp; &nbsp; &nbsp;1 | 道具 | &nbsp; &nbsp; &nbsp; 1 | &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;| &nbsp;2 | &nbsp; &nbsp; &nbsp;2 | 装备 | &nbsp; &nbsp; &nbsp; 2 | &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;+----+--------+------+---------+ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;2 rows in set &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;mysql&gt; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;对于乐观锁的实现，我使用MyBatis来进行实践，具体如下：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Goods实体类：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Java代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;/**&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * ClassName: Goods &lt;br/&gt;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * Function: 商品实体. &lt;br/&gt;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * date: 2013-5-8 上午09:16:19 &lt;br/&gt;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * @author chenzhou1025@126.com&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; */ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;public class Goods implements Serializable { &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/**&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * serialVersionUID:序列化ID.&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private static final long serialVersionUID = 6803791908148880587L; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/**&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * id:主键id.&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private int id; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/**&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * status:商品状态：1未下单、2已下单.&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private int status; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/**&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * name:商品名称.&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private String name; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;/**&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; * version:商品数据版本号.&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; */ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private int version; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;@Override &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public String toString(){ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return &quot;good id:&quot;+id+&quot;,goods status:&quot;+status+&quot;,goods name:&quot;+name+&quot;,goods version:&quot;+version; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;} &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//setter and getter &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;} &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;GoodsDao</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Java代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;/**&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * updateGoodsUseCAS:使用CAS(Compare and set)更新商品信息. &lt;br/&gt;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; *&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * @author chenzhou1025@126.com&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * @param goods 商品对象&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; * @return 影响的行数&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; */ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;int updateGoodsUseCAS(Goods goods); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;mapper.xml</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Xml代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;&lt;update id=&quot;updateGoodsUseCAS&quot; parameterType=&quot;Goods&quot;&gt; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;![CDATA[&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;update t_goods&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;set status=#{status},name=#{name},version=version+1&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;where id=#{id} and version=#{version}&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;]]&gt; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&lt;/update&gt; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;GoodsDaoTest测试类</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Java代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;@Test &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;public void goodsDaoTest(){ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;int goodsId = 1; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//根据相同的id查询出商品信息，赋给2个对象 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Goods goods1 = this.goodsDao.getGoodsById(goodsId); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Goods goods2 = this.goodsDao.getGoodsById(goodsId); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//打印当前商品信息 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;System.out.println(goods1); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;System.out.println(goods2); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//更新商品信息1 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;goods1.setStatus(2);//修改status为2 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;int updateResult1 = this.goodsDao.updateGoodsUseCAS(goods1); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;System.out.println(&quot;修改商品信息1&quot;+(updateResult1==1?&quot;成功&quot;:&quot;失败&quot;)); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;//更新商品信息2 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;goods1.setStatus(2);//修改status为2 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;int updateResult2 = this.goodsDao.updateGoodsUseCAS(goods1); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;System.out.println(&quot;修改商品信息2&quot;+(updateResult2==1?&quot;成功&quot;:&quot;失败&quot;)); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;} &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;输出结果：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Shell代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;good id:1,goods status:1,goods name:道具,goods version:1 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;good id:1,goods status:1,goods name:道具,goods version:1 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;修改商品信息1成功 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;修改商品信息2失败 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;说明：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;在GoodsDaoTest测试方法中，我们同时查出同一个版本的数据，赋给不同的goods对象，然后先修改good1对象然后执行更新操作，执行成功。然后我们修改goods2，执行更新操作时提示操作失败。此时t_goods表中数据如下：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Sql代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;mysql&gt; select * from t_goods; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;+----+--------+------+---------+ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;| id | status | name | version | &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;+----+--------+------+---------+ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;| &nbsp;1 | &nbsp; &nbsp; &nbsp;2 | 道具 | &nbsp; &nbsp; &nbsp; 2 | &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;| &nbsp;2 | &nbsp; &nbsp; &nbsp;2 | 装备 | &nbsp; &nbsp; &nbsp; 2 | &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;+----+--------+------+---------+ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;2 rows in set &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;mysql&gt; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;我们可以看到 id为1的数据version已经在第一次更新时修改为2了。所以我们更新good2时update where条件已经不匹配了，所以更新不会成功，具体sql如下：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;Sql代码 &nbsp;收藏代码<br />\r\n&nbsp;&nbsp; &nbsp;update t_goods &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;set status=2,version=version+1 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;where id=#{id} and version=#{version};</p>', '2018-07-31 02:49:19.224671', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0a9a88ca98114802bd0b54330e21d97e', 'Oracle 11g导出表时, 部分空表无法导出', '<p>0. 原因</p>\r\n\r\n<p style=\"margin-left:40px\">ORACLE 11G中有个新特性，当表无数据时，不分配segment，以节省空间. 而没有分配segment的表则不会导出.</p>\r\n\r\n<p>1.&nbsp;insert一行，再rollback就产生segment了</p>\r\n\r\n<p>该方法是在在空表中插入数据，再删除，则产生segment。导出时则可导出该空表.&nbsp;</p>\r\n\r\n<p>2.&nbsp;设置deferred_segment_creation参数</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">SQL&gt; show parameter deferred_segment_creation \r\nNAME                                 TYPE        VALUE \r\n------------------------------------ ----------- ------------------------------ \r\ndeferred_segment_creation            boolean     TRUE \r\nSQL&gt; alter system set deferred_segment_creation=false; \r\n系统已更改。 \r\nSQL&gt; show parameter deferred_segment_creation \r\nNAME                                 TYPE        VALUE \r\n------------------------------------ ----------- ------------------------------ \r\ndeferred_segment_creation            boolean     FALSE</code></pre>\r\n\r\n<p>需注意的是：该值设置后对以前导入的空表不产生作用，仍不能导出，只能对后面新增的表产生作用。如需导出之前的空表，只能用第一种方法.&nbsp;</p>\r\n\r\n<p>3.&nbsp;批量处理空表</p>\r\n\r\n<p style=\"margin-left:40px\">3.1 &nbsp;首先使用下面的sql语句查询一下当前用户下的所有空表</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select table_name from user_tables where NUM_ROWS is null;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">3.2&nbsp;假设我们这里有空表TBL_1，TBL_2，TBL_3，TBL_4，则执行如下sql</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">alter table TBL_1 allocate extent;\r\nalter table TBL_2 allocate extent;\r\nalter table TBL_3 allocate extent;\r\nalter table TBL_4 allocate extent;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2019-03-20 08:30:23.682293', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0ab931471761452596dae9d1e92c70e2', 'Redis配置文件redis.conf', '<pre>\r\n<code class=\"language-bash\"># Redis配置文件样例\r\n\r\n# Note on units: when memory size is needed, it is possible to specifiy\r\n# it in the usual form of 1k 5GB 4M and so forth:\r\n#\r\n# 1k =&gt; 1000 bytes\r\n# 1kb =&gt; 1024 bytes\r\n# 1m =&gt; 1000000 bytes\r\n# 1mb =&gt; 1024*1024 bytes\r\n# 1g =&gt; 1000000000 bytes\r\n# 1gb =&gt; 1024*1024*1024 bytes\r\n#\r\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\r\n\r\n# Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\r\n# 启用守护进程后，Redis会把pid写到一个pidfile中，在/var/run/redis.pid\r\ndaemonize no\r\n\r\n# 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\r\npidfile /var/run/redis.pid\r\n\r\n# 指定Redis监听端口，默认端口为6379\r\n# 如果指定0端口，表示Redis不监听TCP连接\r\nport 6379\r\n\r\n# 绑定的主机地址\r\n# 你可以绑定单一接口，如果没有绑定，所有接口都会监听到来的连接\r\n# bind 127.0.0.1\r\n\r\n# Specify the path for the unix socket that will be used to listen for\r\n# incoming connections. There is no default, so Redis will not listen\r\n# on a unix socket when not specified.\r\n#\r\n# unixsocket /tmp/redis.sock\r\n# unixsocketperm 755\r\n\r\n# 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\r\ntimeout 0\r\n\r\n# 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\r\n# debug (很多信息, 对开发／测试比较有用)\r\n# verbose (many rarely useful info, but not a mess like the debug level)\r\n# notice (moderately verbose, what you want in production probably)\r\n# warning (only very important / critical messages are logged)\r\nloglevel verbose\r\n\r\n# 日志记录方式，默认为标准输出，如果配置为redis为守护进程方式运行，而这里又配置为标准输出，则日志将会发送给/dev/null\r\nlogfile stdout\r\n\r\n# To enable logging to the system logger, just set \'syslog-enabled\' to yes,\r\n# and optionally update the other syslog parameters to suit your needs.\r\n# syslog-enabled no\r\n\r\n# Specify the syslog identity.\r\n# syslog-ident redis\r\n\r\n# Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.\r\n# syslog-facility local0\r\n\r\n# 设置数据库的数量，默认数据库为0，可以使用select &lt;dbid&gt;命令在连接上指定数据库id\r\n# dbid是从0到‘databases’-1的数目\r\ndatabases 16\r\n\r\n################################ SNAPSHOTTING  #################################\r\n# 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\r\n# Save the DB on disk:\r\n#\r\n#   save &lt;seconds&gt; &lt;changes&gt;\r\n#\r\n#   Will save the DB if both the given number of seconds and the given\r\n#   number of write operations against the DB occurred.\r\n#\r\n#   满足以下条件将会同步数据:\r\n#   900秒（15分钟）内有1个更改\r\n#   300秒（5分钟）内有10个更改\r\n#   60秒内有10000个更改\r\n#   Note: 可以把所有“save”行注释掉，这样就取消同步操作了\r\n\r\nsave 900 1\r\nsave 300 10\r\nsave 60 10000\r\n\r\n# 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\r\nrdbcompression yes\r\n\r\n# 指定本地数据库文件名，默认值为dump.rdb\r\ndbfilename dump.rdb\r\n\r\n# 工作目录.\r\n# 指定本地数据库存放目录，文件名由上一个dbfilename配置项指定\r\n# \r\n# Also the Append Only File will be created inside this directory.\r\n# \r\n# 注意，这里只能指定一个目录，不能指定文件名\r\ndir ./\r\n\r\n################################# REPLICATION #################################\r\n\r\n# 主从复制。使用slaveof从 Redis服务器复制一个Redis实例。注意，该配置仅限于当前slave有效\r\n# so for example it is possible to configure the slave to save the DB with a\r\n# different interval, or to listen to another port, and so on.\r\n# 设置当本机为slav服务时，设置master服务的ip地址及端口，在Redis启动时，它会自动从master进行数据同步\r\n# slaveof &lt;masterip&gt; &lt;masterport&gt;\r\n\r\n\r\n# 当master服务设置了密码保护时，slav服务连接master的密码\r\n# 下文的“requirepass”配置项可以指定密码\r\n# masterauth &lt;master-password&gt;\r\n\r\n# When a slave lost the connection with the master, or when the replication\r\n# is still in progress, the slave can act in two different ways:\r\n#\r\n# 1) if slave-serve-stale-data is set to \'yes\' (the default) the slave will\r\n#    still reply to client requests, possibly with out of data data, or the\r\n#    data set may just be empty if this is the first synchronization.\r\n#\r\n# 2) if slave-serve-stale data is set to \'no\' the slave will reply with\r\n#    an error \"SYNC with master in progress\" to all the kind of commands\r\n#    but to INFO and SLAVEOF.\r\n#\r\nslave-serve-stale-data yes\r\n\r\n# Slaves send PINGs to server in a predefined interval. It\'s possible to change\r\n# this interval with the repl_ping_slave_period option. The default value is 10\r\n# seconds.\r\n#\r\n# repl-ping-slave-period 10\r\n\r\n# The following option sets a timeout for both Bulk transfer I/O timeout and\r\n# master data or ping response timeout. The default value is 60 seconds.\r\n#\r\n# It is important to make sure that this value is greater than the value\r\n# specified for repl-ping-slave-period otherwise a timeout will be detected\r\n# every time there is low traffic between the master and the slave.\r\n#\r\n# repl-timeout 60\r\n\r\n################################## SECURITY ###################################\r\n\r\n# Warning: since Redis is pretty fast an outside user can try up to\r\n# 150k passwords per second against a good box. This means that you should\r\n# use a very strong password otherwise it will be very easy to break.\r\n# 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过auth &lt;password&gt;命令提供密码，默认关闭\r\nrequirepass root\r\n\r\n# Command renaming.\r\n#\r\n# It is possilbe to change the name of dangerous commands in a shared\r\n# environment. For instance the CONFIG command may be renamed into something\r\n# of hard to guess so that it will be still available for internal-use\r\n# tools but not available for general clients.\r\n#\r\n# Example:\r\n#\r\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\r\n#\r\n# It is also possilbe to completely kill a command renaming it into\r\n# an empty string:\r\n#\r\n# rename-command CONFIG \"\"\r\n\r\n################################### LIMITS ####################################\r\n\r\n# 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，\r\n# 如果设置maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max Number of clients reached错误信息\r\n# maxclients 128\r\n\r\n# Don\'t use more memory than the specified amount of bytes.\r\n# When the memory limit is reached Redis will try to remove keys with an\r\n# EXPIRE set. It will try to start freeing keys that are going to expire\r\n# in little time and preserve keys with a longer time to live.\r\n# Redis will also try to remove objects from free lists if possible.\r\n#\r\n# If all this fails, Redis will start to reply with errors to commands\r\n# that will use more memory, like SET, LPUSH, and so on, and will continue\r\n# to reply to most read-only commands like GET.\r\n#\r\n# WARNING: maxmemory can be a good idea mainly if you want to use Redis as a\r\n# \'state\' server or cache, not as a real DB. When Redis is used as a real\r\n# database the memory usage will grow over the weeks, it will be obvious if\r\n# it is going to use too much memory in the long run, and you\'ll have the time\r\n# to upgrade. With maxmemory after the limit is reached you\'ll start to get\r\n# errors for write operations, and this may even lead to DB inconsistency.\r\n# 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，\r\n# 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。\r\n# Redis新的vm机制，会把Key存放内存，Value会存放在swap区\r\n# maxmemory &lt;bytes&gt;\r\n\r\n# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory\r\n# is reached? You can select among five behavior:\r\n# \r\n# volatile-lru -&gt; remove the key with an expire set using an LRU algorithm\r\n# allkeys-lru -&gt; remove any key accordingly to the LRU algorithm\r\n# volatile-random -&gt; remove a random key with an expire set\r\n# allkeys-&gt;random -&gt; remove a random key, any key\r\n# volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)\r\n# noeviction -&gt; don\'t expire at all, just return an error on write operations\r\n# \r\n# Note: with all the kind of policies, Redis will return an error on write\r\n#       operations, when there are not suitable keys for eviction.\r\n#\r\n#       At the date of writing this commands are: set setnx setex append\r\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\r\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\r\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\r\n#       getset mset msetnx exec sort\r\n#\r\n# The default is:\r\n#\r\n# maxmemory-policy volatile-lru\r\n\r\n# LRU and minimal TTL algorithms are not precise algorithms but approximated\r\n# algorithms (in order to save memory), so you can select as well the sample\r\n# size to check. For instance for default Redis will check three keys and\r\n# pick the one that was used less recently, you can change the sample size\r\n# using the following configuration directive.\r\n#\r\n# maxmemory-samples 3\r\n\r\n############################## APPEND ONLY MODE ###############################\r\n\r\n# \r\n# Note that you can have both the async dumps and the append only file if you\r\n# like (you have to comment the \"save\" statements above to disable the dumps).\r\n# Still if append only mode is enabled Redis will load the data from the\r\n# log file at startup ignoring the dump.rdb file.\r\n# 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。\r\n# 因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\r\n# IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append\r\n# log file in background when it gets too big.\r\n\r\nappendonly no\r\n\r\n# 指定更新日志文件名，默认为appendonly.aof\r\n# appendfilename appendonly.aof\r\n\r\n# The fsync() call tells the Operating System to actually write data on disk\r\n# instead to wait for more data in the output buffer. Some OS will really flush \r\n# data on disk, some other OS will just try to do it ASAP.\r\n\r\n# 指定更新日志条件，共有3个可选值：\r\n# no:表示等操作系统进行数据缓存同步到磁盘（快）\r\n# always:表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）\r\n# everysec:表示每秒同步一次（折衷，默认值）\r\n\r\nappendfsync everysec\r\n# appendfsync no\r\n\r\n# When the AOF fsync policy is set to always or everysec, and a background\r\n# saving process (a background save or AOF log background rewriting) is\r\n# performing a lot of I/O against the disk, in some Linux configurations\r\n# Redis may block too long on the fsync() call. Note that there is no fix for\r\n# this currently, as even performing fsync in a different thread will block\r\n# our synchronous write(2) call.\r\n#\r\n# In order to mitigate this problem it\'s possible to use the following option\r\n# that will prevent fsync() from being called in the main process while a\r\n# BGSAVE or BGREWRITEAOF is in progress.\r\n#\r\n# This means that while another child is saving the durability of Redis is\r\n# the same as \"appendfsync none\", that in pratical terms means that it is\r\n# possible to lost up to 30 seconds of log in the worst scenario (with the\r\n# default Linux settings).\r\n# \r\n# If you have latency problems turn this to \"yes\". Otherwise leave it as\r\n# \"no\" that is the safest pick from the point of view of durability.\r\nno-appendfsync-on-rewrite no\r\n\r\n# Automatic rewrite of the append only file.\r\n# Redis is able to automatically rewrite the log file implicitly calling\r\n# BGREWRITEAOF when the AOF log size will growth by the specified percentage.\r\n# \r\n# This is how it works: Redis remembers the size of the AOF file after the\r\n# latest rewrite (or if no rewrite happened since the restart, the size of\r\n# the AOF at startup is used).\r\n#\r\n# This base size is compared to the current size. If the current size is\r\n# bigger than the specified percentage, the rewrite is triggered. Also\r\n# you need to specify a minimal size for the AOF file to be rewritten, this\r\n# is useful to avoid rewriting the AOF file even if the percentage increase\r\n# is reached but it is still pretty small.\r\n#\r\n# Specify a precentage of zero in order to disable the automatic AOF\r\n# rewrite feature.\r\n\r\nauto-aof-rewrite-percentage 100\r\nauto-aof-rewrite-min-size 64mb\r\n\r\n################################## SLOW LOG ###################################\r\n\r\n# The Redis Slow Log is a system to log queries that exceeded a specified\r\n# execution time. The execution time does not include the I/O operations\r\n# like talking with the client, sending the reply and so forth,\r\n# but just the time needed to actually execute the command (this is the only\r\n# stage of command execution where the thread is blocked and can not serve\r\n# other requests in the meantime).\r\n# \r\n# You can configure the slow log with two parameters: one tells Redis\r\n# what is the execution time, in microseconds, to exceed in order for the\r\n# command to get logged, and the other parameter is the length of the\r\n# slow log. When a new command is logged the oldest one is removed from the\r\n# queue of logged commands.\r\n\r\n# The following time is expressed in microseconds, so 1000000 is equivalent\r\n# to one second. Note that a negative number disables the slow log, while\r\n# a value of zero forces the logging of every command.\r\nslowlog-log-slower-than 10000\r\n\r\n# There is no limit to this length. Just be aware that it will consume memory.\r\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\r\nslowlog-max-len 1024\r\n\r\n############################### ADVANCED CONFIG ###############################\r\n\r\n# Hashes are encoded in a special way (much more memory efficient) when they\r\n# have at max a given numer of elements, and the biggest element does not\r\n# exceed a given threshold. You can configure this limits with the following\r\n# configuration directives.\r\n# 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\r\n# hash-max-zipmap-entries 512\r\n# hash-max-zipmap-value 64\r\n\r\n# Similarly to hashes, small lists are also encoded in a special way in order\r\n# to save a lot of space. The special representation is only used when\r\n# you are under the following limits:\r\nlist-max-ziplist-entries 512\r\nlist-max-ziplist-value 64\r\n\r\n# Sets have a special encoding in just one case: when a set is composed\r\n# of just strings that happens to be integers in radix 10 in the range\r\n# of 64 bit signed integers.\r\n# The following configuration setting sets the limit in the size of the\r\n# set in order to use this special memory saving encoding.\r\nset-max-intset-entries 512\r\n\r\n# Similarly to hashes and lists, sorted sets are also specially encoded in\r\n# order to save a lot of space. This encoding is only used when the length and\r\n# elements of a sorted set are below the following limits:\r\nzset-max-ziplist-entries 128\r\nzset-max-ziplist-value 64\r\n\r\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\r\n# order to help rehashing the main Redis hash table (the one mapping top-level\r\n# keys to values). The hash table implementation redis uses (see dict.c)\r\n# performs a lazy rehashing: the more operation you run into an hash table\r\n# that is rhashing, the more rehashing \"steps\" are performed, so if the\r\n# server is idle the rehashing is never complete and some more memory is used\r\n# by the hash table.\r\n# \r\n# The default is to use this millisecond 10 times every second in order to\r\n# active rehashing the main dictionaries, freeing memory when possible.\r\n#\r\n# If unsure:\r\n# use \"activerehashing no\" if you have hard latency requirements and it is\r\n# not a good thing in your environment that Redis can reply form time to time\r\n# to queries with 2 milliseconds delay.\r\n# 指定是否激活重置哈希，默认为开启\r\nactiverehashing yes\r\n\r\n################################## INCLUDES ###################################\r\n\r\n# 指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各实例又拥有自己的特定配置文件\r\n# include /path/to/local.conf\r\n# include /path/to/other.conf</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-13 07:50:57.017440', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0ac1909eb3694edea3a49f9db40a6833', 'IDEA发布Web项目', '<p>1. 配置全局编译路径(选中项目后按F4)</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/01.png\" style=\"height:495px; width:800px\" /></p>\r\n\r\n<p>如上配置后会在E:\\code\\idea下生成production目录, 在production目录下会存放所有IDEA项目的编译文件</p>\r\n\r\n<p>2. 配置单个模块(项目)编译路径</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/02.png\" style=\"height:494px; width:800px\" /></p>\r\n\r\n<p>如上图, 选择1, 则使用全局编译路径, 最终编译文件会放在E:\\code\\idea\\production\\GetDataCenter目录下. 选择2, 则使用自定义路径, 如上图配置, 则会在E:\\code\\idea\\GetDataCenter\\target\\GetDataCenter中存放当前项目编译文件. 这里要注意,&nbsp;自定义路径最后一层以及上图name后填写的名称都需要与项目名一致, 否则编译文件无法被放到Tomcat中</p>\r\n\r\n<p>3. Libraries: 指定jar包</p>\r\n\r\n<p>4. Facets: 指定web.xml文件和webapp/WebContent文件夹</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/03.png\" style=\"height:484px; width:800px\" /></p>\r\n\r\n<p>5. 指定Artifacts(发布项目相关设置)</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/04.png\" style=\"height:502px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(1) 点击加号新增, 可以选Exploded或者Archive, 区别如下:&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">1&gt; Web Application&nbsp;Exploded：这个是以文件夹形式发布项目，发布项目时就会自动生成文件夹在指定位置, 开发的时候用这个.&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">2&gt; Web Application Archive：就是war包形式, 将项目打成一个war包在指定位置, 部署的时候用这个.</p>\r\n\r\n<p style=\"margin-left:40px\">(2) Output directory(发布路径) : 将项目发布到Tomcat的webapps下哪个文件夹中.&nbsp;这里要注意, 这个文件夹名不是项目访问路径, 项目访问路径在下面第6(2)步配置.</p>\r\n\r\n<p style=\"margin-left:40px\">(3) Output Layout(项目布局): 如上图所示, WebContent/webapp存放前端文件(第4步中指定), WEB-INF下的classes存放编译文件(第1, 2步中指定的), lib存放jar包(第3步中指定), 以及web.xml文件(第4步中指定)</p>\r\n\r\n<p>6. 配置Tomcat</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 新建Tomcat, 指定Tomcat路径, 启动项目后浏览器自动访问的路径, jre, Tomcat端口号(注意: 如果想要改jsp, js等文件不重启项目, 需要在第二图中选择Update classes and resources)</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/06.png\" style=\"height:228px; width:581px\" /></p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/05.png\" style=\"height:370px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(2) 选择第5步中配置的Artifacts, 并在右侧指定项目访问路径</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/07.png\" style=\"height:132px; width:800px\" /></p>\r\n\r\n<p>7. 都配置好后即可启动和调试, 如果Artifacts选择Archive为了打包, 需点击如下按钮</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/08.png\" style=\"height:343px; width:655px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E4%B8%ADWeb%20Application%20Exploded%E5%92%8CWeb%20Application%20Archive%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%85%8D%E7%BD%AE/09.png\" style=\"height:267px; width:615px\" /></p>', '2018-11-02 03:08:25.531721', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0ad209e08fea46158a938b55862c6b68', 'Lucene对拼音搜索的支持', '<p>1. 通过pinyin4j.jar这个包将字段翻译成拼音.</p>\r\n\r\n<p>2. 建立索引时多加一个字段, 这个字段存放拼音全拼和拼音首字母或者更多(两者之间用空格隔开), 如下是增加拼音字段的示例方法: (增加了多种情况搜索, 但是搜索情况增多, 会影响速度)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n * 增加拼音索引字段, 支持每个单字全拼简拼, 所有字简拼, 前2个字全拼简拼, 前3个字全拼简拼\r\n *\r\n * @param doc 文档\r\n * @param fieldName 领域名\r\n * @param value 领域值\r\n * @return void\r\n */\r\nprivate static void addPinyin(Document doc, String fieldName, String value) {\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    HanyuPinyinOutputFormat hanyuPinyinOutputFormat = new HanyuPinyinOutputFormat();\r\n    hanyuPinyinOutputFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);\r\n    hanyuPinyinOutputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);\r\n    hanyuPinyinOutputFormat.setVCharType(HanyuPinyinVCharType.WITH_V);\r\n    char[] ch = value.toCharArray();\r\n    // 每个单字全拼\r\n    StringBuilder oneFullPrint = new StringBuilder();\r\n    // 前两个字全拼\r\n    StringBuilder twoFullPrint = new StringBuilder();\r\n    // 前3个字全拼\r\n    StringBuilder threeFullPrint = new StringBuilder();\r\n    // 每个单字简拼\r\n    StringBuilder oneSimplePrint = new StringBuilder();\r\n    // 前两个字简拼\r\n    StringBuilder twoSimplePrint = new StringBuilder();\r\n    // 前3个字简拼\r\n    StringBuilder threeSimplePrint = new StringBuilder();\r\n    StringBuilder simplePrint = new StringBuilder();\r\n    for (int i = 0; i &lt; ch.length; i++) {\r\n        char aCh = ch[i];\r\n        String[] temp = new String[0];\r\n        try {\r\n            temp = PinyinHelper.toHanyuPinyinStringArray(aCh, hanyuPinyinOutputFormat);\r\n        } catch (BadHanyuPinyinOutputFormatCombination badHanyuPinyinOutputFormatCombination) {\r\n            badHanyuPinyinOutputFormatCombination.printStackTrace();\r\n        }\r\n        if (temp.length &gt; 0) {\r\n            simplePrint.append(temp[0].charAt(0));\r\n            oneFullPrint.append(temp[0]).append(\" \");\r\n            oneSimplePrint.append(temp[0].charAt(0)).append(\" \");\r\n            if (i &lt; 2) {\r\n                twoFullPrint.append(temp[0]);\r\n                twoSimplePrint.append(temp[0].charAt(0));\r\n            }\r\n            if (i &lt; 3) {\r\n                threeFullPrint.append(temp[0]);\r\n                threeSimplePrint.append(temp[0].charAt(0));\r\n            }\r\n        }\r\n    }\r\n    doc.add(new TextField(fieldName + \"_pinyin\", oneFullPrint.toString() + \" \" +\r\n            oneSimplePrint.toString() + \" \" + twoFullPrint.toString() + \" \" + twoSimplePrint.toString() + \" \" +\r\n            threeFullPrint.toString() + \" \" + threeSimplePrint.toString() + \" \" + simplePrint.toString(),\r\n            Field.Store.YES));\r\n}</code></pre>\r\n\r\n<p>3. 判断输入的关键词所在字段是否会进行拼音搜索, 并判断该关键词是拼音</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">// 若搜索的字段需要拼音检索, 且关键字是拼音, 则搜索拼音字段\r\nif (needPinyin &amp;&amp; isPinyin(keyword)) {\r\n    searchFieldName += \"_pinyin\";\r\n}\r\n\r\n\r\n\r\n/**\r\n * 判断是否是拼音(全小写字母)\r\n *\r\n * @param str 判断的字符串\r\n * @return boolean\r\n */\r\npublic static boolean isPinyin(String str) {\r\n	boolean flag = true;\r\n	if (StringUtils.isBlank(str)) {\r\n		flag = false;\r\n	} else {\r\n		char[] c = str.toCharArray();\r\n		for (char aC : c) {\r\n			if (aC &lt; 0x61 || aC &gt; 0x7a) {\r\n				flag = false;\r\n			}\r\n		}\r\n	}\r\n	return flag;\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-11-20 10:25:46.132364', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0c1f8ec49779447aa8c1dfc973a2578e', '观察者模式(Observer Pattern)', '<p>1. 应用场景</p>\r\n\r\n<p>首先有个主办方(即主题), 然后有许多参与者(即观察者), 主办方执行动作并通知所有的参与者, 参与者做出响应. 如订阅报纸, 广播通知等.&nbsp;</p>\r\n\r\n<p>2. 示例代码</p>\r\n\r\n<p style=\"margin-left:40px\">2.1 主办方类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 电影院\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/14/2018 4:15 PM\r\n */\r\npublic class Cinema {\r\n    /**\r\n     * 电影院里的观众\r\n     */\r\n    private List&lt;Viewer&gt; viewers = new ArrayList&lt;&gt;();\r\n\r\n    /**\r\n     * 电影\r\n     */\r\n    private String movie;\r\n\r\n    /**\r\n     * 获得电影\r\n     */\r\n    public String getMovie() {\r\n        return movie;\r\n    }\r\n\r\n    /**\r\n     * 播放电影\r\n     *\r\n     * @param movie 电影\r\n     */\r\n    public void playTheMovie(String movie) {\r\n        this.movie = movie;\r\n        System.out.println(\"正在播放\" + movie + \"...\");\r\n        // 电影播放后, 通知所有观众看电影\r\n        notifyAllViewers();\r\n    }\r\n\r\n    /**\r\n     * 添加观众\r\n     *\r\n     * @param viewer 观众\r\n     */\r\n    void addViewer(Viewer viewer) {\r\n        viewers.add(viewer);\r\n    }\r\n\r\n    /**\r\n     * 通知所有观众看电影\r\n     */\r\n    private void notifyAllViewers() {\r\n        for (Viewer viewer : viewers) {\r\n            viewer.seeTheMovie();\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.2 观察者接口</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 观众\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/14/2018 4:16 PM\r\n */\r\npublic abstract class Viewer {\r\n    /**\r\n     * 观众要去的电影院\r\n     */\r\n    Cinema cinema;\r\n\r\n    /**\r\n     * 看电影\r\n     */\r\n    public abstract void seeTheMovie();\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.3 观察者实体类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\nimport javax.security.auth.Subject;\r\n\r\n/**\r\n * 观众A\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/14/2018 4:57 PM\r\n */\r\npublic class ViewerA extends Viewer {\r\n    /**\r\n     * 创建观众对象时指定要去哪家电影院看电影\r\n     */\r\n    public ViewerA(Cinema cinema) {\r\n        this.cinema = cinema;\r\n        // 在电影院中添加当前观众\r\n        this.cinema.addViewer(this);\r\n    }\r\n\r\n    @Override\r\n    public void seeTheMovie() {\r\n        System.out.println(\"观众A\" + (\"动作片, 爱情片, 科幻片\".contains(cinema.getMovie()) ? \"\" : \"不\") + \"爱看! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 观众B\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/14/2018 4:57 PM\r\n */\r\npublic class ViewerB extends Viewer{\r\n    /**\r\n     * 创建观众对象时指定要去哪家电影院看电影\r\n     */\r\n    public ViewerB(Cinema cinema) {\r\n        this.cinema = cinema;\r\n        // 在电影院中添加当前观众\r\n        this.cinema.addViewer(this);\r\n    }\r\n\r\n    @Override\r\n    public void seeTheMovie() {\r\n        System.out.println(\"观众B\" + (\"动作片, 喜剧片, 历史片\".contains(cinema.getMovie()) ? \"\" : \"不\") + \"爱看! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 观众C\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/14/2018 4:57 PM\r\n */\r\npublic class ViewerC extends Viewer{\r\n    /**\r\n     * 创建观众对象时指定要去哪家电影院看电影\r\n     */\r\n    public ViewerC(Cinema cinema) {\r\n        this.cinema = cinema;\r\n        // 在电影院中添加当前观众\r\n        this.cinema.addViewer(this);\r\n    }\r\n\r\n    @Override\r\n    public void seeTheMovie() {\r\n        System.out.println(\"观众C\" + (\"恐怖片, 喜剧片, 科幻片\".contains(cinema.getMovie()) ? \"\" : \"不\") + \"爱看! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.4 测试</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 测试\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/31 8:39\r\n */\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        // 创建电影院\r\n        Cinema cinema = new Cinema();\r\n\r\n        // 观众进入电影院\r\n        new ViewerA(cinema);\r\n        new ViewerB(cinema);\r\n        new ViewerC(cinema);\r\n\r\n        // 电影院播放电影\r\n        cinema.playTheMovie(\"科幻片\");\r\n        cinema.playTheMovie(\"喜剧片\");\r\n        cinema.playTheMovie(\"爱情片\");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>输出:</p>\r\n\r\n<pre>\r\n<code class=\"language-basic\">正在播放科幻片...\r\n观众A爱看! \r\n观众B不爱看! \r\n观众C爱看! \r\n正在播放喜剧片...\r\n观众A不爱看! \r\n观众B爱看! \r\n观众C爱看! \r\n正在播放爱情片...\r\n观众A爱看! \r\n观众B不爱看! \r\n观众C不爱看! </code></pre>\r\n\r\n<p>3. 优点</p>\r\n\r\n<p style=\"margin-left:40px\">3.1&nbsp;观察者和被观察者是抽象耦合的</p>\r\n\r\n<p style=\"margin-left:40px\">3.2 建立了一套触发机制</p>\r\n\r\n<p>4. 缺点</p>\r\n\r\n<p style=\"margin-left:40px\">4.1&nbsp;如果一个被观察者对象有很多的直接和间接的观察者的话, 将所有的观察者都通知到会花费很多时间.</p>\r\n\r\n<p style=\"margin-left:40px\">4.2&nbsp;如果在观察者和被观察者之间有循环依赖的话, 被观察者会触发它们之间的循环调用, 可能导致系统崩溃.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">4.3&nbsp;观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的, 而仅仅只是知道被观察者发生了变化.&nbsp;</p>', '2018-11-16 00:38:39.914469', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0d66a898fb504667aa5d5db4ad7d8ff2', 'Windows安装MySQL5.7.20报错', '<p>1. 错误信息如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">Action 10:59:21: INSTALL.\r\nMySQL Server 5.7 2: {F08E9C75-A42E-4962-8760-4CBD9CF35D7A}\r\nAction 10:59:21: FindRelatedProducts. Searching for related applications\r\nAction 10:59:21: AppSearch. Searching for installed applications\r\nAction 10:59:21: LaunchConditions. Evaluating launch conditions\r\nThis application requires Visual Studio 2013 Redistributable. Please install the Redistributable then run this installer again.\r\nMySQL Server 5.7 2: {F08E9C75-A42E-4962-8760-4CBD9CF35D7A} 3: 3\r\nThe action \'Install\' for product \'MySQL Server 5.7.20\' failed.</code></pre>\r\n\r\n<p>2. 错误原因</p>\r\n\r\n<p>MySQL自动安装的Visual C++ Redistributable路径不对或者即使是x64的MySQL识别的也是x86的安装路径.&nbsp;</p>\r\n\r\n<p>3. 解决方案</p>\r\n\r\n<p>从微软手动下载 Visual C++ Redistributable并安装, 简体中文微软官方下载路径为: <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=40784\" target=\"_blank\">https://www.microsoft.com/zh-CN/download/details.aspx?id=40784</a>, 点击下载按钮并将vcredist_x64和vcredist_86都下载下来, 先安装vcredist_x64后尝试重新安装MySQL, 假如依然报错, 然后安装vcredist_x86后再次安装MySQL.&nbsp;</p>', '2018-07-14 23:16:54.247380', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0e91ed7db6fb4460acb567cc58e6f754', 'Nginx配置文件nginx.conf', '<p>1. /etc/nginx/nginx.conf的常用配置及说明</p>\r\n\r\n<pre>\r\n<code class=\"language-nginx\"># 指定Nginx Worker进程运行用户, 语法: user user [group]\r\nuser nginx;\r\n\r\n# worker进程数, 通常设置成和CPU的数量相等, 默认为1. \r\nworker_processes 1;\r\n\r\n# 指定进程id存储文件\r\npid /run/nginx.pid;\r\n\r\n# 事件模块\r\nevents {\r\n	# 每个worker进程的连接数, 通过worker_connections和worker_proceses可以计算出maxclients: \r\n	# max_clients = worker_processes * worker_connections, 作为反向代理时, max_clients为: \r\n	# max_clients = worker_processes * worker_connections/4\r\n	worker_connections 768;\r\n\r\n	# 若开启此配置, 则Nginx会在接到一个新的连接通知之后, 尽可能多地去接受, 默认为: off\r\n	multi_accept off;\r\n}\r\n\r\n# http核心模块\r\nhttp {\r\n	##\r\n	# 基本设置\r\n	##\r\n\r\n	# 是否启动高效传输文件模式, sendfile可以让Nginx在传输文件时直接在磁盘和tcp socket之间传输数据. \r\n	# 如果这个参数不开启, 会先在用户空间(Nginx进程空间)申请一个buffer, 用read函数把数据从磁盘读到cache,\r\n	# 再从cache读取到用户空间的buffer, 再用write函数把数据从用户空间的buffer写入到内核的buffer, \r\n	# 最后到tcp socket. 开启这个参数后可以让数据不用经过用户buffer, 默认off. \r\n	sendfile on;\r\n\r\n	# 必须在sendfile开启模式才有效, 告诉Nginx在一个数据包里发送所有头文件, 而不一个接一个的发送, 默认off. \r\n	tcp_nopush on;\r\n\r\n	# 告诉Nginx不要缓存数据, 而是一段一段的发送, 当需要及时发送数据时, 就应该开启这个功能, \r\n	# 这样发送一小块数据信息时就能够立即得到返回值, 默认on. \r\n	tcp_nodelay on;\r\n\r\n	# 给客户端分配keep-alive链接超时时间, 服务器将在这个超时时间过后关闭链接. \r\n	# 我们将它设置低些可以让Ngnix持续工作的时间更长. \r\n	keepalive_timeout 65;\r\n\r\n	# 影响散列表的冲突率, types_hash_max_size越大, 就会消耗更多的内存, 但散列key的冲突率会降低, \r\n	# 检索速度就更快. types_hash_max_size越小, 消耗的内存就越小, 但散列key的冲突率可能上升. \r\n	types_hash_max_size 2048;\r\n	\r\n	# 是否显示版本号, 若不显示, 浏览器访问时抓包, 查看HTTP响应的Server头没有版本号, 默认on \r\n	server_tokens on;\r\n\r\n	# 保存服务器名字的hash表是由指令server_names_hash_max_size和server_names_hash_bucket_size所控制, \r\n	# 若Nginx给出需要增大hash max size或hash bucket size的提示, 那么首要的是增大前一个参数的大小. \r\n	# server_names_hash_max_size 512;\r\n	# server_names_hash_bucket_size 64;\r\n\r\n	# 若为off, 则始终按照默认的80端口, 若为on, 则返回当前正在监听的端口, 默认on. \r\n	port_in_redirect on;\r\n	\r\n	# 若为off, 则会以当前服务器的IP地址进行拼接URL. 若为on, 则会首先查找server_name, \r\n	# 若没有找到, 则会查找请求头的HOST字段, 若还是没有, 则以当前服务器的IP进行拼接, 默认on. \r\n	server_name_in_redirect on;\r\n\r\n	# 设定MIME类型, 类型由mime.type文件定义. \r\n	include /etc/nginx/mime.types;\r\n	\r\n	# 设定默认的MIME类型, 默认: text/plain. \r\n	default_type application/octet-stream;\r\n\r\n	# 设置上传文件大小最大为1000m, 超过会报413错误\r\n    client_max_body_size 1000m;\r\n\r\n	##\r\n	# SSL协议设置\r\n	##\r\n\r\n	# 用于指定支持的加密协议. \r\n	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE\r\n	\r\n	# 设置协商加密算法时, 优先使用服务端的加密套件, 而不是客户端浏览器的加密套件, 默认off. \r\n	ssl_prefer_server_ciphers off;\r\n\r\n	##\r\n	# 日志设置\r\n	##\r\n\r\n	# 每一个访问请求的记录位置\r\n	access_log /var/log/nginx/access.log;\r\n	\r\n	# Nginx错误信息的记录位置\r\n	error_log /var/log/nginx/error.log;\r\n\r\n	##\r\n	# Gzip压缩设置\r\n	##\r\n\r\n	# 是否启动Gzip\r\n	gzip on;\r\n	\r\n	# IE6的某些版本对gzip的压缩支持很不好, 会造成页面的假死, \r\n	# 对img进行Gzip后造成IE6的假死, 把对img的Gzip压缩去掉后就正常了.\r\n	gzip_disable \"msie6\";\r\n	\r\n	# 和HTTP头有关系, 加个vary头, 给代理服务器用的, 有的浏览器支持压缩, 有的不支持, \r\n	# 为了避免浪费不支持的也压缩, 根据客户端的HTTP头来判断, 是否需要压缩. \r\n	gzip_vary on;\r\n	\r\n	# Nginx作为反向代理的时候该参数起作用, 根据某些请求和应答来决定是否在对代理请求的应答启用Gzip压缩, \r\n	# 是否压缩取决于请求头中的\"Via\"字段, 指令中可以同时指定多个不同的参数, 可选值值为:\r\n	# off - 关闭所有的代理结果数据的压缩  \r\n	# expired - 启用压缩，如果header头中包含 \"Expires\" 头信息  \r\n	# no-cache - 启用压缩，如果header头中包含 \"Cache-Control:no-cache\" 头信息  \r\n	# no-store - 启用压缩，如果header头中包含 \"Cache-Control:no-store\" 头信息  \r\n	# private - 启用压缩，如果header头中包含 \"Cache-Control:private\" 头信息  \r\n	# no_last_modified - 启用压缩,如果header头中不包含 \"Last-Modified\" 头信息  \r\n	# no_etag - 启用压缩 ,如果header头中不包含 \"ETag\" 头信息  \r\n	# auth - 启用压缩 , 如果header头中包含 \"Authorization\" 头信息  \r\n	# any - 无条件启用压 \r\n	# 默认为off.\r\n	gzip_proxied off;\r\n	\r\n	# Gzip压缩比, 值为1~9, 1的压缩比最小处理速度最快, 9的压缩比最大但处理最慢(传输快但比较消耗CPU)\r\n	gzip_comp_level 6;\r\n	\r\n	# 设置允许压缩的页面最小字节数, 默认值是0, 不管页面多大都压缩, 建议设置大于1k(即1024), 小于1k可能会越压越大.\r\n	gzip_min_length 1024;\r\n	\r\n	# 设置系统获取几个单位的缓存用于存储Gzip的压缩结果数据流, 4 8k代表: 按照原始数据大小以8k为单位的4倍申请内存.\r\n	gzip_buffers 4 8k;\r\n	\r\n	# 匹配MIME类型进行压缩\r\n	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\r\n	\r\n	# 识别HTTP的协议版本, 99.99%的浏览器都支持1.1, 所以可以不用设这个值, 保持系统默认即可, 默认1.1. \r\n	gzip_http_version 1.1;\r\n\r\n	##\r\n	# 虚拟主机设置\r\n	##\r\n\r\n	# Nginx的配置很灵活, 支持include配置文件, 如果我们的域名都配置到nginx.conf, 那么这个文件就会比较乱,\r\n	# 也影响管理和阅读, 所以直接拆分出来, 分成不同的配置文件. \r\n	include /etc/nginx/conf.d/*.conf;\r\n	\r\n	# 加载一个外部的配置文件, sites-enabled文件夹下只有一个default文件, \r\n	# 这个外部的配置文件就是负责我们Nginx的默认代理, 也就是server块的配置. \r\n	include /etc/nginx/sites-enabled/*;\r\n\r\n	##\r\n	# 缓存设置\r\n	##\r\n\r\n	# 缓存文件路径\r\n	# levels=1:2 设置目录深度, 第一层目录是1个字符, 第2层是2个字符. \r\n    # keys_zone 设置web缓存名称和内存缓存空间大小. \r\n    # inactive 自动清除缓存文件时间. \r\n    # max_size 硬盘空间最大可使用值, 如果缓存空间满, 默认覆盖掉缓存时间最长的资源.  \r\n	proxy_cache_path /data/proxy/cache levels=1:2 keys_zone=cache_one:500m inactive=7d max_size=10g;\r\n    \r\n    # 指定临时缓存文件的存储路径(路径需和上面路径在同一分区)\r\n    proxy_temp_path /data/proxy/temp;\r\n}\r\n\r\n# 配置邮件服务器\r\n#mail {\r\n#	# See sample authentication script at:\r\n#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript\r\n# \r\n#	# 指定Nginx提供邮件服务时, 用于HTTP认证的服务地址\r\n#	# auth_http localhost/auth.php;\r\n#	# 指定现有客户端上的POP3协议的扩展\r\n#	# pop3_capabilities \"TOP\" \"USER\";\r\n#	# 指定现有客户端上的IMAP协议的扩展\r\n#	# imap_capabilities \"IMAP4rev1\" \"UIDPLUS\";\r\n# \r\n#	server {\r\n#		# 指定邮件服务器监听的IP地址和端口. \r\n#		listen     localhost:110;\r\n#       # 指定虚拟机支持的加密协议. \r\n#		protocol   pop3;\r\n#		# 是否开启邮件代理\r\n#		proxy      on;\r\n#	}\r\n# \r\n#	server {\r\n#		# 指定邮件服务器监听的IP地址和端口. \r\n#		listen     localhost:143;\r\n#		# 指定虚拟机支持的加密协议. \r\n#		protocol   imap;\r\n#		# 是否开启邮件代理\r\n#		proxy      on;\r\n#	}\r\n#}</code></pre>\r\n\r\n<p>2.&nbsp;/etc/nginx/sites-enabled/default的常用配置及说明</p>\r\n\r\n<pre>\r\n<code class=\"language-nginx\">server {\r\n	# Nginx监听的IP及端口号, 可以监听多个\r\n	listen 127.0.0.1:80;\r\n	# Nginx监听的IPv6的IP及端口号\r\n	listen [::]:80;\r\n\r\n	# SSL协议配置\r\n	# listen 443 ssl default_server;\r\n	# listen [::]:443 ssl default_server;\r\n	# 加载配置片段\r\n	# include snippets/snakeoil.conf;\r\n\r\n	# 指定哪个目录作为根目录, 用于文件的检索\r\n	root /var/www/html;\r\n\r\n	# 在上面指定的根目录下, 找到如下页面, 作为Nginx的默认主页\r\n	index index.html index.htm index.nginx-debian.html;\r\n\r\n	# 配置server的多域名, 域名可以通过以下方式: \r\n	# 1. 完整的域名, 如: www.example.com\r\n	# 2. 带*号开头的域名, 如: *.example.com\r\n	# 3. 带*号末尾的域名, 如: mail.*\r\n	# 4. 可匹配的正则表达式\r\n	server_name www.paulandcode.com;\r\n\r\n	location / {\r\n		# 原请求不存在时, 重定向到指定的URI, 并返回结果(此处设定为404)\r\n		try_files $uri $uri/ =404;\r\n	}\r\n\r\n	# 静态文件的处理\r\n	location ~ ^/(images|javascript|js|css|flash|media|static)/ {\r\n		# 设置被代理服务器的地址, 包含传输协议, 主机名称或IP地址加端口号, URI等要素. \r\n    	proxy_pass http://www.paulandcode.com:8080;\r\n    	\r\n    	# 自定义http header头, 用于发送给后端真实服务器. \r\n     	proxy_set_header Host $host:$server_port;\r\n     	\r\n     	# 指定哪个目录作为根目录, 用于文件的检索\r\n     	root /home/django/projects/blogs;\r\n    	\r\n    	# 启用Gzip压缩\r\n    	gzip on;\r\n     	# 对js、css、jpg、png、gif格式的文件启用gzip压缩功能\r\n     	gzip_types application/javascript text/css image/jpeg image/png image/gif;\r\n     	# 所压缩文件的最小值，小于这个的不会压缩\r\n     	gzip_min_length 1024;\r\n\r\n     	# 使用名为cache_one的对应缓存配置. \r\n     	proxy_cache cache_one;\r\n     	# 对httpcode为200, 206, 301, 302, 304的缓存10天. \r\n     	proxy_cache_valid 200 206 301 302 304 10d;\r\n     	# 定义缓存唯一key, 通过唯一key来进行hash存取. \r\n     	proxy_cache_key $uri\r\n    	# 过期30天, 静态文件不怎么更新, 过期可以设大一点, 如果频繁更新, 则可以设置得小一点. \r\n     	expires 30d;\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-13 06:21:59.851819', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0ed3f9cd5b174f9d9e9eeef983181740', 'Web打印插件Lodop', '<p>Web打印插件lodop官网: <a href=\"http://www.c-lodop.com/\" target=\"_blank\">http://www.c-lodop.com/</a></p>', '2018-07-19 07:52:39.577033', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0f9a0c46b4934e8785d99b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', '<p>1. Maven依赖(需要SpringBoot版本: 2.0.4.RELEASE)</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n	&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\r\n	&lt;artifactId&gt;fastjson&lt;/artifactId&gt;\r\n	&lt;version&gt;1.2.21&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>2.&nbsp;application.yml配置文件(需要直接放在src/main/resources下, 且只能有这一个配置文件)</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\"># 公共配置\r\nspring:\r\n profiles:\r\n# 激活哪一个环境的配置文件\r\n  active: dev\r\n\r\n---\r\n# 开发环境\r\nspring:\r\n profiles: dev\r\n schedule: \r\n    # 每隔一分钟执行一次定时任务\r\n    cron1: 0 0/1 * * * ?\r\n    # 每隔两小时执行一次定时任务\r\n    cron2: 0 0 */2 * * ?\r\n redis:\r\n  database: 0\r\n  host: 127.0.0.1\r\n  port: 6379\r\n  password: \r\n  # 默认缓存时间, 单位, 秒\r\n  default_cache_time: 100\r\n  short_cache_time: 300\r\n  long_cache_time: 1800\r\n  pool:\r\n   max-idle: 8\r\n   min-idle: 0\r\n   max-active: 8\r\n   max-wait: -1\r\n\r\n---\r\n# 生产环境\r\nspring:\r\n profiles: pro\r\n schedule: \r\n    # 每隔一分钟执行一次定时任务\r\n    cron1: 0 0/1 * * * ?\r\n    # 每隔两小时执行一次定时任务\r\n    cron2: 0 0 */2 * * ?\r\n redis:\r\n  database: 0\r\n  host: 127.0.0.1\r\n  port: 6379\r\n  password: \r\n  # 默认缓存时间, 单位, 秒\r\n  default_cache_time: 100\r\n  short_cache_time: 300\r\n  long_cache_time: 1800\r\n  pool:\r\n   max-idle: 8\r\n   min-idle: 0\r\n   max-active: 8\r\n   max-wait: -1</code></pre>\r\n\r\n<p>3. 配置类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode.config;\r\n\r\nimport java.nio.charset.Charset;\r\n\r\nimport org.springframework.data.redis.serializer.RedisSerializer;\r\nimport org.springframework.data.redis.serializer.SerializationException;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.serializer.SerializerFeature;\r\n\r\n/**\r\n * \r\n * @Description: 使用阿里巴巴的fastjson进行key和value的序列化 \r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年9月7日 下午9:43:51\r\n */\r\npublic class FastJsonRedisSerializer&lt;T&gt; implements RedisSerializer&lt;T&gt; {\r\n    public static final Charset DEFAULT_CHARSET = Charset.forName(\"UTF-8\");\r\n    private Class&lt;T&gt; clazz;\r\n\r\n    public FastJsonRedisSerializer(Class&lt;T&gt; clazz) {\r\n        super();\r\n        this.clazz = clazz;\r\n    }\r\n\r\n	@Override\r\n	public byte[] serialize(T t) throws SerializationException {\r\n		if (t == null)\r\n            return new byte[0];\r\n        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);\r\n	}\r\n\r\n	@Override\r\n	public T deserialize(byte[] bytes) throws SerializationException {\r\n		if (bytes == null || bytes.length &lt;= 0)\r\n            return null;\r\n        return JSON.parseObject(new String(bytes, DEFAULT_CHARSET), clazz);\r\n	}\r\n}</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode.config;\r\n\r\nimport java.time.Duration;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.cache.CacheManager;\r\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\r\nimport org.springframework.cache.annotation.EnableCaching;\r\nimport org.springframework.cache.interceptor.KeyGenerator;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.redis.cache.RedisCacheConfiguration;\r\nimport org.springframework.data.redis.cache.RedisCacheManager;\r\nimport org.springframework.data.redis.cache.RedisCacheWriter;\r\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\r\n\r\n/**\r\n * \r\n * @Description: Redis缓存配置 \r\n *	缓存注解: @Cacheable 与 @CachePut, 可以作用在类和方法上. (可以在类上统一指定缓存注解后, 在方法上自定义key)\r\n * 		@Cacheable: Spring在每次执行前都会检查Cache中是否存在相同Key的缓存元素, \r\n * 			如果存在就不再执行该方法, 而是直接从缓存中获取结果进行返回, 否则才会执行并将返回结果存入指定的缓存中. \r\n * 			若统一指定在类上, 则不可以在类注解上自定义key, 否则多个不同返回值类型的方法调用注解时, 会报错类型转换错误.  \r\n * 		@CachePut: 方法在执行前不会去检查缓存中是否存在之前执行过的结果, 而是每次都会执行该方法, \r\n * 			并将执行结果存入指定的缓存中. \r\n * 			若统一指定在类上, 则不建议在类注解上自定义key, 否则不同方法调用后, 会冲掉其他方法的缓存. \r\n *	条件化缓存: unless与condition, 用法如下: \r\n *		@CachePut(value = \"long_cache\", unless = \"#result.desc.contains(\'nocache\')\")\r\n *		unless: 只能阻止将对象放进缓存, 但是在这个方法调用的时候, 依然会去缓存中进行查找, \r\n *			如果找到了匹配的值, 就会返回找到的值. \r\n *		condition: 如果表达式计算结果为false, 那么在这个方法调用的过程中, 缓存是被禁用的. \r\n *			就是说, 不会去缓存进行查找, 同时返回值也不会放进缓存中. \r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年9月7日 下午8:47:38\r\n */\r\n@Configuration // 指定该类为配置类\r\n@EnableCaching // 启用缓存 \r\npublic class RedisCacheConfig extends CachingConfigurerSupport {\r\n	/** 默认时间缓存, 单位: 秒. **/\r\n	@Value(\"${spring.redis.default_cache_time}\")\r\n	private int DEFAULT_CACHE_TIME;\r\n	\r\n	/** 短时间缓存, 单位: 秒. **/\r\n	@Value(\"${spring.redis.short_cache_time}\")\r\n	private int SHORT_CACHE_TIME;\r\n	\r\n	/** 长时间缓存, 单位: 秒. **/\r\n	@Value(\"${spring.redis.long_cache_time}\")\r\n	private int LONG_CACHE_TIME;\r\n\r\n	/**\r\n	 * \r\n	 * @Description: 指定默认Key生成策略 , 生成后, key如: \r\n	 *  short_cache::com.paulandcode.service.TestService.executeSQL(\"sql\",\"params\")\r\n	 * 	\r\n	 *	也可以自定义Key, 如: @Cacheable(value = \"long_cache\", key = \"\'mykey\'\")\r\n	 *	也可以将方法参数或其属性当作Key, 如: @Cacheable(value = \"long_cache\", key = \"#param.id\"),\r\n	 *		param为方法参数名, id为参数param的一个属性\r\n	 *	若方法参数为数字, 需要转换为字符串, 如: @Cacheable(value = \"long_cache\", key = \"#id + \'\'\")\r\n	 *  @CachePut 与 @Cacheable 不同, @CachePut 还可以将返回值作为key, 如:\r\n	 *  	@CachePut(value = \"long_cache\", key = \"#result.id + \'\'\"), 这里的result就是方法的返回值\r\n	 *  target: 调用方法的对象\r\n	 * 	method: 所调用的方法\r\n	 * 	params: 方法的参数\r\n	 * @see org.springframework.cache.annotation.CachingConfigurerSupport#keyGenerator()\r\n	 */\r\n	@Override\r\n    public KeyGenerator keyGenerator() {\r\n        return (target, method, params) -&gt; {\r\n            StringBuilder stringBuilder = new StringBuilder();\r\n            stringBuilder.append(target.getClass().getCanonicalName());\r\n            stringBuilder.append(\":\");\r\n            stringBuilder.append(method.getName());\r\n            stringBuilder.append(\":\");\r\n            for (int i = 0; i &lt; params.length; i++) {\r\n            	stringBuilder.append(params[i]);\r\n            	if (i &lt; params.length - 1) {\r\n            		stringBuilder.append(\",\");\r\n            	}\r\n            }\r\n            return stringBuilder.toString();\r\n        };\r\n    }\r\n	\r\n    /**\r\n     * \r\n     * @Description: 申明缓存管理器, 会创建一个切面(Aspect)并触发Spring缓存注解的切点(Pointcut)\r\n     * @param redisConnectionFactory\r\n     * @return\r\n     */\r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {\r\n        return new RedisCacheManager(\r\n                RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory),\r\n                this.getRedisCacheConfigurationWithTtl(DEFAULT_CACHE_TIME), // 默认缓存时间策略\r\n                this.getRedisCacheConfigurationMap()); // 指定缓存时间策略\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @description: 不适合添加缓存注解的地方, 可以手动使用RedisTemplate来对Redis数据库进行增删改查\r\n     * 		注意: 使用RedisTemplate的地方, 其配置与RedisCacheConfiguration中配置的不一样, 所以, \r\n     * 			此处需要设置RedisTemplate自己的Key与Value的序列化. 同时, 还需设置RedisTemplate自己的\r\n     * 			缓存过期时间. 然而, RedisTemplate不支持批量设置缓存过期时间, 需要针对每个Key分别设置. 例如: \r\n     * 				redisTemplate.expire(\"yourKey\", 10, TimeUnit.SECONDS);\r\n     * 					设置了Key为\"yourKey\"的缓存过期时间为: 10秒. \r\n     *			若不设置过期时间, 则缓存永不过期.\r\n     * @param redisConnectionFactory\r\n     * @return\r\n     */\r\n    @Bean\r\n    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory){\r\n        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();\r\n        template.setKeySerializer(new FastJsonRedisSerializer&lt;&gt;(String.class));\r\n        template.setValueSerializer(new FastJsonRedisSerializer&lt;&gt;(Object.class));\r\n        template.setConnectionFactory(redisConnectionFactory);\r\n        return template;\r\n    }\r\n	\r\n	/**\r\n	 * \r\n	 * @Description: 设置缓存时间, 设置key与value的序列化. \r\n	 * 		可设置禁止缓存null: redisCacheConfiguration.disableCachingNullValues(), 若有null缓存, 则会报错. \r\n	 * @param seconds 缓存时间, 单位: 秒. \r\n	 * @return\r\n	 */\r\n	private RedisCacheConfiguration getRedisCacheConfigurationWithTtl(Integer seconds) {\r\n        return RedisCacheConfiguration.defaultCacheConfig()\r\n        		.serializeKeysWith(RedisSerializationContext.SerializationPair\r\n        				.fromSerializer(new FastJsonRedisSerializer&lt;&gt;(String.class)))\r\n        		.serializeValuesWith(RedisSerializationContext.SerializationPair\r\n        				.fromSerializer(new FastJsonRedisSerializer&lt;&gt;(Object.class)))\r\n        		.entryTtl(Duration.ofSeconds(seconds));\r\n    }\r\n	\r\n	/**\r\n	 * \r\n	 * @Description: 可以自定义缓存时间, 使用如下: \r\n	 * 		@Cacheable(value = \"short_cache\") // 缓存时间: SHORT_CACHE_TIME\r\n     *		@Cacheable(value = \"long_cache\") // 缓存时间: LONG_CACHE_TIME\r\n     *		@Cacheable(value = \"others\") // 默认缓存时间: DEFAULT_CACHE_TIME\r\n     *		还可以根据需要再增加缓存时间策略\r\n	 * @return\r\n	 */\r\n    private Map&lt;String, RedisCacheConfiguration&gt; getRedisCacheConfigurationMap() {\r\n        Map&lt;String, RedisCacheConfiguration&gt; redisCacheConfigurationMap = new HashMap&lt;&gt;();\r\n        redisCacheConfigurationMap.put(\"short_cache\", this.getRedisCacheConfigurationWithTtl(SHORT_CACHE_TIME));\r\n        redisCacheConfigurationMap.put(\"long_cache\", this.getRedisCacheConfigurationWithTtl(LONG_CACHE_TIME));\r\n        return redisCacheConfigurationMap;\r\n    }\r\n}</code></pre>\r\n\r\n<p>4. 使用示例</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">@Cacheable(value = \"short_cache\", key = \"#param2\")\r\npublic String test(String param1, String param2) {\r\n	System.out.println(\"test\");\r\n	return \"test\";\r\n}</code></pre>\r\n\r\n<p>5. 实现定时刷新缓存</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 创建自定义注解</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode.annotation;\r\n\r\nimport java.lang.annotation.Documented;\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n/**\r\n * \r\n * @description: 添加此注解后可以启动自动刷新缓存, 该注解不能单独使用, \r\n * 	需要配合 @Cacheable 或 @CachePut 一起使用.  \r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年9月10日 下午4:57:43\r\n */\r\n@Target({ ElementType.METHOD, ElementType.TYPE })\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\npublic @interface AutoFlash {\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2) 注解切面</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode.annotation;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.util.Arrays;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.aspectj.lang.JoinPoint;\r\nimport org.aspectj.lang.annotation.After;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.aspectj.lang.annotation.Pointcut;\r\nimport org.aspectj.lang.reflect.MethodSignature;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.cache.annotation.Cacheable;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport com.paulandcode.entity.Data;\r\n\r\n/**\r\n * \r\n * @description: 将要定时刷新缓存的数据的相关信息存入缓存中, \r\n * 	方便定时任务对Redis缓存的数据进行更新 \r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年9月10日 下午4:58:10\r\n */\r\n@Aspect\r\n@Component\r\npublic class AutoFlashAspect {\r\n	/** 默认时间缓存, 单位: 秒. **/\r\n	@Value(\"${spring.redis.long_cache_time}\")\r\n	private int LONG_CACHE_TIME;\r\n	\r\n	private static RedisTemplate&lt;String, Object&gt; redisTemplate;\r\n\r\n	/**\r\n	 * \r\n	 * @description: 静态方法中注入Been \r\n	 * @param redisTemplate\r\n	 */\r\n	@Autowired\r\n	public void setRedisTemplate(RedisTemplate&lt;String, Object&gt; redisTemplate) {\r\n		AutoFlashAspect.redisTemplate = redisTemplate;\r\n	}\r\n	\r\n	/**\r\n	 * \r\n	 * @description: 切入点\r\n	 */\r\n	@Pointcut(\"@annotation(com.paulandcode.annotation.AutoFlash)\")\r\n	public void pointCut() {\r\n\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * @description: 方法执行后, 将方法相关信息存起来, 方便定时任务利用反射执行方法. \r\n	 * @param joinPoint 切入点\r\n	 */\r\n	@After(\"pointCut()\")\r\n	public void after(JoinPoint joinPoint) {\r\n		MethodSignature sign = (MethodSignature) joinPoint.getSignature();\r\n		Object[] params = joinPoint.getArgs();\r\n		Method method = sign.getMethod();\r\n		String className = method.getDeclaringClass().getName();\r\n		String methodName = method.getName();\r\n		String paramsString = \"\";\r\n		for (int i = 0; i &lt; params.length; i++) {\r\n			paramsString += params[i] + \",\";\r\n		}\r\n		Cacheable cacheable = method.getAnnotation(Cacheable.class);\r\n		String key = cacheable.value()[0] + \"::\" + className + \":\" + methodName + \":\"\r\n				+ paramsString.substring(0, paramsString.length() - 1);\r\n		Data data = new Data(key, className, methodName, \r\n				Arrays.asList(method.getParameterTypes()), Arrays.asList(params));\r\n		// 将要定时刷新缓存的数据的相关信息存入缓存\r\n		redisTemplate.boundSetOps(\"dataInfo\").add(data);\r\n		// 设置过期时间, 可以不设置, 默认为不过期\r\n		redisTemplate.expire(key, LONG_CACHE_TIME, TimeUnit.SECONDS);\r\n	}\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3) 创建实体, 用于存放需要放入Redis缓存的数据的信息</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode.entity;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * \r\n * @description: 存放需要放入Redis缓存的数据的信息, 根据这些信息, 再通过Java反射获取数据.\r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年9月8日 下午2:45:51\r\n */\r\npublic class Data implements Serializable {\r\n	private static final long serialVersionUID = 1L;\r\n\r\n	/** Redis缓存数据时的Key **/\r\n	private String key;\r\n\r\n	/** 所要执行方法所在类的全名称, 包括包名和类名 **/\r\n	private String className;\r\n\r\n	/** 所要执行方法的方法名 **/\r\n	private String methodName;\r\n\r\n	/** 所要执行方法的参数类型列表, 不能用数组, 否则FastJSON解析时会报错 **/\r\n	private List&lt;Class&lt;?&gt;&gt; paramTypes;\r\n\r\n	/** 所要执行方法的参数值列表, 不能用数组, 否则FastJSON解析时会报错 **/\r\n	private List&lt;Object&gt; params;\r\n\r\n	public Data() {\r\n		super();\r\n	}\r\n\r\n	public Data(String key, String className, String methodName, List&lt;Class&lt;?&gt;&gt; paramTypes, List&lt;Object&gt; params) {\r\n		super();\r\n		this.key = key;\r\n		this.className = className;\r\n		this.methodName = methodName;\r\n		this.paramTypes = paramTypes;\r\n		this.params = params;\r\n	}\r\n\r\n	public String getKey() {\r\n		return key;\r\n	}\r\n\r\n	public void setKey(String key) {\r\n		this.key = key;\r\n	}\r\n\r\n	public String getClassName() {\r\n		return className;\r\n	}\r\n\r\n	public void setClassName(String className) {\r\n		this.className = className;\r\n	}\r\n\r\n	public String getMethodName() {\r\n		return methodName;\r\n	}\r\n\r\n	public void setMethodName(String methodName) {\r\n		this.methodName = methodName;\r\n	}\r\n\r\n	public List&lt;Class&lt;?&gt;&gt; getParamTypes() {\r\n		return paramTypes;\r\n	}\r\n\r\n	public void setParamTypes(List&lt;Class&lt;?&gt;&gt; paramTypes) {\r\n		this.paramTypes = paramTypes;\r\n	}\r\n\r\n	public List&lt;Object&gt; getParams() {\r\n		return params;\r\n	}\r\n\r\n	public void setParams(List&lt;Object&gt; params) {\r\n		this.params = params;\r\n	}\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4) 定时任务</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode.schedule;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.scheduling.annotation.EnableScheduling;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport com.paulandcode.entity.Data;\r\n\r\n/**\r\n * \r\n * @description: 定时任务\r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年9月8日 下午3:35:13\r\n */\r\n@Configuration // 声明类为系统配置类\r\n@EnableScheduling // 开启调度任务\r\n@Component\r\npublic class ScheduleJobs {\r\n	/** 默认时间缓存, 单位: 秒. **/\r\n	@Value(\"${spring.redis.short_cache_time}\")\r\n	private int SHORT_CACHE_TIME;\r\n\r\n	@Autowired\r\n	public RedisTemplate&lt;String, Object&gt; redisTemplate;\r\n\r\n	/**\r\n	 * \r\n	 * @description: 定时更新数据库数据\r\n	 * \r\n	 */\r\n	@Scheduled(cron = \"${spring.schedule.cron2}\")\r\n	public void job() {\r\n		Set&lt;Object&gt; set = redisTemplate.boundSetOps(\"dataInfo\").members();\r\n		Iterator&lt;Object&gt; it = set.iterator();\r\n		while (it.hasNext()) {\r\n			Data data = (Data) it.next();\r\n			String key = data.getKey();\r\n			String className = data.getClassName();\r\n			String methodName = data.getMethodName();\r\n			List&lt;Class&lt;?&gt;&gt; paramTypes = data.getParamTypes();\r\n			List&lt;Object&gt; params = data.getParams();\r\n			Object value = null;\r\n			// 利用Java反射执行方法, 获得数据\r\n			try {\r\n				Class&lt;?&gt; clazz = Class.forName(className);\r\n				Object object = clazz.newInstance();\r\n				// 第一个参数写的是方法名, 第二个\\第三个\\...写的是方法参数列表中参数的类型\r\n				Method method = clazz.getMethod(methodName, paramTypes.toArray(new Class&lt;?&gt;[0]));\r\n				// invoke执行该方法, 并携带参数值\r\n				value = method.invoke(object, params.toArray(new Object[0]));\r\n			} catch (Exception e) {\r\n				e.printStackTrace();\r\n			}\r\n			redisTemplate.boundValueOps(key).set(value);\r\n			// 设置过期时间, 可以不设置, 默认为不过期\r\n			redisTemplate.expire(key, SHORT_CACHE_TIME, TimeUnit.SECONDS);\r\n		}\r\n	}\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(5) 使用示例</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">@Cacheable(value = \"a\")\r\n@AutoFlash \r\npublic String test(String a, String b) {\r\n	System.out.println(\"a\");\r\n	return \"result666\";\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-09-10 09:44:34.688563', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('0fb8071f375645e0bb6ec344cdcc03d9', 'Eclipse安装Subversion', '<p>1. Help --&gt; Install New Software... 添加如下地址</p>\r\n\r\n<pre>\r\n<code class=\"language-basic\">http://subclipse.tigris.org/update_1.8.x</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-09-27 13:39:32.754175', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1269beb5e2da47d284d3a27f42e14557', 'MySQL无法连接', '<p>1. 如果是阿里云, 去阿里后台安全组的入方向, 开启3306端口.&nbsp;</p>\r\n\r\n<p>2. 不行的话, 查看防火墙, 打开3306端口.&nbsp;</p>\r\n\r\n<p>3. 还不行的话, 在mysql.user表中, root用户的Host字段默认是Localhost, 这是无法支持远程访问的. 虚拟机里安装, 本机MySQL访问一样属于远程访问. 因此需要将Host字段的值进行修改. 修改语句:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">update mysql.user set Host=\'%\' where user=\'root\';</code></pre>\r\n\r\n<p>4. 还不行的话, 可能是MySQL与IP绑定了</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">netstat -apn|grep 3306\r\ntcp6  0  0 127.0.0.1:3306  :::*  LISTEN    13524/mysqld</code></pre>\r\n\r\n<p>上面就是表示MySQL与127.0.0.1绑定了, 检查my.cnf的等配置文件, 把bind-address=addr这一行后的ip改成0.0.0.0(所有ip)或者想要的ip</p>\r\n\r\n<p>5. 最后, 重启MySQL</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/etc/init.d/mysql restart</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-09-11 10:08:35.867065', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('129c0172edaf47a392de9c7ee014a1ff', 'Oracle动态语句', '<pre>\r\n<code class=\"language-sql\">BEGIN \r\n	EXECUTE IMMEDIATE \'select count(username) from sys_user;\';\r\nEND;</code></pre>\r\n\r\n<p>Oracle 执行字符串, 注意分号位置, 字符串中的每一句sql后面都要加分号</p>', '2018-10-24 00:50:13.297337', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('12ea83e27c5d43d180b986d4ec534604', 'SQL查询工具类', '<p>1. SQL过滤</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import org.apache.commons.lang.StringUtils;\r\n\r\n/**\r\n * SQL过滤\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:29:19\r\n */\r\npublic class SQLFilter {\r\n	/**\r\n	 * \r\n	 * SQL注入过滤.\r\n	 * @param str 待验证的字符串\r\n	 * @return 过滤后字符串\r\n	 */\r\n    public static String sqlInject(String str){\r\n        if(StringUtils.isBlank(str)){\r\n            return str;\r\n        }\r\n        //去掉\'|\"|;|\\字符\r\n        str = StringUtils.replace(str, \"\'\", \"\");\r\n        str = StringUtils.replace(str, \"\\\"\", \"\");\r\n        str = StringUtils.replace(str, \";\", \"\");\r\n        str = StringUtils.replace(str, \"\\\\\", \"\");\r\n\r\n        //转换成小写\r\n        str = str.toLowerCase();\r\n\r\n        //非法字符\r\n        String[] keywords = {\"master\", \"truncate\", \"insert\", \"select\", \"delete\", \"update\", \"declare\", \"alert\", \"drop\"};\r\n\r\n        //判断是否包含非法字符\r\n        for(String keyword : keywords){\r\n            if(str.contains(keyword)){\r\n                throw new RuntimeException(\"包含非法字符\");\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n}</code></pre>\r\n\r\n<p>2. SQL查询</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import com.paulandcode.utils.SQLFilter;\r\n\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * SQL查询.\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:29:19\r\n */\r\npublic class Q extends LinkedHashMap&lt;String, Object&gt; {\r\n	private static final long serialVersionUID = 1L;\r\n	//当前页码\r\n    private int page;\r\n    //每页条数\r\n    private int limit;\r\n\r\n    /**\r\n     * \r\n     * 构造函数.\r\n     * @param params\r\n     */\r\n    public Q(Map&lt;String, Object&gt; params){\r\n        this.putAll(params);\r\n        String sidx = \"\";\r\n        String order = \"\";\r\n        if(params.get(\"page\")!=null) {\r\n        	this.page = Integer.parseInt(params.get(\"page\").toString());\r\n        }\r\n        if(params.get(\"limit\")!=null) {\r\n        	this.limit = Integer.parseInt(params.get(\"limit\").toString());\r\n        }\r\n        if(params.get(\"sidx\")!=null) {\r\n        	sidx = params.get(\"sidx\").toString();\r\n        }\r\n        if(params.get(\"order\")!=null) {\r\n        	order = params.get(\"order\").toString();\r\n        }\r\n        //分页参数\r\n        this.put(\"offset\", (page - 1) * limit);\r\n        this.put(\"page\", page);\r\n        this.put(\"limit\", limit);\r\n        if(params.get(\"limit\")==null) {\r\n        	this.put(\"limit\", null);\r\n        }\r\n\r\n        //防止SQL注入(因为sidx、order是通过拼接SQL实现排序的，会有SQL注入风险)\r\n        // sidx为排序字段, 以英文逗号隔开\r\n        this.put(\"sidx\", SQLFilter.sqlInject(sidx));\r\n        // order为排序方式, DESC或ASC\r\n        this.put(\"order\", SQLFilter.sqlInject(order));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * 构造函数.\r\n     */\r\n    public Q() {\r\n        this.put(\"page\", page);\r\n        this.put(\"limit\", null);\r\n        this.put(\"sidx\", \"\");\r\n        this.put(\"order\", \"\");\r\n    }\r\n\r\n    public int getPage() {\r\n        return page;\r\n    }\r\n\r\n    public void setPage(int page) {\r\n        this.page = page;\r\n    }\r\n\r\n    public int getLimit() {\r\n        return limit;\r\n    }\r\n\r\n    public void setLimit(int limit) {\r\n        this.limit = limit;\r\n    }\r\n}</code></pre>\r\n\r\n<p>3. mapper文件中查询列表可以这么写</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;select id=\"queryList\" parameterType=\"map\" resultType=\"com.paulandcode.entity.Test\"&gt;\r\n	SELECT\r\n		id,\r\n		name\r\n	FROM test\r\n	&lt;choose&gt;\r\n	&lt;when test=\"sidx.trim() != \'\' and sidx.trim() != \'\'\"&gt;\r\n		ORDER BY ${sidx} ${order}\r\n	&lt;/when&gt;\r\n	&lt;otherwise&gt;\r\n		ORDER BY id DESC\r\n	&lt;/otherwise&gt;\r\n	&lt;/choose&gt;\r\n	&lt;if test=\"offset != null and limit != null\"&gt;\r\n		LIMIT #{offset}, #{limit}\r\n	&lt;/if&gt;\r\n&lt;/select&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 02:34:49.003450', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1386d3942fa94283a049e7d8fe23ead4', '为什么一般使用Redis做缓存, 而不使用MySQL或Oracle自带的缓存', '<p>1. MySQL和Oracle自带的缓存更消耗资源, 而且读写速度更慢.</p>\r\n\r\n<p>2.&nbsp;MySQL和Oracle自带的缓存需要SQL语句完全匹配, 且表数据不能有变化, 这样导致缓存命中率降低.</p>', '2019-05-29 11:32:21.389747', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('183c1b61f6f145a49040822496643531', '@Controller和@RestController的区别', '<p>1. @RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用, 使用@RestController, 可以在每个方法前面省略@ResponseBody, 自动返回JSON串.</p>\r\n\r\n<p>2. 如果使用@RestController注解Controller, 则Controller中的方法无法返回JSP页面, 或者HTML, 配置的视图解析器InternalResourceViewResolver不起作用, 返回的内容就是return里的内容.&nbsp;</p>', '2018-08-20 05:07:45.368708', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('18fdaadcd9ba4a8b845869823c474f59', 'Nginx简介', '<ol>\r\n	<li>Nginx(发音同engine x), 是一个异步框架的Web服务器, 也可用作反向代理, 负载均衡器和HTTP缓存等. 国内使用Nginx的有: 百度, 淘宝, 腾讯, 京东, 新浪, 网易等.&nbsp;</li>\r\n	<li>优点:&nbsp;\r\n	<ul>\r\n		<li>高度模块化的设计</li>\r\n		<li>模块编写简单, 配置文件简洁</li>\r\n		<li>占用内存少, 稳定性高, 高并发下也能保持低资源消耗高性能</li>\r\n	</ul>\r\n	</li>\r\n	<li>缺点:\r\n	<ul>\r\n		<li>灵活性低, 新增第三方模块必须与Nginx同时编译</li>\r\n	</ul>\r\n	</li>\r\n	<li>相关网站:&nbsp;\r\n	<ul>\r\n		<li>官网:&nbsp;<a href=\"https://nginx.org\" target=\"_blank\">https://nginx.org</a></li>\r\n		<li>菜鸟教程:&nbsp;<a href=\"http://www.runoob.com/linux/nginx-install-setup.html\" target=\"_blank\">http://www.runoob.com/linux/nginx-install-setup.html</a></li>\r\n	</ul>\r\n	</li>\r\n</ol>', '2018-07-14 23:18:09.673847', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('19a99046f5654a8cb90af6213d782378', 'Quartz的Cron表达式', '<p>1. 表达式由7部分组成(可省略第7部分), 各个部分之间用空格隔开, 说明如下:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:1000px\">\r\n	<tbody>\r\n		<tr>\r\n			<td>说明</td>\r\n			<td>允许的值</td>\r\n			<td>允许的特殊字符</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Seconds</strong>&nbsp;(秒)</td>\r\n			<td>0-59</td>\r\n			<td>, - * /</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Minutes(</strong>分)</td>\r\n			<td>0-59</td>\r\n			<td>, - * /</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Hours(</strong>时)</td>\r\n			<td>0-23</td>\r\n			<td>, - * /</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Day-of-Month(日</strong>)</td>\r\n			<td>1-31</td>\r\n			<td>, - * / ? L W</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Month-of-Year(</strong>月)</td>\r\n			<td>1-12或者JAN-DEC</td>\r\n			<td>, - * /</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Day-of-Week(</strong><strong>周几</strong><strong>)</strong></td>\r\n			<td>1-7或者SUN-SAT, 1代表周日</td>\r\n			<td>, - * / ? L #</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>Year(年)</strong>(可省略)</td>\r\n			<td>不填或者1970-2099</td>\r\n			<td>, - * /</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>2. 特殊字符说明及示例</p>\r\n\r\n<p style=\"margin-left:40px\">(1) &quot;,&quot;字符:&nbsp;指定多个值, 例:&nbsp;0 26,29,33 * * * ? 表示在每小时的第26,29,33分钟执行.</p>\r\n\r\n<p style=\"margin-left:40px\">(2) &quot;-&quot;字符: 指定范围值, 例: 3-5&nbsp;* * * * ? 表示在每个分钟的第3到第5秒钟执行, 包括第3秒钟, 第4秒钟和第5秒钟.</p>\r\n\r\n<p style=\"margin-left:40px\">(3) &quot;*&quot;字符: 代表整个父时间段(即每个该时间段).&nbsp;例: 10 20 23 3&nbsp;* ?表示每月3号23:20:10执行, 这里的*代表整年, 即一年中的每月, 然后3和?共同表示每月3号. 每年, 每日, 每时, 每分, 每秒都可以用*字符, 但是周有些特殊, corn表达式中月和周都算作年的子时间段, 表示每周也是在<strong>Month-of-Year这里用*, 例如:</strong>&nbsp;0&nbsp;0&nbsp;12&nbsp;?&nbsp;*&nbsp;2&nbsp;表示每周三下午12:00:00执行, 这里的*可以理解为每周, 因为?和2共同表示每个周三. <strong>Year省略的时候, 其实就是默认*字符, 代表每年.</strong></p>\r\n\r\n<p style=\"margin-left:40px\">(4) &quot;?&quot;字符: <strong>Day-of-Month中</strong>表示月的某一天,&nbsp;<strong>Day-of-Week中表示周的某一天, 不确定具体是哪一天. 例:&nbsp;</strong>0&nbsp;0&nbsp;12&nbsp;?&nbsp;*&nbsp;2&nbsp;中的?表示不确定是月的哪一天, 但是其中的2表示确定了是周的周三. 又如: 10 20 23 3&nbsp;* ?表示每月的3号的23:20:10执行, 其中的?表示不确定是周的周几, 但是其中的3表示确定了是月的3号. 可以看出来, 周的周几和月的几号无法同时指定, 因为每月的具体几号并不是固定的周几, 如每月的1号并不固定就是周一, 也不固定是周二. 还有第三种情况就是: 不确定是月的几号也不确定是周的周几(即每天), 这时候<strong>Day-of-Month和Day-of-Week要用*字符和?字符的组合.&nbsp;</strong>如:&nbsp;0 0 1 * * ?(或0 0 1 ?&nbsp;* *)表示每天凌晨1点执行. Day-of-Month和Day-of-Week不可同时为 *, 否则会报错<strong>.</strong></p>\r\n\r\n<p style=\"margin-left:40px\">(5) &quot;/&quot;字符: 指定一个值的增幅,&nbsp;n/m表示从n开始, 每次增加m. 例: 3/5 * * * * ?表示3秒后每5秒执行一次</p>\r\n\r\n<p style=\"margin-left:40px\">(6) &quot;L&quot;字符:&nbsp;<strong>Day-of-Month中</strong>表示月的最后一天,&nbsp;<strong>Day-of-Week</strong>中表示月的最后一个周几.&nbsp;例:&nbsp;0 0 23 L * ?表示每月最后一天23点执行,&nbsp;0&nbsp;15&nbsp;10&nbsp;?&nbsp;*&nbsp;6L表示每月的最后一个星期五上午10:15:00执行</p>\r\n\r\n<p style=\"margin-left:40px\">(7) &quot;W&quot;字符:&nbsp;离给定日期最近的一个工作日(周一到周五). 例:&nbsp;0 0 0 8W * ? 表示每月离8号最近的一个工作日的凌晨零点, 若8号是工作日, 则表示8号, 若8号是周六, 则表示7号, 若8号是周日, 则表示9号</p>\r\n\r\n<p style=\"margin-left:40px\">(8) &quot;#&quot;字符:&nbsp;表示该月第几个周几, 例:&nbsp;0&nbsp;15&nbsp;10&nbsp;?&nbsp;*&nbsp;6#3表示每月的第三个星期五上午10:15:00执行</p>\r\n\r\n<p>3 .&nbsp;在线Cron表达式生成器网址(个别不常用表达式生成有误, 需注意):&nbsp;<a href=\"http://cron.qqe2.com/\" target=\"_blank\">http://cron.qqe2.com/</a></p>', '2018-10-21 02:41:59.024349', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1ab74d32dd8b4142b15ffe6d37ffdf7e', '阿里云的Linux报错: sudo: unable to resolve host [hostname]', '<p>1. 执行sudo vim /etc/hosts编辑原文件如下</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">127.0.0.1       localhost\r\n\r\n# The following lines are desirable for IPv6 capable hosts\r\n::1     localhost ip6-localhost ip6-loopback\r\nff02::1 ip6-allnodes\r\nff02::2 ip6-allrouters</code></pre>\r\n\r\n<p>在第一行下面添加如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">127.0.0.1   [hostname]</code></pre>\r\n\r\n<p>2. 如果觉得主机名太长, 可以在/etc/hostname里面修改, 重启后生效.&nbsp;</p>', '2018-09-12 13:13:35.266799', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1b91c23fd0cf48f28a49ad3e77a1f834', '日期处理', '<pre>\r\n<code class=\"language-java\">import java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\n/**\r\n * 日期处理\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年5月18日 下午13:27:13\r\n */\r\npublic class DateUtils {\r\n	public final static String DATE_PATTERN = \"yyyy-MM-dd\";\r\n	public final static String DATE_TIME_PATTERN = \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n	/**\r\n	 * \r\n	 * 默认按照\"yyyy-MM-dd\"格式化日期.\r\n	 * @param date\r\n	 * @return\r\n	 */\r\n	public static String format(Date date) {\r\n		return format(date, DATE_PATTERN);\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 按照指定的日期格式来格式化日期.\r\n	 * @param date\r\n	 * @param pattern 日期格式\r\n	 * @return\r\n	 */\r\n	public static String format(Date date, String pattern) {\r\n		if (date != null) {\r\n			SimpleDateFormat df = new SimpleDateFormat(pattern);\r\n			return df.format(date);\r\n		}\r\n		return null;\r\n	}\r\n\r\n	/**\r\n	 * 返回给定日期所在月的所有日期集合\r\n	 * \r\n	 * @param date\r\n	 * @return\r\n	 */\r\n	public static List&lt;Date&gt; getAllDatesOfMonth(Date date) {\r\n		List&lt;Date&gt; list = new ArrayList&lt;Date&gt;();\r\n		Calendar cal = Calendar.getInstance();\r\n		cal.setTime(date);\r\n		cal.set(Calendar.DATE, 1);\r\n		int month = cal.get(Calendar.MONTH);\r\n		while (cal.get(Calendar.MONTH) == month) {\r\n			list.add(cal.getTime());\r\n			cal.add(Calendar.DATE, 1);\r\n		}\r\n		return list;\r\n	}\r\n\r\n	/**\r\n	 * 判断两个日期是否是同一天\r\n	 * \r\n	 * @param date1\r\n	 * @param date2\r\n	 * @return\r\n	 */\r\n	public static boolean isSameDate(Date date1, Date date2) {\r\n		Calendar cal1 = Calendar.getInstance();\r\n		cal1.setTime(date1);\r\n		Calendar cal2 = Calendar.getInstance();\r\n		cal2.setTime(date2);\r\n		boolean isSameYear = cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR);\r\n		boolean isSameMonth = isSameYear &amp;&amp; cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH);\r\n		boolean isSameDate = isSameMonth &amp;&amp; cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH);\r\n		return isSameDate;\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 计算两个日期之间相差多少天\r\n	 * \r\n	 * @param date1\r\n	 * @param date2\r\n	 * @return\r\n	 * @throws ParseException\r\n	 */\r\n	public static int getDateSpace(Date date1, Date date2) {\r\n		Calendar calst = Calendar.getInstance();\r\n		Calendar caled = Calendar.getInstance();\r\n		calst.setTime(date1);\r\n		caled.setTime(date2);\r\n\r\n		// 设置时间为0时\r\n		calst.set(Calendar.HOUR_OF_DAY, 0);\r\n		calst.set(Calendar.MINUTE, 0);\r\n		calst.set(Calendar.SECOND, 0);\r\n		caled.set(Calendar.HOUR_OF_DAY, 0);\r\n		caled.set(Calendar.MINUTE, 0);\r\n		caled.set(Calendar.SECOND, 0);\r\n		// 得到两个日期相差的天数\r\n		return ((int) (caled.getTime().getTime() / 1000) - (int) (calst.getTime().getTime() / 1000)) / 3600 / 24;\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 01:31:37.428613', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1c6ba033f8f84e908f85da43df21366e', '获得UUID', '<pre>\r\n<code class=\"language-java\">import java.util.UUID;\r\n\r\n/**\r\n * 获得UUID\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午3:00:24\r\n */\r\npublic class IDUtils {\r\n	/**\r\n	 * UUID\r\n	 * @return\r\n	 */\r\n	public static String getId() {\r\n		String id = UUID.randomUUID().toString();\r\n		id = id.replace(\"-\", \"\");\r\n		return id;\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 07:02:53.120398', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1d03a20c9da14631abc736ea11c145a9', 'List乱序与按照汉字拼音排序', '<pre>\r\n<code class=\"language-java\">import java.text.Collator;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\n/**\r\n * List乱序与按照汉字拼音排序\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午3:10:55\r\n */\r\npublic class ListUtils {\r\n	/**\r\n	 * List乱序\r\n	 * @param sourceList\r\n	 * @return\r\n	 */\r\n	public static &lt;V&gt; List&lt;V&gt; randomList(List&lt;V&gt; sourceList) {  \r\n	    if (sourceList == null || sourceList.size() == 0) {  \r\n	        return sourceList;  \r\n	    }  \r\n	    List&lt;V&gt; random = new ArrayList&lt;V&gt;(sourceList.size());  \r\n	    do {  \r\n	        int index = Math.abs(new Random().nextInt(sourceList.size()));  \r\n	        random.add(sourceList.remove(index));  \r\n	    } while (sourceList.size() &gt; 0);  \r\n	    return random;  \r\n	}\r\n	\r\n	/**\r\n	 * List按照汉字拼音排序, 根据需要重写V的toString()方法\r\n	 * @param sourceList\r\n	 * @return\r\n	 */\r\n	public static &lt;V&gt; List&lt;V&gt; sortList(List&lt;V&gt; sourceList) {  \r\n	    if (sourceList == null || sourceList.size() == 0) {  \r\n	        return sourceList;  \r\n	    }  \r\n	    List&lt;V&gt; sort = new ArrayList&lt;V&gt;(sourceList.size());\r\n	    sort.addAll(sourceList);\r\n	    Collections.sort(sort, new Comparator&lt;V&gt;(){\r\n	    	@Override\r\n            public int compare(V v0, V v1) {\r\n            	List&lt;String&gt; list = new ArrayList&lt;String&gt;(2);\r\n            	list.add(v0.toString());\r\n            	list.add(v1.toString());\r\n            	Collections.sort(list, Collator.getInstance(java.util.Locale.CHINA));\r\n            	return list.indexOf(v0.toString()) == 0 ? -1 : 1;\r\n            }\r\n        });\r\n	    return sort;  \r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 08:55:30.821795', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1fbf5eb847314a8bafaf581beaf90b64', 'Quartz定时器框架和Java自带Timer定时器区别', '<p><strong>1. Quartz定时任务在程序报错后能不断执行.&nbsp;</strong></p>\r\n\r\n<p><strong>2. Timer定时任务中, 程序一旦报错, 定时任务即不再执行.&nbsp;</strong></p>', '2018-09-14 02:42:09.129690', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('1fed2049afb8416aba3f3e7633d8e938', 'CSS设置字体时乱码', '<p>&nbsp;</p>\r\n\r\n<p>解决设置字体乱码, 可将字体写成英文名称</p>\r\n\r\n<table>\r\n	<thead>\r\n		<tr>\r\n			<th>中文名</th>\r\n			<th>英文名</th>\r\n			<th>Unicode</th>\r\n			<th>Unicode 2</th>\r\n		</tr>\r\n		<tr>\r\n			<th colspan=\"4\">\r\n			<p>&nbsp;</p>\r\n\r\n			<p>Mac OS</p>\r\n			</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td>华文细黑</td>\r\n			<td>STHeiti Light [STXihei]</td>\r\n			<td>\\534E\\6587\\7EC6\\9ED1</td>\r\n			<td>华文细黑</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文黑体</td>\r\n			<td>STHeiti</td>\r\n			<td>\\534E\\6587\\9ED1\\4F53</td>\r\n			<td>华文黑体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文楷体</td>\r\n			<td>STKaiti</td>\r\n			<td>\\534E\\6587\\6977\\4F53</td>\r\n			<td>华文楷体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文宋体</td>\r\n			<td>STSong</td>\r\n			<td>\\534E\\6587\\5B8B\\4F53</td>\r\n			<td>华文宋体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文仿宋</td>\r\n			<td>STFangsong</td>\r\n			<td>\\534E\\6587\\4EFF\\5B8B</td>\r\n			<td>华文仿宋</td>\r\n		</tr>\r\n		<tr>\r\n			<td>丽黑 Pro</td>\r\n			<td>LiHei Pro Medium</td>\r\n			<td>\\4E3D\\9ED1 Pro</td>\r\n			<td>丽黑 Pro</td>\r\n		</tr>\r\n		<tr>\r\n			<td>丽宋 Pro</td>\r\n			<td>LiSong Pro Light</td>\r\n			<td>\\4E3D\\5B8B Pro</td>\r\n			<td>丽宋 Pro</td>\r\n		</tr>\r\n		<tr>\r\n			<td>标楷体</td>\r\n			<td>BiauKai</td>\r\n			<td>\\6807\\6977\\4F53</td>\r\n			<td>标楷体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>苹果丽中黑</td>\r\n			<td>Apple LiGothic Medium</td>\r\n			<td>\\82F9\\679C\\4E3D\\4E2D\\9ED1</td>\r\n			<td>苹果丽中黑</td>\r\n		</tr>\r\n		<tr>\r\n			<td>苹果丽细宋</td>\r\n			<td>Apple LiSung Light</td>\r\n			<td>\\82F9\\679C\\4E3D\\7EC6\\5B8B</td>\r\n			<td>苹果丽细宋</td>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<th colspan=\"4\">\r\n			<p>&nbsp;</p>\r\n\r\n			<p>Windows</p>\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>新细明体</td>\r\n			<td>PMingLiU</td>\r\n			<td>\\65B0\\7EC6\\660E\\4F53</td>\r\n			<td>新细明体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>细明体</td>\r\n			<td>MingLiU</td>\r\n			<td>\\7EC6\\660E\\4F53</td>\r\n			<td>细明体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>标楷体</td>\r\n			<td>DFKai-SB</td>\r\n			<td>\\6807\\6977\\4F53</td>\r\n			<td>标楷体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>黑体</td>\r\n			<td>SimHei</td>\r\n			<td>\\9ED1\\4F53</td>\r\n			<td>黑体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>宋体</td>\r\n			<td>SimSun</td>\r\n			<td>\\5B8B\\4F53</td>\r\n			<td>宋体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>新宋体</td>\r\n			<td>NSimSun</td>\r\n			<td>\\65B0\\5B8B\\4F53</td>\r\n			<td>新宋体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>仿宋</td>\r\n			<td>FangSong</td>\r\n			<td>\\4EFF\\5B8B</td>\r\n			<td>仿宋</td>\r\n		</tr>\r\n		<tr>\r\n			<td>楷体</td>\r\n			<td>KaiTi</td>\r\n			<td>\\6977\\4F53</td>\r\n			<td>楷体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>仿宋_GB2312</td>\r\n			<td>FangSong_GB2312</td>\r\n			<td>\\4EFF\\5B8B_GB2312</td>\r\n			<td>仿宋_GB2312</td>\r\n		</tr>\r\n		<tr>\r\n			<td>楷体_GB2312</td>\r\n			<td>KaiTi_GB2312</td>\r\n			<td>\\6977\\4F53_GB2312</td>\r\n			<td>楷体_GB2312</td>\r\n		</tr>\r\n		<tr>\r\n			<td>微软正黑体</td>\r\n			<td>Microsoft JhengHei</td>\r\n			<td>\\5FAE\\x8F6F\\6B63\\9ED1\\4F53</td>\r\n			<td>微软正黑体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>微软雅黑</td>\r\n			<td>Microsoft YaHei</td>\r\n			<td>\\5FAE\\8F6F\\96C5\\9ED1</td>\r\n			<td>微软雅黑</td>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<th colspan=\"4\">\r\n			<p>&nbsp;</p>\r\n\r\n			<p>Office</p>\r\n			</th>\r\n		</tr>\r\n	</tbody>\r\n	<tbody>\r\n		<tr>\r\n			<td>隶书</td>\r\n			<td>LiSu</td>\r\n			<td>\\96B6\\4E66</td>\r\n			<td>隶书</td>\r\n		</tr>\r\n		<tr>\r\n			<td>幼圆</td>\r\n			<td>YouYuan</td>\r\n			<td>\\5E7C\\5706</td>\r\n			<td>幼圆</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文细黑</td>\r\n			<td>STXihei</td>\r\n			<td>\\534E\\6587\\7EC6\\9ED1</td>\r\n			<td>华文细黑</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文楷体</td>\r\n			<td>STKaiti</td>\r\n			<td>\\534E\\6587\\6977\\4F53</td>\r\n			<td>华文楷体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文宋体</td>\r\n			<td>STSong</td>\r\n			<td>\\534E\\6587\\5B8B\\4F53</td>\r\n			<td>华文宋体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文中宋</td>\r\n			<td>STZhongsong</td>\r\n			<td>\\534E\\6587\\4E2D\\5B8B</td>\r\n			<td>华文中宋</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文仿宋</td>\r\n			<td>STFangsong</td>\r\n			<td>\\534E\\6587\\4EFF\\5B8B</td>\r\n			<td>华文仿宋</td>\r\n		</tr>\r\n		<tr>\r\n			<td>方正舒体</td>\r\n			<td>FZShuTi</td>\r\n			<td>\\65B9\\6B63\\8212\\4F53</td>\r\n			<td>方正舒体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>方正姚体</td>\r\n			<td>FZYaoti</td>\r\n			<td>\\65B9\\6B63\\59DA\\4F53</td>\r\n			<td>方正姚体</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文彩云</td>\r\n			<td>STCaiyun</td>\r\n			<td>\\534E\\6587\\5F69\\4E91</td>\r\n			<td>华文彩云</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文琥珀</td>\r\n			<td>STHupo</td>\r\n			<td>\\534E\\6587\\7425\\73C0</td>\r\n			<td>华文琥珀</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文隶书</td>\r\n			<td>STLiti</td>\r\n			<td>\\534E\\6587\\96B6\\4E66</td>\r\n			<td>华文隶书</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文行楷</td>\r\n			<td>STXingkai</td>\r\n			<td>\\534E\\6587\\884C\\6977</td>\r\n			<td>华文行楷</td>\r\n		</tr>\r\n		<tr>\r\n			<td>华文新魏</td>\r\n			<td>STXinwei</td>\r\n			<td>\\534E\\6587\\65B0\\9B4F</td>\r\n			<td>华文新魏</td>\r\n		</tr>\r\n	</tbody>\r\n</table>', '2018-07-19 00:59:46.482172', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('25ff06468e6c4300a4b56424e8ef34c4', '将Kettle日志输出到文件', '<p>1. 在Kettle的data-integration/plugins/kettle5-log4j-plugin文件夹中有一个log4j.xml文件, 将文件改为如下</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\"&gt;\r\n&lt;log4j:configuration xmlns:log4j=\'http://jakarta.apache.org/log4j/\'&gt;\r\n\r\n  &lt;appender name=\"console\" class=\"org.apache.log4j.ConsoleAppender\"&gt;\r\n    &lt;param name=\"Target\" value=\"System.out\"/&gt;\r\n    &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt;\r\n    &lt;param name=\"ConversionPattern\" value=\"%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %c{1}:%L - %m%n\" /&gt;\r\n    &lt;/layout&gt;\r\n  &lt;/appender&gt;\r\n\r\n  &lt;appender name=\"logfile\" class=\"org.apache.log4j.FileAppender\"&gt;\r\n    &lt;param name=\"File\" value=\"E:/logs/kettle/kettle.log\"/&gt;\r\n    &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt;\r\n      &lt;param name=\"ConversionPattern\" value=\"%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %c{1}:%L - %m%n\"/&gt;\r\n    &lt;/layout&gt;\r\n  &lt;/appender&gt;\r\n\r\n  &lt;logger name=\"org.pentaho.di\"&gt;\r\n    &lt;level value=\"on\"/&gt;\r\n    &lt;appender-ref ref=\"logfile\" /&gt;\r\n  &lt;/logger&gt;\r\n  &lt;root&gt;\r\n    &lt;priority value =\"off\"&gt;&lt;/priority&gt;\r\n    &lt;appender-ref ref=\"console\"&gt;&lt;/appender-ref&gt;\r\n  &lt;/root&gt;\r\n&lt;/log4j:configuration&gt;</code></pre>\r\n\r\n<p>2. 也可将作业中的某个转换日志输出到固定文件中</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E5%B0%86Kettle%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6/01.jpg\" style=\"height:465px; width:800px\" /></p>', '2018-09-14 03:34:13.619028', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('265d0347d9e74cc39ba7bf3ec3d6e390', 'windows安装redis msi提示错误: Redis on Windows Setup Wizard ended prematurely', '<p>原因:&nbsp;.NET Framework 版本过低</p>\r\n\r\n<p>解决:&nbsp;更新.NET Framework 到较新版本, 如4.5</p>', '2019-04-23 09:52:38.233914', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('2879ba32a21e4371b7a1c7a221db38d0', '面试题', '<p>1.&nbsp;Java类加载器ClassLoader</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 类加载方式</p>\r\n\r\n<p style=\"margin-left:80px\">1&gt; 显式加载</p>\r\n\r\n<p style=\"margin-left:120px\">通过Class.forName(String className)动态加载类</p>\r\n\r\n<p style=\"margin-left:80px\">2&gt; 隐式加载</p>\r\n\r\n<p style=\"margin-left:120px\">通过new调用类加载器加载类</p>\r\n\r\n<p style=\"margin-left:40px\">(2) JDK默认提供的ClassLoader</p>\r\n\r\n<p style=\"margin-left:80px\">1&gt; Bootstrap ClassLoader(加载<strong><code>%JAVA_HOME%/jre/lib中的类</code></strong>)(加载Java核心API)</p>\r\n\r\n<p style=\"margin-left:80px\">2&gt; Ext ClassLoader(加载<strong><code>%JAVA_HOME%/jre/lib/ext中的类</code></strong>)(加载Java扩展API)</p>\r\n\r\n<p style=\"margin-left:80px\">3&gt; App ClassLoader(加载用户电脑环境变量CLASSPATH指定的类)</p>\r\n\r\n<p style=\"margin-left:40px\">(3)&nbsp;自定义ClassLoader(JDK默认提供的ClassLoader只能加载固定的类, 但要加载其他class文件实现某些业务逻辑, 则要通过自定义ClassLoader动态加载)</p>\r\n\r\n<p style=\"margin-left:80px\">1&gt; 继承java.lang.ClassLoader</p>\r\n\r\n<p style=\"margin-left:80px\">2&gt; 重写父类的findClass()方法</p>\r\n\r\n<p style=\"margin-left:40px\">(4) JVM使用Unicode编码</p>\r\n\r\n<p style=\"margin-left:40px\">(5) Java类加载顺序</p>\r\n\r\n<p style=\"margin-left:80px\">1&gt; 父类静态成员/代码块(同类型的成员和代码块的加载顺序按书写代码的顺序加载)</p>\r\n\r\n<p style=\"margin-left:80px\">2&gt; 子类静态成员/代码块</p>\r\n\r\n<p style=\"margin-left:80px\">3&gt; 父类非静态成员/代码块</p>\r\n\r\n<p style=\"margin-left:80px\">4&gt; 父类构造函数</p>\r\n\r\n<p style=\"margin-left:80px\">5&gt; 子类非静态成员/代码块</p>\r\n\r\n<p style=\"margin-left:80px\">6&gt; 子类构造函数</p>\r\n\r\n<p>2. i++与++i&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">public static void main(String[] args) {\r\n	int i = -1;\r\n	int j = i++ + ++i;\r\n	System.out.println(i); // 1\r\n	System.out.println(j); // 0\r\n}</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">public static void main(String[] args) {\r\n	int j = 0;\r\n	for (int i = 0; i &lt; 100; i++) {\r\n		j = j++;\r\n	}\r\n	System.out.println(j); // 0\r\n}</code></pre>\r\n\r\n<p>3. Java中单引号与双引号</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">public static void main(String[] args) {\r\n	// 单引号代表的为Char类型\r\n	System.out.println(0 + \'0\'); // 48\r\n	System.out.println(0 + \'a\'); // 97\r\n	System.out.println(0 + \'A\'); // 65\r\n	// 双引号代表的为String类型\r\n	System.out.println(0 + \"0\"); // 00\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-22 08:35:56.008442', '22ac56c65a0d44c5bf6b45e876c742f9');
INSERT INTO `blog_blog` VALUES ('292e0df3f11b46d6acf38fe73b274ab9', 'IDEA如何进行ignore文件', '<p>1. 将永远不可能提交的文件直接ignore掉, 如*.iml;*.idea;*.gitignore;*.sh;*.classpath;*.project;*.settings;target;这些文件</p>\r\n\r\n<p style=\"margin-left:40px\">(1)&nbsp;Settings&rarr;Editor&rarr;File Types</p>\r\n\r\n<p style=\"margin-left:40px\">(2)&nbsp;在下方的忽略文件和目录(Ignore files and folders)中添加自己需要过滤的内容, 以分号隔开</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">*.iml;*.idea;*.gitignore;*.sh;*.classpath;*.project;*.settings;target;</code></pre>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Cignore%E6%96%87%E4%BB%B6/01.png\" style=\"height:409px; width:800px\" /></p>\r\n\r\n<p>2. 如果是暂时不提交的文件, 如配置文件等, 可以放到自定义的Changelist中</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 新建Changelist</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Cignore%E6%96%87%E4%BB%B6/02.png\" style=\"height:551px; width:692px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(2) 将文件添加到Changelist中</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Cignore%E6%96%87%E4%BB%B6/03.png\" style=\"height:429px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(3) 提交SVN时提交某个Changelist即可</p>', '2018-10-22 01:12:41.105016', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('2bfb9afb80134f08b01115f0d3041f8f', '关于JAR包的版本', '<p>1.&nbsp;SNAPSHOT:&nbsp;快照版，可以稳定使用，且仍在继续改进版本</p>\r\n\r\n<p>2. GA:&nbsp;发行稳定版，官方推荐使用此版本</p>\r\n\r\n<p>3.&nbsp;RELEASE: 等价于GA</p>', '2019-03-18 07:32:15.969197', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('2c2f6154902b491092e98a084651bdcf', 'Ubuntu安装MySQL', '<pre>\r\n<code class=\"language-bash\">sudo apt update\r\nsudo apt install mysql-server mysql-client</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-18 07:23:28.275840', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('2d7556945061483d98fbc7c16ddca3fe', '重写源码, 实现功能: 要扫描的controller包下的所有@Controller修饰的类及其方法, 若不写@RequestMapping, 则指定默认的url', '<p>在项目中添加包: org.springframework.web.servlet.mvc.method.annotation, 包中增加如下类: RequestMappingHandlerMapping</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/*\r\n * Copyright 2002-2016 the original author or authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage org.springframework.web.servlet.mvc.method.annotation;\r\n\r\nimport java.lang.reflect.AnnotatedElement;\r\nimport java.lang.reflect.Method;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport org.springframework.context.EmbeddedValueResolverAware;\r\nimport org.springframework.core.annotation.AnnotatedElementUtils;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.util.Assert;\r\nimport org.springframework.util.CollectionUtils;\r\nimport org.springframework.util.StringValueResolver;\r\nimport org.springframework.web.accept.ContentNegotiationManager;\r\nimport org.springframework.web.bind.annotation.CrossOrigin;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.method.HandlerMethod;\r\nimport org.springframework.web.servlet.handler.MatchableHandlerMapping;\r\nimport org.springframework.web.servlet.handler.RequestMatchResult;\r\nimport org.springframework.web.servlet.mvc.condition.AbstractRequestCondition;\r\nimport org.springframework.web.servlet.mvc.condition.CompositeRequestCondition;\r\nimport org.springframework.web.servlet.mvc.condition.RequestCondition;\r\nimport org.springframework.web.servlet.mvc.method.RequestMappingInfo;\r\nimport org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;\r\n\r\n/**\r\n * Creates {@link RequestMappingInfo} instances from type and method-level\r\n * {@link RequestMapping @RequestMapping} annotations in\r\n * {@link Controller @Controller} classes.\r\n *\r\n * @author Arjen Poutsma\r\n * @author Rossen Stoyanchev\r\n * @author Sam Brannen\r\n * @since 3.1\r\n * @desctiption 增加功能:要扫描的controller包下的所有@Controller修饰的类及其方法,若不写@RequestMapping,则指定默认的url,\r\n * 				例:IndexController类和其login()方法都没有@RequestMapping注解,则默认url为\"/index/login\",\r\n * 				改动位置: 修改代码从191到231\r\n */\r\npublic class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\r\n		implements MatchableHandlerMapping, EmbeddedValueResolverAware {\r\n\r\n	private boolean useSuffixPatternMatch = true;\r\n\r\n	private boolean useRegisteredSuffixPatternMatch = false;\r\n\r\n	private boolean useTrailingSlashMatch = true;\r\n\r\n	private ContentNegotiationManager contentNegotiationManager = new ContentNegotiationManager();\r\n\r\n	private StringValueResolver embeddedValueResolver;\r\n\r\n	private RequestMappingInfo.BuilderConfiguration config = new RequestMappingInfo.BuilderConfiguration();\r\n\r\n\r\n	/**\r\n	 * Whether to use suffix pattern match (\".*\") when matching patterns to\r\n	 * requests. If enabled a method mapped to \"/users\" also matches to \"/users.*\".\r\n	 * &lt;p&gt;The default value is {@code true}.\r\n	 * &lt;p&gt;Also see {@link #setUseRegisteredSuffixPatternMatch(boolean)} for\r\n	 * more fine-grained control over specific suffixes to allow.\r\n	 */\r\n	public void setUseSuffixPatternMatch(boolean useSuffixPatternMatch) {\r\n		this.useSuffixPatternMatch = useSuffixPatternMatch;\r\n	}\r\n\r\n	/**\r\n	 * Whether suffix pattern matching should work only against path extensions\r\n	 * explicitly registered with the {@link ContentNegotiationManager}. This\r\n	 * is generally recommended to reduce ambiguity and to avoid issues such as\r\n	 * when a \".\" appears in the path for other reasons.\r\n	 * &lt;p&gt;By default this is set to \"false\".\r\n	 */\r\n	public void setUseRegisteredSuffixPatternMatch(boolean useRegisteredSuffixPatternMatch) {\r\n		this.useRegisteredSuffixPatternMatch = useRegisteredSuffixPatternMatch;\r\n		this.useSuffixPatternMatch = (useRegisteredSuffixPatternMatch || this.useSuffixPatternMatch);\r\n	}\r\n\r\n	/**\r\n	 * Whether to match to URLs irrespective of the presence of a trailing slash.\r\n	 * If enabled a method mapped to \"/users\" also matches to \"/users/\".\r\n	 * &lt;p&gt;The default value is {@code true}.\r\n	 */\r\n	public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {\r\n		this.useTrailingSlashMatch = useTrailingSlashMatch;\r\n	}\r\n\r\n	/**\r\n	 * Set the {@link ContentNegotiationManager} to use to determine requested media types.\r\n	 * If not set, the default constructor is used.\r\n	 */\r\n	public void setContentNegotiationManager(ContentNegotiationManager contentNegotiationManager) {\r\n		Assert.notNull(contentNegotiationManager, \"ContentNegotiationManager must not be null\");\r\n		this.contentNegotiationManager = contentNegotiationManager;\r\n	}\r\n\r\n	@Override\r\n	public void setEmbeddedValueResolver(StringValueResolver resolver) {\r\n		this.embeddedValueResolver = resolver;\r\n	}\r\n\r\n	@Override\r\n	public void afterPropertiesSet() {\r\n		this.config = new RequestMappingInfo.BuilderConfiguration();\r\n		this.config.setUrlPathHelper(getUrlPathHelper());\r\n		this.config.setPathMatcher(getPathMatcher());\r\n		this.config.setSuffixPatternMatch(this.useSuffixPatternMatch);\r\n		this.config.setTrailingSlashMatch(this.useTrailingSlashMatch);\r\n		this.config.setRegisteredSuffixPatternMatch(this.useRegisteredSuffixPatternMatch);\r\n		this.config.setContentNegotiationManager(getContentNegotiationManager());\r\n\r\n		super.afterPropertiesSet();\r\n	}\r\n\r\n\r\n	/**\r\n	 * Whether to use suffix pattern matching.\r\n	 */\r\n	public boolean useSuffixPatternMatch() {\r\n		return this.useSuffixPatternMatch;\r\n	}\r\n\r\n	/**\r\n	 * Whether to use registered suffixes for pattern matching.\r\n	 */\r\n	public boolean useRegisteredSuffixPatternMatch() {\r\n		return this.useRegisteredSuffixPatternMatch;\r\n	}\r\n\r\n	/**\r\n	 * Whether to match to URLs irrespective of the presence of a trailing slash.\r\n	 */\r\n	public boolean useTrailingSlashMatch() {\r\n		return this.useTrailingSlashMatch;\r\n	}\r\n\r\n	/**\r\n	 * Return the configured {@link ContentNegotiationManager}.\r\n	 */\r\n	public ContentNegotiationManager getContentNegotiationManager() {\r\n		return this.contentNegotiationManager;\r\n	}\r\n\r\n	/**\r\n	 * Return the file extensions to use for suffix pattern matching.\r\n	 */\r\n	public List&lt;String&gt; getFileExtensions() {\r\n		return this.config.getFileExtensions();\r\n	}\r\n\r\n\r\n	/**\r\n	 * {@inheritDoc}\r\n	 * Expects a handler to have a type-level @{@link Controller} annotation.\r\n	 */\r\n	@Override\r\n	protected boolean isHandler(Class&lt;?&gt; beanType) {\r\n		return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||\r\n				AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));\r\n	}\r\n\r\n	/**\r\n	 * Uses method and type-level @{@link RequestMapping} annotations to create\r\n	 * the RequestMappingInfo.\r\n	 * @return the created RequestMappingInfo, or {@code null} if the method\r\n	 * does not have a {@code @RequestMapping} annotation.\r\n	 * @see #getCustomMethodCondition(Method)\r\n	 * @see #getCustomTypeCondition(Class)\r\n	 */\r\n	@Override\r\n	protected RequestMappingInfo getMappingForMethod(Method method, Class&lt;?&gt; handlerType) {\r\n		RequestMappingInfo info = createRequestMappingInfo(method);\r\n		/*************************************** Modify begin. ***************************************/\r\n//		if (info != null) {\r\n//			RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);\r\n//			if (typeInfo != null) {\r\n//				info = typeInfo.combine(info);\r\n//			}\r\n//		}\r\n		String path = \"\";\r\n		if (info == null ) {\r\n			path = method.getName();\r\n			info = RequestMappingInfo\r\n			.paths(resolveEmbeddedValuesInPatterns(new String[]{path}))\r\n			.methods(new RequestMethod[]{})\r\n			.params(new String[]{})\r\n			.headers(new String[]{})\r\n			.consumes(new String[]{})\r\n			.produces(new String[]{})\r\n			.mappingName(\"\")\r\n			.customCondition(null)\r\n			.options(this.config)\r\n			.build();\r\n		}\r\n		RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);\r\n		if (typeInfo == null) {\r\n			path = handlerType.getName();\r\n			path = path.substring(path.lastIndexOf(\".\") + 1, path.lastIndexOf(\"Controller\"));\r\n			path = (new StringBuilder()).append(Character.toLowerCase(path.charAt(0))).append(path.substring(1)).toString();\r\n			typeInfo = RequestMappingInfo\r\n			.paths(resolveEmbeddedValuesInPatterns(new String[]{path}))\r\n			.methods(new RequestMethod[]{})\r\n			.params(new String[]{})\r\n			.headers(new String[]{})\r\n			.consumes(new String[]{})\r\n			.produces(new String[]{})\r\n			.mappingName(\"\")\r\n			.customCondition(null)\r\n			.options(this.config)\r\n			.build();\r\n		}\r\n		info = typeInfo.combine(info);\r\n		/*************************************** Modify end. ***************************************/\r\n		return info;\r\n	}\r\n\r\n	/**\r\n	 * Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},\r\n	 * supplying the appropriate custom {@link RequestCondition} depending on whether\r\n	 * the supplied {@code annotatedElement} is a class or method.\r\n	 * @see #getCustomTypeCondition(Class)\r\n	 * @see #getCustomMethodCondition(Method)\r\n	 */\r\n	private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {\r\n		RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);\r\n		RequestCondition&lt;?&gt; condition = (element instanceof Class ?\r\n				getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));\r\n		return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);\r\n	}\r\n\r\n	/**\r\n	 * Provide a custom type-level request condition.\r\n	 * The custom {@link RequestCondition} can be of any type so long as the\r\n	 * same condition type is returned from all calls to this method in order\r\n	 * to ensure custom request conditions can be combined and compared.\r\n	 * &lt;p&gt;Consider extending {@link AbstractRequestCondition} for custom\r\n	 * condition types and using {@link CompositeRequestCondition} to provide\r\n	 * multiple custom conditions.\r\n	 * @param handlerType the handler type for which to create the condition\r\n	 * @return the condition, or {@code null}\r\n	 */\r\n	protected RequestCondition&lt;?&gt; getCustomTypeCondition(Class&lt;?&gt; handlerType) {\r\n		return null;\r\n	}\r\n\r\n	/**\r\n	 * Provide a custom method-level request condition.\r\n	 * The custom {@link RequestCondition} can be of any type so long as the\r\n	 * same condition type is returned from all calls to this method in order\r\n	 * to ensure custom request conditions can be combined and compared.\r\n	 * &lt;p&gt;Consider extending {@link AbstractRequestCondition} for custom\r\n	 * condition types and using {@link CompositeRequestCondition} to provide\r\n	 * multiple custom conditions.\r\n	 * @param method the handler method for which to create the condition\r\n	 * @return the condition, or {@code null}\r\n	 */\r\n	protected RequestCondition&lt;?&gt; getCustomMethodCondition(Method method) {\r\n		return null;\r\n	}\r\n\r\n	/**\r\n	 * Create a {@link RequestMappingInfo} from the supplied\r\n	 * {@link RequestMapping @RequestMapping} annotation, which is either\r\n	 * a directly declared annotation, a meta-annotation, or the synthesized\r\n	 * result of merging annotation attributes within an annotation hierarchy.\r\n	 */\r\n	protected RequestMappingInfo createRequestMappingInfo(\r\n			RequestMapping requestMapping, RequestCondition&lt;?&gt; customCondition) {\r\n\r\n		return RequestMappingInfo\r\n				.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))\r\n				.methods(requestMapping.method())\r\n				.params(requestMapping.params())\r\n				.headers(requestMapping.headers())\r\n				.consumes(requestMapping.consumes())\r\n				.produces(requestMapping.produces())\r\n				.mappingName(requestMapping.name())\r\n				.customCondition(customCondition)\r\n				.options(this.config)\r\n				.build();\r\n	}\r\n\r\n	/**\r\n	 * Resolve placeholder values in the given array of patterns.\r\n	 * @return a new array with updated patterns\r\n	 */\r\n	protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {\r\n		if (this.embeddedValueResolver == null) {\r\n			return patterns;\r\n		}\r\n		else {\r\n			String[] resolvedPatterns = new String[patterns.length];\r\n			for (int i = 0; i &lt; patterns.length; i++) {\r\n				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i]);\r\n			}\r\n			return resolvedPatterns;\r\n		}\r\n	}\r\n\r\n	@Override\r\n	public RequestMatchResult match(HttpServletRequest request, String pattern) {\r\n		RequestMappingInfo info = RequestMappingInfo.paths(pattern).options(this.config).build();\r\n		RequestMappingInfo matchingInfo = info.getMatchingCondition(request);\r\n		if (matchingInfo == null) {\r\n			return null;\r\n		}\r\n		Set&lt;String&gt; patterns = matchingInfo.getPatternsCondition().getPatterns();\r\n		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);\r\n		return new RequestMatchResult(patterns.iterator().next(), lookupPath, getPathMatcher());\r\n	}\r\n\r\n	@Override\r\n	protected CorsConfiguration initCorsConfiguration(Object handler, Method method, RequestMappingInfo mappingInfo) {\r\n		HandlerMethod handlerMethod = createHandlerMethod(handler, method);\r\n		CrossOrigin typeAnnotation = AnnotatedElementUtils.findMergedAnnotation(handlerMethod.getBeanType(), CrossOrigin.class);\r\n		CrossOrigin methodAnnotation = AnnotatedElementUtils.findMergedAnnotation(method, CrossOrigin.class);\r\n\r\n		if (typeAnnotation == null &amp;&amp; methodAnnotation == null) {\r\n			return null;\r\n		}\r\n\r\n		CorsConfiguration config = new CorsConfiguration();\r\n		updateCorsConfig(config, typeAnnotation);\r\n		updateCorsConfig(config, methodAnnotation);\r\n\r\n		if (CollectionUtils.isEmpty(config.getAllowedMethods())) {\r\n			for (RequestMethod allowedMethod : mappingInfo.getMethodsCondition().getMethods()) {\r\n				config.addAllowedMethod(allowedMethod.name());\r\n			}\r\n		}\r\n		return config.applyPermitDefaultValues();\r\n	}\r\n\r\n	private void updateCorsConfig(CorsConfiguration config, CrossOrigin annotation) {\r\n		if (annotation == null) {\r\n			return;\r\n		}\r\n		for (String origin : annotation.origins()) {\r\n			config.addAllowedOrigin(resolveCorsAnnotationValue(origin));\r\n		}\r\n		for (RequestMethod method : annotation.methods()) {\r\n			config.addAllowedMethod(method.name());\r\n		}\r\n		for (String header : annotation.allowedHeaders()) {\r\n			config.addAllowedHeader(resolveCorsAnnotationValue(header));\r\n		}\r\n		for (String header : annotation.exposedHeaders()) {\r\n			config.addExposedHeader(resolveCorsAnnotationValue(header));\r\n		}\r\n\r\n		String allowCredentials = resolveCorsAnnotationValue(annotation.allowCredentials());\r\n		if (\"true\".equalsIgnoreCase(allowCredentials)) {\r\n			config.setAllowCredentials(true);\r\n		}\r\n		else if (\"false\".equalsIgnoreCase(allowCredentials)) {\r\n			config.setAllowCredentials(false);\r\n		}\r\n		else if (!allowCredentials.isEmpty()) {\r\n			throw new IllegalStateException(\"@CrossOrigin\'s allowCredentials value must be \\\"true\\\", \\\"false\\\", \" +\r\n					\"or an empty string (\\\"\\\"): current value is [\" + allowCredentials + \"]\");\r\n		}\r\n\r\n		if (annotation.maxAge() &gt;= 0 &amp;&amp; config.getMaxAge() == null) {\r\n			config.setMaxAge(annotation.maxAge());\r\n		}\r\n	}\r\n\r\n	private String resolveCorsAnnotationValue(String value) {\r\n		return (this.embeddedValueResolver != null ? this.embeddedValueResolver.resolveStringValue(value) : value);\r\n	}\r\n\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-23 01:02:40.463548', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('30798e0e4cd1400f85f17d290cdb62f4', '通过Eclipse使用Git', '<p>1. Window --&gt; Show View --&gt; Other...</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87Eclipse%E4%BD%BF%E7%94%A8Git/01.png\" style=\"height:456px; width:578px\" /></p>\r\n\r\n<p>2. 搜索git, 选择Git Repositories</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87Eclipse%E4%BD%BF%E7%94%A8Git/02.png\" style=\"height:489px; width:426px\" /></p>\r\n\r\n<p>3. 先复制好Git的仓库路径(如: git@github.com:paulandcode/blogs.git), 然后在Eclipse弹出的窗口粘贴路径, 最后一直点击下一步, 并选择本地项目保存路径即可下载整个项目到本地.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87Eclipse%E4%BD%BF%E7%94%A8Git/03.png\" style=\"height:436px; width:800px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87Eclipse%E4%BD%BF%E7%94%A8Git/04.png\" style=\"height:643px; width:612px\" /></p>\r\n\r\n<p>4.&nbsp;更新代码</p>\r\n\r\n<p style=\"margin-left:40px\">选中要更新的文件夹点击右键 --&gt; Team --&gt; Pull (将服务器中新增的代码拉到本地, 若有冲突, 则会报错, 只会拉到在本地git仓库, 不会拉到本地代码中, 并且在项目名右侧会有&darr;提示, 例:offweb[offweb master &darr;1], 这表示本地git仓库有1个文件等待拉取)</p>\r\n\r\n<p>5.&nbsp;提交代码</p>\r\n\r\n<p style=\"margin-left:40px\">选中要提交的文件夹点击右键 --&gt; Team --&gt; Add to Index --&gt; Commit And Push(将本地代码提交到git服务器, 若有冲突, 则会报错, 只会提交到在本地git仓库, 不会提交到git服务器, 并且在项目名右侧会有&uarr;提示, 例:offweb[offweb master &uarr;1], 这表示本地git仓库有1个文件等待提交)</p>\r\n\r\n<p>6.&nbsp;解决冲突</p>\r\n\r\n<p style=\"margin-left:40px\">不论是先Pull还是先Push, 都有一个规律:只有Pull之后才会出现冲突信息, 只有出现冲突信息后, 下一个push才可以提交成功. 所以解决冲突分三步: 第一步, Pull后出现冲突信息(Pull --&gt; Push --&gt; Pull 或者 Push --&gt; Pull); 第二步, 解决冲突; 第三步, Push</p>\r\n\r\n<p>7.&nbsp;使用Eclipse自带的Merge Tool解决冲突</p>\r\n\r\n<p style=\"margin-left:40px\">选中项目根文件夹点击右键 --&gt; Team --&gt; Synchronize Workspace(与资源库同步) --&gt; 有冲突的代码处(红色双向箭头)右键Merge Tool解决冲突 --&gt; 解决完后右键Add to Index --&gt; Commit And Push</p>', '2018-07-25 07:56:41.896404', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('31b1c8fc02754b3088503f6487d2ffb8', 'Eclipse的Tomcat项目热加载', '<p>1. 修改js, HTML, JSP等静态文件时, 本来就会自动发布无需重启</p>\r\n\r\n<p>2. 修改MyBatis的mapper文件也可设置为无需重启服务器, 参考博客:&nbsp;<a href=\"http://www.paulandcode.com/detail/3249e4df-543a-45d8-9309-084888e03591\" target=\"_blank\">http://www.paulandcode.com/detail/3249e4df-543a-45d8-9309-084888e03591</a></p>\r\n\r\n<p>3. 修改config.properties,&nbsp;pom.xml, web.xml, spring-jdbc.xml等配置文件时, 需要重启服务器</p>\r\n\r\n<p>4. 用Eclipse开发时新增类, 成员变量, 方法等或修改它们的名称时, 需要重启服务器.&nbsp;而修改方法内容时, 可以设置为无需重启服务器也可加载, 设置方法如下:&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">(1)以Debug模式启动Tomcat</p>\r\n\r\n<p style=\"margin-left:40px\">(2)Modules auto reload by default这一项的打钩去掉(若加上打钩, 则代码有修改时Tomcat会自动帮我们重启, 不是我们想要的)</p>', '2018-07-23 03:15:50.353455', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3249e4df543a45d89309084888e03591', '重写源码, 实现功能: MyBatis的mapper文件修改后, 不用重启服务器即可生效', '<p>1. 在项目中添加包:&nbsp;org.mybatis.spring, 包中增加如下类:&nbsp;SqlSessionFactoryBean</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n *    Copyright 2010-2016 the original author or authors.\r\n *\r\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *    you may not use this file except in compliance with the License.\r\n *    You may obtain a copy of the License at\r\n *\r\n *       http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *    Unless required by applicable law or agreed to in writing, software\r\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *    See the License for the specific language governing permissions and\r\n *    limitations under the License.\r\n */\r\npackage org.mybatis.spring;\r\n\r\nimport static org.springframework.util.Assert.notNull;\r\nimport static org.springframework.util.Assert.state;\r\nimport static org.springframework.util.ObjectUtils.isEmpty;\r\nimport static org.springframework.util.StringUtils.hasLength;\r\nimport static org.springframework.util.StringUtils.tokenizeToStringArray;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.SQLException;\r\nimport java.util.Properties;\r\n\r\nimport javax.sql.DataSource;\r\n\r\nimport org.apache.ibatis.builder.xml.XMLConfigBuilder;\r\nimport org.apache.ibatis.builder.xml.XmlMapperBuilder;\r\nimport org.apache.ibatis.cache.Cache;\r\nimport org.apache.ibatis.executor.ErrorContext;\r\nimport org.apache.ibatis.io.VFS;\r\nimport org.apache.ibatis.logging.Log;\r\nimport org.apache.ibatis.logging.LogFactory;\r\nimport org.apache.ibatis.mapping.DatabaseIdProvider;\r\nimport org.apache.ibatis.mapping.Environment;\r\nimport org.apache.ibatis.plugin.Interceptor;\r\nimport org.apache.ibatis.reflection.factory.ObjectFactory;\r\nimport org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\r\nimport org.apache.ibatis.session.Configuration;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\nimport org.apache.ibatis.transaction.TransactionFactory;\r\nimport org.apache.ibatis.type.TypeHandler;\r\nimport org.mybatis.spring.transaction.SpringManagedTransactionFactory;\r\nimport org.springframework.beans.factory.FactoryBean;\r\nimport org.springframework.beans.factory.InitializingBean;\r\nimport org.springframework.context.ApplicationEvent;\r\nimport org.springframework.context.ApplicationListener;\r\nimport org.springframework.context.ConfigurableApplicationContext;\r\nimport org.springframework.context.event.ContextRefreshedEvent;\r\nimport org.springframework.core.NestedIOException;\r\nimport org.springframework.core.io.Resource;\r\nimport org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\r\n\r\n/**\r\n * {@code FactoryBean} that creates an MyBatis {@code SqlSessionFactory}. This\r\n * is the usual way to set up a shared MyBatis {@code SqlSessionFactory} in a\r\n * Spring application context; the SqlSessionFactory can then be passed to\r\n * MyBatis-based DAOs via dependency injection.\r\n *\r\n * Either {@code DataSourceTransactionManager} or {@code JtaTransactionManager}\r\n * can be used for transaction demarcation in combination with a\r\n * {@code SqlSessionFactory}. JTA should be used for transactions which span\r\n * multiple databases or when container managed transactions (CMT) are being\r\n * used.\r\n *\r\n * @author Putthibong Boonbong\r\n * @author Hunter Presnall\r\n * @author Eduardo Macarron\r\n * @author Eddú Meléndez\r\n * @author Kazuki Shimizu\r\n *\r\n * @see #setConfigLocation\r\n * @see #setDataSource\r\n * @version $Id$\r\n * @desctiption 刷新xml文件(改动位置: 增加代码从576到608,增加代码从652到673)\r\n */\r\npublic class SqlSessionFactoryBean\r\n		implements FactoryBean&lt;SqlSessionFactory&gt;, InitializingBean, ApplicationListener&lt;ApplicationEvent&gt; {\r\n\r\n	private static final Log LOGGER = LogFactory.getLog(SqlSessionFactoryBean.class);\r\n\r\n	private Resource configLocation;\r\n\r\n	private Configuration configuration;\r\n\r\n	private Resource[] mapperLocations;\r\n\r\n	private DataSource dataSource;\r\n\r\n	private TransactionFactory transactionFactory;\r\n\r\n	private Properties configurationProperties;\r\n\r\n	private SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\r\n\r\n	private SqlSessionFactory sqlSessionFactory;\r\n\r\n	/**\r\n	 * EnvironmentAware requires spring 3.1\r\n	 */\r\n	private String environment = SqlSessionFactoryBean.class.getSimpleName();\r\n\r\n	private boolean failFast;\r\n\r\n	private Interceptor[] plugins;\r\n\r\n	private TypeHandler&lt;?&gt;[] typeHandlers;\r\n\r\n	private String typeHandlersPackage;\r\n\r\n	private Class&lt;?&gt;[] typeAliases;\r\n\r\n	private String typeAliasesPackage;\r\n\r\n	private Class&lt;?&gt; typeAliasesSuperType;\r\n\r\n	/**\r\n	 *  issue #19. No default provider.\r\n	 */\r\n	private DatabaseIdProvider databaseIdProvider;\r\n\r\n	private Class&lt;? extends VFS&gt; vfs;\r\n\r\n	private Cache cache;\r\n\r\n	private ObjectFactory objectFactory;\r\n\r\n	private ObjectWrapperFactory objectWrapperFactory;\r\n\r\n	/**\r\n	 * Sets the ObjectFactory.\r\n	 *\r\n	 * @since 1.1.2\r\n	 * @param objectFactory\r\n	 */\r\n	public void setObjectFactory(ObjectFactory objectFactory) {\r\n		this.objectFactory = objectFactory;\r\n	}\r\n\r\n	/**\r\n	 * Sets the ObjectWrapperFactory.\r\n	 *\r\n	 * @since 1.1.2\r\n	 * @param objectWrapperFactory\r\n	 */\r\n	public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\r\n		this.objectWrapperFactory = objectWrapperFactory;\r\n	}\r\n\r\n	/**\r\n	 * Gets the DatabaseIdProvider\r\n	 *\r\n	 * @since 1.1.0\r\n	 * @return\r\n	 */\r\n	public DatabaseIdProvider getDatabaseIdProvider() {\r\n		return databaseIdProvider;\r\n	}\r\n\r\n	/**\r\n	 * Sets the DatabaseIdProvider. As of version 1.2.2 this variable is not\r\n	 * initialized by default.\r\n	 *\r\n	 * @since 1.1.0\r\n	 * @param databaseIdProvider\r\n	 */\r\n	public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {\r\n		this.databaseIdProvider = databaseIdProvider;\r\n	}\r\n\r\n	public Class&lt;? extends VFS&gt; getVfs() {\r\n		return this.vfs;\r\n	}\r\n\r\n	public void setVfs(Class&lt;? extends VFS&gt; vfs) {\r\n		this.vfs = vfs;\r\n	}\r\n\r\n	public Cache getCache() {\r\n		return this.cache;\r\n	}\r\n\r\n	public void setCache(Cache cache) {\r\n		this.cache = cache;\r\n	}\r\n\r\n	/**\r\n	 * Mybatis plugin list.\r\n	 *\r\n	 * @since 1.0.1\r\n	 *\r\n	 * @param plugins\r\n	 *            list of plugins\r\n	 *\r\n	 */\r\n	public void setPlugins(Interceptor[] plugins) {\r\n		this.plugins = plugins;\r\n	}\r\n\r\n	/**\r\n	 * Packages to search for type aliases.\r\n	 *\r\n	 * @since 1.0.1\r\n	 *\r\n	 * @param typeAliasesPackage\r\n	 *            package to scan for domain objects\r\n	 *\r\n	 */\r\n	public void setTypeAliasesPackage(String typeAliasesPackage) {\r\n		this.typeAliasesPackage = typeAliasesPackage;\r\n	}\r\n\r\n	/**\r\n	 * Super class which domain objects have to extend to have a type alias\r\n	 * created. No effect if there is no package to scan configured.\r\n	 *\r\n	 * @since 1.1.2\r\n	 *\r\n	 * @param typeAliasesSuperType\r\n	 *            super class for domain objects\r\n	 *\r\n	 */\r\n	public void setTypeAliasesSuperType(Class&lt;?&gt; typeAliasesSuperType) {\r\n		this.typeAliasesSuperType = typeAliasesSuperType;\r\n	}\r\n\r\n	/**\r\n	 * Packages to search for type handlers.\r\n	 *\r\n	 * @since 1.0.1\r\n	 *\r\n	 * @param typeHandlersPackage\r\n	 *            package to scan for type handlers\r\n	 *\r\n	 */\r\n	public void setTypeHandlersPackage(String typeHandlersPackage) {\r\n		this.typeHandlersPackage = typeHandlersPackage;\r\n	}\r\n\r\n	/**\r\n	 * Set type handlers. They must be annotated with {@code MappedTypes} and\r\n	 * optionally with {@code MappedJdbcTypes}\r\n	 *\r\n	 * @since 1.0.1\r\n	 *\r\n	 * @param typeHandlers\r\n	 *            Type handler list\r\n	 */\r\n	public void setTypeHandlers(TypeHandler&lt;?&gt;[] typeHandlers) {\r\n		this.typeHandlers = typeHandlers;\r\n	}\r\n\r\n	/**\r\n	 * List of type aliases to register. They can be annotated with\r\n	 * {@code Alias}\r\n	 *\r\n	 * @since 1.0.1\r\n	 *\r\n	 * @param typeAliases\r\n	 *            Type aliases list\r\n	 */\r\n	public void setTypeAliases(Class&lt;?&gt;[] typeAliases) {\r\n		this.typeAliases = typeAliases;\r\n	}\r\n\r\n	/**\r\n	 * If true, a final check is done on Configuration to assure that all mapped\r\n	 * statements are fully loaded and there is no one still pending to resolve\r\n	 * includes. Defaults to false.\r\n	 *\r\n	 * @since 1.0.1\r\n	 *\r\n	 * @param failFast\r\n	 *            enable failFast\r\n	 */\r\n	public void setFailFast(boolean failFast) {\r\n		this.failFast = failFast;\r\n	}\r\n\r\n	/**\r\n	 * Set the location of the MyBatis {@code SqlSessionFactory} config file. A\r\n	 * typical value is \"WEB-INF/mybatis-configuration.xml\".\r\n	 */\r\n	public void setConfigLocation(Resource configLocation) {\r\n		this.configLocation = configLocation;\r\n	}\r\n\r\n	/**\r\n	 * Set a customized MyBatis configuration.\r\n	 * \r\n	 * @param configuration\r\n	 *            MyBatis configuration\r\n	 * @since 1.3.0\r\n	 */\r\n	public void setConfiguration(Configuration configuration) {\r\n		this.configuration = configuration;\r\n	}\r\n\r\n	/**\r\n	 * Set locations of MyBatis mapper files that are going to be merged into\r\n	 * the {@code SqlSessionFactory} configuration at runtime.\r\n	 *\r\n	 * This is an alternative to specifying \"&amp;lt;sqlmapper&amp;gt;\" entries in an\r\n	 * MyBatis config file. This property being based on Spring\'s resource\r\n	 * abstraction also allows for specifying resource patterns here: e.g.\r\n	 * \"classpath*:sqlmap/*-mapper.xml\".\r\n	 */\r\n	public void setMapperLocations(Resource[] mapperLocations) {\r\n		this.mapperLocations = mapperLocations;\r\n	}\r\n\r\n	/**\r\n	 * Set optional properties to be passed into the SqlSession configuration,\r\n	 * as alternative to a {@code &amp;lt;properties&amp;gt;} tag in the configuration\r\n	 * xml file. This will be used to resolve placeholders in the config file.\r\n	 */\r\n	public void setConfigurationProperties(Properties sqlSessionFactoryProperties) {\r\n		this.configurationProperties = sqlSessionFactoryProperties;\r\n	}\r\n\r\n	/**\r\n	 * Set the JDBC {@code DataSource} that this instance should manage\r\n	 * transactions for. The {@code DataSource} should match the one used by the\r\n	 * {@code SqlSessionFactory}: for example, you could specify the same JNDI\r\n	 * DataSource for both.\r\n	 *\r\n	 * A transactional JDBC {@code Connection} for this {@code DataSource} will\r\n	 * be provided to application code accessing this {@code DataSource}\r\n	 * directly via {@code DataSourceUtils} or\r\n	 * {@code DataSourceTransactionManager}.\r\n	 *\r\n	 * The {@code DataSource} specified here should be the target\r\n	 * {@code DataSource} to manage transactions for, not a\r\n	 * {@code TransactionAwareDataSourceProxy}. Only data access code may work\r\n	 * with {@code TransactionAwareDataSourceProxy}, while the transaction\r\n	 * manager needs to work on the underlying target {@code DataSource}. If\r\n	 * there\'s nevertheless a {@code TransactionAwareDataSourceProxy} passed in,\r\n	 * it will be unwrapped to extract its target {@code DataSource}.\r\n	 *\r\n	 */\r\n	public void setDataSource(DataSource dataSource) {\r\n		if (dataSource instanceof TransactionAwareDataSourceProxy) {\r\n			// If we got a TransactionAwareDataSourceProxy, we need to perform\r\n			// transactions for its underlying target DataSource, else data\r\n			// access code won\'t see properly exposed transactions (i.e.\r\n			// transactions for the target DataSource).\r\n			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();\r\n		} else {\r\n			this.dataSource = dataSource;\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * Sets the {@code SqlSessionFactoryBuilder} to use when creating the\r\n	 * {@code SqlSessionFactory}.\r\n	 *\r\n	 * This is mainly meant for testing so that mock SqlSessionFactory classes\r\n	 * can be injected. By default, {@code SqlSessionFactoryBuilder} creates\r\n	 * {@code DefaultSqlSessionFactory} instances.\r\n	 *\r\n	 */\r\n	public void setSqlSessionFactoryBuilder(SqlSessionFactoryBuilder sqlSessionFactoryBuilder) {\r\n		this.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;\r\n	}\r\n\r\n	/**\r\n	 * Set the MyBatis TransactionFactory to use. Default is\r\n	 * {@code SpringManagedTransactionFactory}\r\n	 *\r\n	 * The default {@code SpringManagedTransactionFactory} should be appropriate\r\n	 * for all cases: be it Spring transaction management, EJB CMT or plain JTA.\r\n	 * If there is no active transaction, SqlSession operations will execute SQL\r\n	 * statements non-transactionally.\r\n	 *\r\n	 * &lt;b&gt;It is strongly recommended to use the default\r\n	 * {@code TransactionFactory}.&lt;/b&gt; If not used, any attempt at getting an\r\n	 * SqlSession through Spring\'s MyBatis framework will throw an exception if\r\n	 * a transaction is active.\r\n	 *\r\n	 * @see SpringManagedTransactionFactory\r\n	 * @param transactionFactory\r\n	 *            the MyBatis TransactionFactory\r\n	 */\r\n	public void setTransactionFactory(TransactionFactory transactionFactory) {\r\n		this.transactionFactory = transactionFactory;\r\n	}\r\n\r\n	/**\r\n	 * &lt;b&gt;NOTE:&lt;/b&gt; This class &lt;em&gt;overrides&lt;/em&gt; any {@code Environment} you\r\n	 * have set in the MyBatis config file. This is used only as a placeholder\r\n	 * name. The default value is\r\n	 * {@code SqlSessionFactoryBean.class.getSimpleName()}.\r\n	 *\r\n	 * @param environment\r\n	 *            the environment name\r\n	 */\r\n	public void setEnvironment(String environment) {\r\n		this.environment = environment;\r\n	}\r\n\r\n	/**\r\n	 * {@inheritDoc}\r\n	 */\r\n	@Override\r\n	public void afterPropertiesSet() throws Exception {\r\n		notNull(dataSource, \"Property \'dataSource\' is required\");\r\n		notNull(sqlSessionFactoryBuilder, \"Property \'sqlSessionFactoryBuilder\' is required\");\r\n		state((configuration == null &amp;&amp; configLocation == null) || !(configuration != null &amp;&amp; configLocation != null),\r\n				\"Property \'configuration\' and \'configLocation\' can not specified with together\");\r\n\r\n		this.sqlSessionFactory = buildSqlSessionFactory();\r\n	}\r\n\r\n	/**\r\n	 * Build a {@code SqlSessionFactory} instance.\r\n	 *\r\n	 * The default implementation uses the standard MyBatis\r\n	 * {@code XMLConfigBuilder} API to build a {@code SqlSessionFactory}\r\n	 * instance based on an Reader. Since 1.3.0, it can be specified a\r\n	 * {@link Configuration} instance directly(without config file).\r\n	 *\r\n	 * @return SqlSessionFactory\r\n	 * @throws IOException\r\n	 *             if loading the config file failed\r\n	 */\r\n	protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\r\n\r\n		Configuration configuration;\r\n\r\n		XMLConfigBuilder xmlConfigBuilder = null;\r\n		if (this.configuration != null) {\r\n			configuration = this.configuration;\r\n			if (configuration.getVariables() == null) {\r\n				configuration.setVariables(this.configurationProperties);\r\n			} else if (this.configurationProperties != null) {\r\n				configuration.getVariables().putAll(this.configurationProperties);\r\n			}\r\n		} else if (this.configLocation != null) {\r\n			xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null,\r\n					this.configurationProperties);\r\n			configuration = xmlConfigBuilder.getConfiguration();\r\n		} else {\r\n			if (LOGGER.isDebugEnabled()) {\r\n				LOGGER.debug(\r\n						\"Property `configuration` or \'configLocation\' not specified, using default MyBatis Configuration\");\r\n			}\r\n			configuration = new Configuration();\r\n			configuration.setVariables(this.configurationProperties);\r\n		}\r\n\r\n		if (this.objectFactory != null) {\r\n			configuration.setObjectFactory(this.objectFactory);\r\n		}\r\n\r\n		if (this.objectWrapperFactory != null) {\r\n			configuration.setObjectWrapperFactory(this.objectWrapperFactory);\r\n		}\r\n\r\n		if (this.vfs != null) {\r\n			configuration.setVfsImpl(this.vfs);\r\n		}\r\n\r\n		if (hasLength(this.typeAliasesPackage)) {\r\n			String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,\r\n					ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\r\n			for (String packageToScan : typeAliasPackageArray) {\r\n				configuration.getTypeAliasRegistry().registerAliases(packageToScan,\r\n						typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Scanned package: \'\" + packageToScan + \"\' for aliases\");\r\n				}\r\n			}\r\n		}\r\n\r\n		if (!isEmpty(this.typeAliases)) {\r\n			for (Class&lt;?&gt; typeAlias : this.typeAliases) {\r\n				configuration.getTypeAliasRegistry().registerAlias(typeAlias);\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Registered type alias: \'\" + typeAlias + \"\'\");\r\n				}\r\n			}\r\n		}\r\n\r\n		if (!isEmpty(this.plugins)) {\r\n			for (Interceptor plugin : this.plugins) {\r\n				configuration.addInterceptor(plugin);\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Registered plugin: \'\" + plugin + \"\'\");\r\n				}\r\n			}\r\n		}\r\n\r\n		if (hasLength(this.typeHandlersPackage)) {\r\n			String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,\r\n					ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\r\n			for (String packageToScan : typeHandlersPackageArray) {\r\n				configuration.getTypeHandlerRegistry().register(packageToScan);\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Scanned package: \'\" + packageToScan + \"\' for type handlers\");\r\n				}\r\n			}\r\n		}\r\n\r\n		if (!isEmpty(this.typeHandlers)) {\r\n			for (TypeHandler&lt;?&gt; typeHandler : this.typeHandlers) {\r\n				configuration.getTypeHandlerRegistry().register(typeHandler);\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Registered type handler: \'\" + typeHandler + \"\'\");\r\n				}\r\n			}\r\n		}\r\n\r\n		// fix #64 set databaseId before parse mapper xmls\r\n		if (this.databaseIdProvider != null) {\r\n			try {\r\n				configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\r\n			} catch (SQLException e) {\r\n				throw new NestedIOException(\"Failed getting a databaseId\", e);\r\n			}\r\n		}\r\n\r\n		if (this.cache != null) {\r\n			configuration.addCache(this.cache);\r\n		}\r\n\r\n		if (xmlConfigBuilder != null) {\r\n			try {\r\n				xmlConfigBuilder.parse();\r\n\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Parsed configuration file: \'\" + this.configLocation + \"\'\");\r\n				}\r\n			} catch (Exception ex) {\r\n				throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\r\n			} finally {\r\n				ErrorContext.instance().reset();\r\n			}\r\n		}\r\n\r\n		if (this.transactionFactory == null) {\r\n			this.transactionFactory = new SpringManagedTransactionFactory();\r\n		}\r\n\r\n		configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource));\r\n\r\n		if (!isEmpty(this.mapperLocations)) {\r\n			for (Resource mapperLocation : this.mapperLocations) {\r\n				if (mapperLocation == null) {\r\n					continue;\r\n				}\r\n\r\n				try {\r\n					XmlMapperBuilder xmlMapperBuilder = new XmlMapperBuilder(mapperLocation.getInputStream(),\r\n							configuration, mapperLocation.toString(), configuration.getSqlFragments());\r\n					xmlMapperBuilder.parse();\r\n				} catch (Exception e) {\r\n					throw new NestedIOException(\"Failed to parse mapping resource: \'\" + mapperLocation + \"\'\", e);\r\n				} finally {\r\n					ErrorContext.instance().reset();\r\n				}\r\n\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Parsed mapper file: \'\" + mapperLocation + \"\'\");\r\n				}\r\n			}\r\n		} else {\r\n			if (LOGGER.isDebugEnabled()) {\r\n				LOGGER.debug(\"Property \'mapperLocations\' was not specified or no matching resources found\");\r\n			}\r\n		}\r\n\r\n		/*************************************** Modify begin. ***************************************/\r\n		// 增加location 获取加载xml的路径，也可配置\r\n		String location = null;\r\n		if (!isEmpty(this.mapperLocations)) {\r\n			for (Resource mapperLocation : this.mapperLocations) {\r\n				if (mapperLocation == null) {\r\n					continue;\r\n				}\r\n				if (location == null) {\r\n					location = mapperLocation.toString();\r\n				}\r\n				try {\r\n					XmlMapperBuilder xmlMapperBuilder = new XmlMapperBuilder(mapperLocation.getInputStream(),\r\n							configuration, mapperLocation.toString(), configuration.getSqlFragments());\r\n					xmlMapperBuilder.parse();\r\n				} catch (Exception e) {\r\n					e.printStackTrace();\r\n					throw new NestedIOException(\"Failed to parse mapping resource: \'\" + mapperLocation + \"\'\", e);\r\n				} finally {\r\n					ErrorContext.instance().reset();\r\n				}\r\n				if (LOGGER.isDebugEnabled()) {\r\n					LOGGER.debug(\"Parsed mapper file: \'\" + mapperLocation + \"\'\");\r\n				}\r\n			}\r\n		} else {\r\n			if (LOGGER.isDebugEnabled()) {\r\n				LOGGER.debug(\"Property \'mapperLocations\' was not specified or no matching resources found\");\r\n			}\r\n		}\r\n		// 编译sqlsession时，启动定时器\r\n		new org.apache.ibatis.thread.Runnable(location, configuration).run();\r\n		/**************************************** Modify end. ****************************************/\r\n\r\n		return this.sqlSessionFactoryBuilder.build(configuration);\r\n	}\r\n\r\n	/**\r\n	 * {@inheritDoc}\r\n	 */\r\n	@Override\r\n	public SqlSessionFactory getObject() throws Exception {\r\n		if (this.sqlSessionFactory == null) {\r\n			afterPropertiesSet();\r\n		}\r\n\r\n		return this.sqlSessionFactory;\r\n	}\r\n\r\n	/**\r\n	 * {@inheritDoc}\r\n	 */\r\n	@Override\r\n	public Class&lt;? extends SqlSessionFactory&gt; getObjectType() {\r\n		return this.sqlSessionFactory == null ? SqlSessionFactory.class : this.sqlSessionFactory.getClass();\r\n	}\r\n\r\n	/**\r\n	 * {@inheritDoc}\r\n	 */\r\n	@Override\r\n	public boolean isSingleton() {\r\n		return true;\r\n	}\r\n\r\n	/**\r\n	 * {@inheritDoc}\r\n	 */\r\n	@Override\r\n	public void onApplicationEvent(ApplicationEvent event) {\r\n		if (failFast &amp;&amp; event instanceof ContextRefreshedEvent) {\r\n			// fail-fast -&gt; check all statements are completed\r\n			this.sqlSessionFactory.getConfiguration().getMappedStatementNames();\r\n		}\r\n	}\r\n\r\n	/*************************************** Modify begin. ***************************************/\r\n	/**\r\n	 * 刷新\r\n	 * \r\n	 * @param inputStream\r\n	 * @param resource\r\n	 * @param configuration\r\n	 * @throws NestedIOException\r\n	 */\r\n	public static void refresh(java.io.InputStream inputStream, String resource, Configuration configuration)\r\n			throws NestedIOException {\r\n		try {\r\n			XmlMapperBuilder xmlMapperBuilder = new XmlMapperBuilder(inputStream, configuration, resource,\r\n					configuration.getSqlFragments());\r\n			xmlMapperBuilder.parse1();\r\n		} catch (Exception e) {\r\n			throw new NestedIOException(\"Failed to parse mapping resource: \'\" + resource + \"\'\", e);\r\n		} finally {\r\n			ErrorContext.instance().reset();\r\n		}\r\n	}\r\n	/**************************************** Modify end. ****************************************/\r\n}</code></pre>\r\n\r\n<p>2. 在项目中添加包:&nbsp;org.apache.ibatis.builder.xml, 包中增加如下类:&nbsp;XmlMapperBuilder</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n *    Copyright 2009-2016 the original author or authors.\r\n *\r\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *    you may not use this file except in compliance with the License.\r\n *    You may obtain a copy of the License at\r\n *\r\n *       http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *    Unless required by applicable law or agreed to in writing, software\r\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *    See the License for the specific language governing permissions and\r\n *    limitations under the License.\r\n */\r\npackage org.apache.ibatis.builder.xml;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.Reader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\n\r\nimport org.apache.ibatis.builder.BaseBuilder;\r\nimport org.apache.ibatis.builder.BuilderException;\r\nimport org.apache.ibatis.builder.CacheRefResolver;\r\nimport org.apache.ibatis.builder.IncompleteElementException;\r\nimport org.apache.ibatis.builder.MapperBuilderAssistant;\r\nimport org.apache.ibatis.builder.ResultMapResolver;\r\nimport org.apache.ibatis.cache.Cache;\r\nimport org.apache.ibatis.executor.ErrorContext;\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.mapping.Discriminator;\r\nimport org.apache.ibatis.mapping.ParameterMapping;\r\nimport org.apache.ibatis.mapping.ParameterMode;\r\nimport org.apache.ibatis.mapping.ResultFlag;\r\nimport org.apache.ibatis.mapping.ResultMap;\r\nimport org.apache.ibatis.mapping.ResultMapping;\r\nimport org.apache.ibatis.parsing.XNode;\r\nimport org.apache.ibatis.parsing.XPathParser;\r\nimport org.apache.ibatis.session.Configuration;\r\nimport org.apache.ibatis.type.JdbcType;\r\nimport org.apache.ibatis.type.TypeHandler;\r\n\r\n/**\r\n * @author Clinton Begin\r\n * @description 增加解析方法，原方法不解析相同的resource(改动位置: 增加代码从108到123)\r\n */\r\npublic class XmlMapperBuilder extends BaseBuilder {\r\n\r\n	private XPathParser parser;\r\n	private MapperBuilderAssistant builderAssistant;\r\n	private Map&lt;String, XNode&gt; sqlFragments;\r\n	private String resource;\r\n\r\n	@Deprecated\r\n	public XmlMapperBuilder(Reader reader, Configuration configuration, String resource,\r\n			Map&lt;String, XNode&gt; sqlFragments, String namespace) {\r\n		this(reader, configuration, resource, sqlFragments);\r\n		this.builderAssistant.setCurrentNamespace(namespace);\r\n	}\r\n\r\n	@Deprecated\r\n	public XmlMapperBuilder(Reader reader, Configuration configuration, String resource,\r\n			Map&lt;String, XNode&gt; sqlFragments) {\r\n		this(new XPathParser(reader, true, configuration.getVariables(), new XMLMapperEntityResolver()), configuration,\r\n				resource, sqlFragments);\r\n	}\r\n\r\n	public XmlMapperBuilder(InputStream inputStream, Configuration configuration, String resource,\r\n			Map&lt;String, XNode&gt; sqlFragments, String namespace) {\r\n		this(inputStream, configuration, resource, sqlFragments);\r\n		this.builderAssistant.setCurrentNamespace(namespace);\r\n	}\r\n\r\n	public XmlMapperBuilder(InputStream inputStream, Configuration configuration, String resource,\r\n			Map&lt;String, XNode&gt; sqlFragments) {\r\n		this(new XPathParser(inputStream, true, configuration.getVariables(), new XMLMapperEntityResolver()),\r\n				configuration, resource, sqlFragments);\r\n	}\r\n\r\n	private XmlMapperBuilder(XPathParser parser, Configuration configuration, String resource,\r\n			Map&lt;String, XNode&gt; sqlFragments) {\r\n		super(configuration);\r\n		this.builderAssistant = new MapperBuilderAssistant(configuration, resource);\r\n		this.parser = parser;\r\n		this.sqlFragments = sqlFragments;\r\n		this.resource = resource;\r\n	}\r\n\r\n	public void parse() {\r\n		if (!configuration.isResourceLoaded(resource)) {\r\n			configurationElement(parser.evalNode(\"/mapper\"));\r\n			configuration.addLoadedResource(resource);\r\n			bindMapperForNamespace();\r\n		}\r\n\r\n		parsePendingResultMaps();\r\n		parsePendingChacheRefs();\r\n		parsePendingStatements();\r\n	}\r\n\r\n/*************************************** Modify begin. ***************************************/\r\n	/**\r\n	 *  增加解析方法，原方法不解析相同的resource\r\n	 */\r\n	public void parse1() {\r\n		// if (!configuration.isResourceLoaded(resource)) {\r\n		configurationElement(parser.evalNode(\"/mapper\"));\r\n		configuration.addLoadedResource(resource);\r\n		bindMapperForNamespace();\r\n		// }\r\n\r\n		parsePendingResultMaps();\r\n		parsePendingChacheRefs();\r\n		parsePendingStatements();\r\n	}\r\n/**************************************** Modify end. ****************************************/\r\n\r\n	public XNode getSqlFragment(String refid) {\r\n		return sqlFragments.get(refid);\r\n	}\r\n\r\n	private void configurationElement(XNode context) {\r\n		try {\r\n			String namespace = context.getStringAttribute(\"namespace\");\r\n			if (namespace == null || namespace.equals(\"\")) {\r\n				throw new BuilderException(\"Mapper\'s namespace cannot be empty\");\r\n			}\r\n			builderAssistant.setCurrentNamespace(namespace);\r\n			cacheRefElement(context.evalNode(\"cache-ref\"));\r\n			cacheElement(context.evalNode(\"cache\"));\r\n			parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\r\n			resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\r\n			sqlElement(context.evalNodes(\"/mapper/sql\"));\r\n			buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\r\n		} catch (Exception e) {\r\n			throw new BuilderException(\"Error parsing Mapper XML. Cause: \" + e, e);\r\n		}\r\n	}\r\n\r\n	private void buildStatementFromContext(List&lt;XNode&gt; list) {\r\n		if (configuration.getDatabaseId() != null) {\r\n			buildStatementFromContext(list, configuration.getDatabaseId());\r\n		}\r\n		buildStatementFromContext(list, null);\r\n	}\r\n\r\n	private void buildStatementFromContext(List&lt;XNode&gt; list, String requiredDatabaseId) {\r\n		for (XNode context : list) {\r\n			final XMLStatementBuilder statementParser = new XMLStatementBuilder(configuration, builderAssistant,\r\n					context, requiredDatabaseId);\r\n			try {\r\n				statementParser.parseStatementNode();\r\n			} catch (IncompleteElementException e) {\r\n				configuration.addIncompleteStatement(statementParser);\r\n			}\r\n		}\r\n	}\r\n\r\n	private void parsePendingResultMaps() {\r\n		Collection&lt;ResultMapResolver&gt; incompleteResultMaps = configuration.getIncompleteResultMaps();\r\n		synchronized (incompleteResultMaps) {\r\n			Iterator&lt;ResultMapResolver&gt; iter = incompleteResultMaps.iterator();\r\n			while (iter.hasNext()) {\r\n				try {\r\n					iter.next().resolve();\r\n					iter.remove();\r\n				} catch (IncompleteElementException e) {\r\n					// ResultMap is still missing a resource...\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n	private void parsePendingChacheRefs() {\r\n		Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = configuration.getIncompleteCacheRefs();\r\n		synchronized (incompleteCacheRefs) {\r\n			Iterator&lt;CacheRefResolver&gt; iter = incompleteCacheRefs.iterator();\r\n			while (iter.hasNext()) {\r\n				try {\r\n					iter.next().resolveCacheRef();\r\n					iter.remove();\r\n				} catch (IncompleteElementException e) {\r\n					// Cache ref is still missing a resource...\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n	private void parsePendingStatements() {\r\n		Collection&lt;XMLStatementBuilder&gt; incompleteStatements = configuration.getIncompleteStatements();\r\n		synchronized (incompleteStatements) {\r\n			Iterator&lt;XMLStatementBuilder&gt; iter = incompleteStatements.iterator();\r\n			while (iter.hasNext()) {\r\n				try {\r\n					iter.next().parseStatementNode();\r\n					iter.remove();\r\n				} catch (IncompleteElementException e) {\r\n					// Statement is still missing a resource...\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n	private void cacheRefElement(XNode context) {\r\n		if (context != null) {\r\n			configuration.addCacheRef(builderAssistant.getCurrentNamespace(), context.getStringAttribute(\"namespace\"));\r\n			CacheRefResolver cacheRefResolver = new CacheRefResolver(builderAssistant,\r\n					context.getStringAttribute(\"namespace\"));\r\n			try {\r\n				cacheRefResolver.resolveCacheRef();\r\n			} catch (IncompleteElementException e) {\r\n				configuration.addIncompleteCacheRef(cacheRefResolver);\r\n			}\r\n		}\r\n	}\r\n\r\n	private void cacheElement(XNode context) throws Exception {\r\n		if (context != null) {\r\n			String type = context.getStringAttribute(\"type\", \"PERPETUAL\");\r\n			Class&lt;? extends Cache&gt; typeClass = typeAliasRegistry.resolveAlias(type);\r\n			String eviction = context.getStringAttribute(\"eviction\", \"LRU\");\r\n			Class&lt;? extends Cache&gt; evictionClass = typeAliasRegistry.resolveAlias(eviction);\r\n			Long flushInterval = context.getLongAttribute(\"flushInterval\");\r\n			Integer size = context.getIntAttribute(\"size\");\r\n			boolean readWrite = !context.getBooleanAttribute(\"readOnly\", false);\r\n			boolean blocking = context.getBooleanAttribute(\"blocking\", false);\r\n			Properties props = context.getChildrenAsProperties();\r\n			builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props);\r\n		}\r\n	}\r\n\r\n	private void parameterMapElement(List&lt;XNode&gt; list) throws Exception {\r\n		for (XNode parameterMapNode : list) {\r\n			String id = parameterMapNode.getStringAttribute(\"id\");\r\n			String type = parameterMapNode.getStringAttribute(\"type\");\r\n			Class&lt;?&gt; parameterClass = resolveClass(type);\r\n			List&lt;XNode&gt; parameterNodes = parameterMapNode.evalNodes(\"parameter\");\r\n			List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;ParameterMapping&gt;();\r\n			for (XNode parameterNode : parameterNodes) {\r\n				String property = parameterNode.getStringAttribute(\"property\");\r\n				String javaType = parameterNode.getStringAttribute(\"javaType\");\r\n				String jdbcType = parameterNode.getStringAttribute(\"jdbcType\");\r\n				String resultMap = parameterNode.getStringAttribute(\"resultMap\");\r\n				String mode = parameterNode.getStringAttribute(\"mode\");\r\n				String typeHandler = parameterNode.getStringAttribute(\"typeHandler\");\r\n				Integer numericScale = parameterNode.getIntAttribute(\"numericScale\");\r\n				ParameterMode modeEnum = resolveParameterMode(mode);\r\n				Class&lt;?&gt; javaTypeClass = resolveClass(javaType);\r\n				JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);\r\n				@SuppressWarnings(\"unchecked\")\r\n				Class&lt;? extends TypeHandler&lt;?&gt;&gt; typeHandlerClass = (Class&lt;? extends TypeHandler&lt;?&gt;&gt;) resolveClass(\r\n						typeHandler);\r\n				ParameterMapping parameterMapping = builderAssistant.buildParameterMapping(parameterClass, property,\r\n						javaTypeClass, jdbcTypeEnum, resultMap, modeEnum, typeHandlerClass, numericScale);\r\n				parameterMappings.add(parameterMapping);\r\n			}\r\n			builderAssistant.addParameterMap(id, parameterClass, parameterMappings);\r\n		}\r\n	}\r\n\r\n	private void resultMapElements(List&lt;XNode&gt; list) throws Exception {\r\n		for (XNode resultMapNode : list) {\r\n			try {\r\n				resultMapElement(resultMapNode);\r\n			} catch (IncompleteElementException e) {\r\n				// ignore, it will be retried\r\n			}\r\n		}\r\n	}\r\n\r\n	private ResultMap resultMapElement(XNode resultMapNode) throws Exception {\r\n		return resultMapElement(resultMapNode, Collections.&lt;ResultMapping&gt;emptyList());\r\n	}\r\n\r\n	private ResultMap resultMapElement(XNode resultMapNode, List&lt;ResultMapping&gt; additionalResultMappings)\r\n			throws Exception {\r\n		ErrorContext.instance().activity(\"processing \" + resultMapNode.getValueBasedIdentifier());\r\n		String id = resultMapNode.getStringAttribute(\"id\", resultMapNode.getValueBasedIdentifier());\r\n		String type = resultMapNode.getStringAttribute(\"type\", resultMapNode.getStringAttribute(\"ofType\",\r\n				resultMapNode.getStringAttribute(\"resultType\", resultMapNode.getStringAttribute(\"javaType\"))));\r\n		String extend = resultMapNode.getStringAttribute(\"extends\");\r\n		Boolean autoMapping = resultMapNode.getBooleanAttribute(\"autoMapping\");\r\n		Class&lt;?&gt; typeClass = resolveClass(type);\r\n		Discriminator discriminator = null;\r\n		List&lt;ResultMapping&gt; resultMappings = new ArrayList&lt;ResultMapping&gt;();\r\n		resultMappings.addAll(additionalResultMappings);\r\n		List&lt;XNode&gt; resultChildren = resultMapNode.getChildren();\r\n		for (XNode resultChild : resultChildren) {\r\n			if (\"constructor\".equals(resultChild.getName())) {\r\n				processConstructorElement(resultChild, typeClass, resultMappings);\r\n			} else if (\"discriminator\".equals(resultChild.getName())) {\r\n				discriminator = processDiscriminatorElement(resultChild, typeClass, resultMappings);\r\n			} else {\r\n				List&lt;ResultFlag&gt; flags = new ArrayList&lt;ResultFlag&gt;();\r\n				if (\"id\".equals(resultChild.getName())) {\r\n					flags.add(ResultFlag.ID);\r\n				}\r\n				resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));\r\n			}\r\n		}\r\n		ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend,\r\n				discriminator, resultMappings, autoMapping);\r\n		try {\r\n			return resultMapResolver.resolve();\r\n		} catch (IncompleteElementException e) {\r\n			configuration.addIncompleteResultMap(resultMapResolver);\r\n			throw e;\r\n		}\r\n	}\r\n\r\n	private void processConstructorElement(XNode resultChild, Class&lt;?&gt; resultType, List&lt;ResultMapping&gt; resultMappings)\r\n			throws Exception {\r\n		List&lt;XNode&gt; argChildren = resultChild.getChildren();\r\n		for (XNode argChild : argChildren) {\r\n			List&lt;ResultFlag&gt; flags = new ArrayList&lt;ResultFlag&gt;();\r\n			flags.add(ResultFlag.CONSTRUCTOR);\r\n			if (\"idArg\".equals(argChild.getName())) {\r\n				flags.add(ResultFlag.ID);\r\n			}\r\n			resultMappings.add(buildResultMappingFromContext(argChild, resultType, flags));\r\n		}\r\n	}\r\n\r\n	private Discriminator processDiscriminatorElement(XNode context, Class&lt;?&gt; resultType,\r\n			List&lt;ResultMapping&gt; resultMappings) throws Exception {\r\n		String column = context.getStringAttribute(\"column\");\r\n		String javaType = context.getStringAttribute(\"javaType\");\r\n		String jdbcType = context.getStringAttribute(\"jdbcType\");\r\n		String typeHandler = context.getStringAttribute(\"typeHandler\");\r\n		Class&lt;?&gt; javaTypeClass = resolveClass(javaType);\r\n		@SuppressWarnings(\"unchecked\")\r\n		Class&lt;? extends TypeHandler&lt;?&gt;&gt; typeHandlerClass = (Class&lt;? extends TypeHandler&lt;?&gt;&gt;) resolveClass(typeHandler);\r\n		JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);\r\n		Map&lt;String, String&gt; discriminatorMap = new HashMap&lt;String, String&gt;(context.getChildren().size());\r\n		for (XNode caseChild : context.getChildren()) {\r\n			String value = caseChild.getStringAttribute(\"value\");\r\n			String resultMap = caseChild.getStringAttribute(\"resultMap\",\r\n					processNestedResultMappings(caseChild, resultMappings));\r\n			discriminatorMap.put(value, resultMap);\r\n		}\r\n		return builderAssistant.buildDiscriminator(resultType, column, javaTypeClass, jdbcTypeEnum, typeHandlerClass,\r\n				discriminatorMap);\r\n	}\r\n\r\n	private void sqlElement(List&lt;XNode&gt; list) throws Exception {\r\n		if (configuration.getDatabaseId() != null) {\r\n			sqlElement(list, configuration.getDatabaseId());\r\n		}\r\n		sqlElement(list, null);\r\n	}\r\n\r\n	private void sqlElement(List&lt;XNode&gt; list, String requiredDatabaseId) throws Exception {\r\n		for (XNode context : list) {\r\n			String databaseId = context.getStringAttribute(\"databaseId\");\r\n			String id = context.getStringAttribute(\"id\");\r\n			id = builderAssistant.applyCurrentNamespace(id, false);\r\n			if (databaseIdMatchesCurrent(id, databaseId, requiredDatabaseId)) {\r\n				sqlFragments.put(id, context);\r\n			}\r\n		}\r\n	}\r\n\r\n	private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {\r\n		if (requiredDatabaseId != null) {\r\n			if (!requiredDatabaseId.equals(databaseId)) {\r\n				return false;\r\n			}\r\n		} else {\r\n			if (databaseId != null) {\r\n				return false;\r\n			}\r\n			// skip this fragment if there is a previous one with a not null\r\n			// databaseId\r\n			if (this.sqlFragments.containsKey(id)) {\r\n				XNode context = this.sqlFragments.get(id);\r\n				String s = \"databaseId\";\r\n				if (context.getStringAttribute(s) != null) {\r\n					return false;\r\n				}\r\n			}\r\n		}\r\n		return true;\r\n	}\r\n\r\n	private ResultMapping buildResultMappingFromContext(XNode context, Class&lt;?&gt; resultType, List&lt;ResultFlag&gt; flags)\r\n			throws Exception {\r\n		String property = context.getStringAttribute(\"property\");\r\n		String column = context.getStringAttribute(\"column\");\r\n		String javaType = context.getStringAttribute(\"javaType\");\r\n		String jdbcType = context.getStringAttribute(\"jdbcType\");\r\n		String nestedSelect = context.getStringAttribute(\"select\");\r\n		String nestedResultMap = context.getStringAttribute(\"resultMap\",\r\n				processNestedResultMappings(context, Collections.&lt;ResultMapping&gt;emptyList()));\r\n		String notNullColumn = context.getStringAttribute(\"notNullColumn\");\r\n		String columnPrefix = context.getStringAttribute(\"columnPrefix\");\r\n		String typeHandler = context.getStringAttribute(\"typeHandler\");\r\n		String resultSet = context.getStringAttribute(\"resultSet\");\r\n		String foreignColumn = context.getStringAttribute(\"foreignColumn\");\r\n		boolean lazy = \"lazy\".equals(\r\n				context.getStringAttribute(\"fetchType\", configuration.isLazyLoadingEnabled() ? \"lazy\" : \"eager\"));\r\n		Class&lt;?&gt; javaTypeClass = resolveClass(javaType);\r\n		@SuppressWarnings(\"unchecked\")\r\n		Class&lt;? extends TypeHandler&lt;?&gt;&gt; typeHandlerClass = (Class&lt;? extends TypeHandler&lt;?&gt;&gt;) resolveClass(typeHandler);\r\n		JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);\r\n		return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum,\r\n				nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resultSet,\r\n				foreignColumn, lazy);\r\n	}\r\n\r\n	private String processNestedResultMappings(XNode context, List&lt;ResultMapping&gt; resultMappings) throws Exception {\r\n		String association = \"association\";\r\n		String collection = \"collection\";\r\n		String caseString = \"case\";\r\n		String select = \"select\";\r\n		if (association.equals(context.getName()) || collection.equals(context.getName()) || caseString.equals(context.getName())) {\r\n			if (context.getStringAttribute(select) == null) {\r\n				ResultMap resultMap = resultMapElement(context, resultMappings);\r\n				return resultMap.getId();\r\n			}\r\n		}\r\n		return null;\r\n	}\r\n\r\n	private void bindMapperForNamespace() {\r\n		String namespace = builderAssistant.getCurrentNamespace();\r\n		if (namespace != null) {\r\n			Class&lt;?&gt; boundType = null;\r\n			try {\r\n				boundType = Resources.classForName(namespace);\r\n			} catch (ClassNotFoundException e) {\r\n				// ignore, bound type is not required\r\n			}\r\n			if (boundType != null) {\r\n				if (!configuration.hasMapper(boundType)) {\r\n					// Spring may not know the real resource name so we set a\r\n					// flag\r\n					// to prevent loading again this resource from the mapper\r\n					// interface\r\n					// look at MapperAnnotationBuilder#loadXmlResource\r\n					configuration.addLoadedResource(\"namespace:\" + namespace);\r\n					configuration.addMapper(boundType);\r\n				}\r\n			}\r\n		}\r\n	}\r\n}</code></pre>\r\n\r\n<p>3. 在项目中添加包: org.apache.ibatis.session, 包中增加如下类:&nbsp;Configuration</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n *    Copyright 2009-2016 the original author or authors.\r\n *\r\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *    you may not use this file except in compliance with the License.\r\n *    You may obtain a copy of the License at\r\n *\r\n *       http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *    Unless required by applicable law or agreed to in writing, software\r\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *    See the License for the specific language governing permissions and\r\n *    limitations under the License.\r\n */\r\npackage org.apache.ibatis.session;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\nimport java.util.Set;\r\n\r\nimport org.apache.ibatis.binding.MapperRegistry;\r\nimport org.apache.ibatis.builder.CacheRefResolver;\r\nimport org.apache.ibatis.builder.ResultMapResolver;\r\nimport org.apache.ibatis.builder.annotation.MethodResolver;\r\nimport org.apache.ibatis.builder.xml.XMLStatementBuilder;\r\nimport org.apache.ibatis.cache.Cache;\r\nimport org.apache.ibatis.cache.decorators.FifoCache;\r\nimport org.apache.ibatis.cache.decorators.LruCache;\r\nimport org.apache.ibatis.cache.decorators.SoftCache;\r\nimport org.apache.ibatis.cache.decorators.WeakCache;\r\nimport org.apache.ibatis.cache.impl.PerpetualCache;\r\nimport org.apache.ibatis.datasource.jndi.JndiDataSourceFactory;\r\nimport org.apache.ibatis.datasource.pooled.PooledDataSourceFactory;\r\nimport org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;\r\nimport org.apache.ibatis.executor.BatchExecutor;\r\nimport org.apache.ibatis.executor.CachingExecutor;\r\nimport org.apache.ibatis.executor.Executor;\r\nimport org.apache.ibatis.executor.ReuseExecutor;\r\nimport org.apache.ibatis.executor.SimpleExecutor;\r\nimport org.apache.ibatis.executor.keygen.KeyGenerator;\r\nimport org.apache.ibatis.executor.loader.ProxyFactory;\r\nimport org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;\r\nimport org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory;\r\nimport org.apache.ibatis.executor.parameter.ParameterHandler;\r\nimport org.apache.ibatis.executor.resultset.DefaultResultSetHandler;\r\nimport org.apache.ibatis.executor.resultset.ResultSetHandler;\r\nimport org.apache.ibatis.executor.statement.RoutingStatementHandler;\r\nimport org.apache.ibatis.executor.statement.StatementHandler;\r\nimport org.apache.ibatis.io.VFS;\r\nimport org.apache.ibatis.logging.Log;\r\nimport org.apache.ibatis.logging.LogFactory;\r\nimport org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;\r\nimport org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl;\r\nimport org.apache.ibatis.logging.log4j.Log4jImpl;\r\nimport org.apache.ibatis.logging.log4j2.Log4j2Impl;\r\nimport org.apache.ibatis.logging.nologging.NoLoggingImpl;\r\nimport org.apache.ibatis.logging.slf4j.Slf4jImpl;\r\nimport org.apache.ibatis.logging.stdout.StdOutImpl;\r\nimport org.apache.ibatis.mapping.BoundSql;\r\nimport org.apache.ibatis.mapping.Environment;\r\nimport org.apache.ibatis.mapping.MappedStatement;\r\nimport org.apache.ibatis.mapping.ParameterMap;\r\nimport org.apache.ibatis.mapping.ResultMap;\r\nimport org.apache.ibatis.mapping.VendorDatabaseIdProvider;\r\nimport org.apache.ibatis.parsing.XNode;\r\nimport org.apache.ibatis.plugin.Interceptor;\r\nimport org.apache.ibatis.plugin.InterceptorChain;\r\nimport org.apache.ibatis.reflection.DefaultReflectorFactory;\r\nimport org.apache.ibatis.reflection.MetaObject;\r\nimport org.apache.ibatis.reflection.ReflectorFactory;\r\nimport org.apache.ibatis.reflection.factory.DefaultObjectFactory;\r\nimport org.apache.ibatis.reflection.factory.ObjectFactory;\r\nimport org.apache.ibatis.reflection.wrapper.DefaultObjectWrapperFactory;\r\nimport org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\r\nimport org.apache.ibatis.scripting.LanguageDriver;\r\nimport org.apache.ibatis.scripting.LanguageDriverRegistry;\r\nimport org.apache.ibatis.scripting.defaults.RawLanguageDriver;\r\nimport org.apache.ibatis.scripting.xmltags.XMLLanguageDriver;\r\nimport org.apache.ibatis.transaction.Transaction;\r\nimport org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;\r\nimport org.apache.ibatis.transaction.managed.ManagedTransactionFactory;\r\nimport org.apache.ibatis.type.JdbcType;\r\nimport org.apache.ibatis.type.TypeAliasRegistry;\r\nimport org.apache.ibatis.type.TypeHandlerRegistry;\r\n\r\n/**\r\n * @author Clinton Begin\r\n * @description 重写put，实现刷新的功能(改动位置: 增加代码从854到860)\r\n */\r\npublic class Configuration {\r\n\r\n  protected Environment environment;\r\n\r\n  protected boolean safeRowBoundsEnabled = false;\r\n  protected boolean safeResultHandlerEnabled = true;\r\n  protected boolean mapUnderscoreToCamelCase = false;\r\n  protected boolean aggressiveLazyLoading = true;\r\n  protected boolean multipleResultSetsEnabled = true;\r\n  protected boolean useGeneratedKeys = false;\r\n  protected boolean useColumnLabel = true;\r\n  protected boolean cacheEnabled = true;\r\n  protected boolean callSettersOnNulls = false;\r\n  protected boolean useActualParamName = true;\r\n\r\n  protected String logPrefix;\r\n  protected Class &lt;? extends Log&gt; logImpl;\r\n  protected Class &lt;? extends VFS&gt; vfsImpl;\r\n  protected LocalCacheScope localCacheScope = LocalCacheScope.SESSION;\r\n  protected JdbcType jdbcTypeForNull = JdbcType.OTHER;\r\n  protected Set&lt;String&gt; lazyLoadTriggerMethods = new HashSet&lt;String&gt;(Arrays.asList(new String[] { \"equals\", \"clone\", \"hashCode\", \"toString\" }));\r\n  protected Integer defaultStatementTimeout;\r\n  protected Integer defaultFetchSize;\r\n  protected ExecutorType defaultExecutorType = ExecutorType.SIMPLE;\r\n  protected AutoMappingBehavior autoMappingBehavior = AutoMappingBehavior.PARTIAL;\r\n  protected AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior = AutoMappingUnknownColumnBehavior.NONE;\r\n\r\n  protected Properties variables = new Properties();\r\n  protected ReflectorFactory reflectorFactory = new DefaultReflectorFactory();\r\n  protected ObjectFactory objectFactory = new DefaultObjectFactory();\r\n  protected ObjectWrapperFactory objectWrapperFactory = new DefaultObjectWrapperFactory();\r\n\r\n  protected boolean lazyLoadingEnabled = false;\r\n  /**\r\n   * #224 Using internal Javassist instead of OGNL\r\n   */\r\n  protected ProxyFactory proxyFactory = new JavassistProxyFactory();\r\n\r\n  protected String databaseId;\r\n  /**\r\n   * Configuration factory class.\r\n   * Used to create Configuration for loading deserialized unread properties.\r\n   *\r\n   * @see &lt;a href=\'https://code.google.com/p/mybatis/issues/detail?id=300\'&gt;Issue 300 (google code)&lt;/a&gt;\r\n   */\r\n  protected Class&lt;?&gt; configurationFactory;\r\n\r\n  protected final MapperRegistry mapperRegistry = new MapperRegistry(this);\r\n  protected final InterceptorChain interceptorChain = new InterceptorChain();\r\n  protected final TypeHandlerRegistry typeHandlerRegistry = new TypeHandlerRegistry();\r\n  protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();\r\n  protected final LanguageDriverRegistry languageRegistry = new LanguageDriverRegistry();\r\n\r\n  protected final Map&lt;String, MappedStatement&gt; mappedStatements = new StrictMap&lt;MappedStatement&gt;(\"Mapped Statements collection\");\r\n  protected final Map&lt;String, Cache&gt; caches = new StrictMap&lt;Cache&gt;(\"Caches collection\");\r\n  protected final Map&lt;String, ResultMap&gt; resultMaps = new StrictMap&lt;ResultMap&gt;(\"Result Maps collection\");\r\n  protected final Map&lt;String, ParameterMap&gt; parameterMaps = new StrictMap&lt;ParameterMap&gt;(\"Parameter Maps collection\");\r\n  protected final Map&lt;String, KeyGenerator&gt; keyGenerators = new StrictMap&lt;KeyGenerator&gt;(\"Key Generators collection\");\r\n\r\n  protected final Set&lt;String&gt; loadedResources = new HashSet&lt;String&gt;();\r\n  protected final Map&lt;String, XNode&gt; sqlFragments = new StrictMap&lt;XNode&gt;(\"XML fragments parsed from previous mappers\");\r\n\r\n  protected final Collection&lt;XMLStatementBuilder&gt; incompleteStatements = new LinkedList&lt;XMLStatementBuilder&gt;();\r\n  protected final Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = new LinkedList&lt;CacheRefResolver&gt;();\r\n  protected final Collection&lt;ResultMapResolver&gt; incompleteResultMaps = new LinkedList&lt;ResultMapResolver&gt;();\r\n  protected final Collection&lt;MethodResolver&gt; incompleteMethods = new LinkedList&lt;MethodResolver&gt;();\r\n\r\n  /**\r\n   * A map holds cache-ref relationship. The key is the namespace that\r\n   * references a cache bound to another namespace and the value is the\r\n   * namespace which the actual cache is bound to.\r\n   */\r\n  protected final Map&lt;String, String&gt; cacheRefMap = new HashMap&lt;String, String&gt;();\r\n\r\n  public Configuration(Environment environment) {\r\n    this();\r\n    this.environment = environment;\r\n  }\r\n\r\n  public Configuration() {\r\n    typeAliasRegistry.registerAlias(\"JDBC\", JdbcTransactionFactory.class);\r\n    typeAliasRegistry.registerAlias(\"MANAGED\", ManagedTransactionFactory.class);\r\n\r\n    typeAliasRegistry.registerAlias(\"JNDI\", JndiDataSourceFactory.class);\r\n    typeAliasRegistry.registerAlias(\"POOLED\", PooledDataSourceFactory.class);\r\n    typeAliasRegistry.registerAlias(\"UNPOOLED\", UnpooledDataSourceFactory.class);\r\n\r\n    typeAliasRegistry.registerAlias(\"PERPETUAL\", PerpetualCache.class);\r\n    typeAliasRegistry.registerAlias(\"FIFO\", FifoCache.class);\r\n    typeAliasRegistry.registerAlias(\"LRU\", LruCache.class);\r\n    typeAliasRegistry.registerAlias(\"SOFT\", SoftCache.class);\r\n    typeAliasRegistry.registerAlias(\"WEAK\", WeakCache.class);\r\n\r\n    typeAliasRegistry.registerAlias(\"DB_VENDOR\", VendorDatabaseIdProvider.class);\r\n\r\n    typeAliasRegistry.registerAlias(\"XML\", XMLLanguageDriver.class);\r\n    typeAliasRegistry.registerAlias(\"RAW\", RawLanguageDriver.class);\r\n\r\n    typeAliasRegistry.registerAlias(\"SLF4J\", Slf4jImpl.class);\r\n    typeAliasRegistry.registerAlias(\"COMMONS_LOGGING\", JakartaCommonsLoggingImpl.class);\r\n    typeAliasRegistry.registerAlias(\"LOG4J\", Log4jImpl.class);\r\n    typeAliasRegistry.registerAlias(\"LOG4J2\", Log4j2Impl.class);\r\n    typeAliasRegistry.registerAlias(\"JDK_LOGGING\", Jdk14LoggingImpl.class);\r\n    typeAliasRegistry.registerAlias(\"STDOUT_LOGGING\", StdOutImpl.class);\r\n    typeAliasRegistry.registerAlias(\"NO_LOGGING\", NoLoggingImpl.class);\r\n\r\n    typeAliasRegistry.registerAlias(\"CGLIB\", CglibProxyFactory.class);\r\n    typeAliasRegistry.registerAlias(\"JAVASSIST\", JavassistProxyFactory.class);\r\n\r\n    languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);\r\n    languageRegistry.register(RawLanguageDriver.class);\r\n  }\r\n\r\n  public String getLogPrefix() {\r\n    return logPrefix;\r\n  }\r\n\r\n  public void setLogPrefix(String logPrefix) {\r\n    this.logPrefix = logPrefix;\r\n  }\r\n\r\n  public Class&lt;? extends Log&gt; getLogImpl() {\r\n    return logImpl;\r\n  }\r\n\r\n  public void setLogImpl(Class&lt;? extends Log&gt; logImpl) {\r\n    if (logImpl != null) {\r\n      this.logImpl = logImpl;\r\n      LogFactory.useCustomLogging(this.logImpl);\r\n    }\r\n  }\r\n\r\n  public Class&lt;? extends VFS&gt; getVfsImpl() {\r\n    return this.vfsImpl;\r\n  }\r\n\r\n  public void setVfsImpl(Class&lt;? extends VFS&gt; vfsImpl) {\r\n    if (vfsImpl != null) {\r\n      this.vfsImpl = vfsImpl;\r\n      VFS.addImplClass(this.vfsImpl);\r\n    }\r\n  }\r\n\r\n  public boolean isCallSettersOnNulls() {\r\n    return callSettersOnNulls;\r\n  }\r\n\r\n  public void setCallSettersOnNulls(boolean callSettersOnNulls) {\r\n    this.callSettersOnNulls = callSettersOnNulls;\r\n  }\r\n\r\n  public boolean isUseActualParamName() {\r\n    return useActualParamName;\r\n  }\r\n\r\n  public void setUseActualParamName(boolean useActualParamName) {\r\n    this.useActualParamName = useActualParamName;\r\n  }\r\n\r\n  public String getDatabaseId() {\r\n    return databaseId;\r\n  }\r\n\r\n  public void setDatabaseId(String databaseId) {\r\n    this.databaseId = databaseId;\r\n  }\r\n\r\n  public Class&lt;?&gt; getConfigurationFactory() {\r\n    return configurationFactory;\r\n  }\r\n\r\n  public void setConfigurationFactory(Class&lt;?&gt; configurationFactory) {\r\n    this.configurationFactory = configurationFactory;\r\n  }\r\n\r\n  public boolean isSafeResultHandlerEnabled() {\r\n    return safeResultHandlerEnabled;\r\n  }\r\n\r\n  public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) {\r\n    this.safeResultHandlerEnabled = safeResultHandlerEnabled;\r\n  }\r\n\r\n  public boolean isSafeRowBoundsEnabled() {\r\n    return safeRowBoundsEnabled;\r\n  }\r\n\r\n  public void setSafeRowBoundsEnabled(boolean safeRowBoundsEnabled) {\r\n    this.safeRowBoundsEnabled = safeRowBoundsEnabled;\r\n  }\r\n\r\n  public boolean isMapUnderscoreToCamelCase() {\r\n    return mapUnderscoreToCamelCase;\r\n  }\r\n\r\n  public void setMapUnderscoreToCamelCase(boolean mapUnderscoreToCamelCase) {\r\n    this.mapUnderscoreToCamelCase = mapUnderscoreToCamelCase;\r\n  }\r\n\r\n  public void addLoadedResource(String resource) {\r\n    loadedResources.add(resource);\r\n  }\r\n\r\n  public boolean isResourceLoaded(String resource) {\r\n    return loadedResources.contains(resource);\r\n  }\r\n\r\n  public Environment getEnvironment() {\r\n    return environment;\r\n  }\r\n\r\n  public void setEnvironment(Environment environment) {\r\n    this.environment = environment;\r\n  }\r\n\r\n  public AutoMappingBehavior getAutoMappingBehavior() {\r\n    return autoMappingBehavior;\r\n  }\r\n\r\n  public void setAutoMappingBehavior(AutoMappingBehavior autoMappingBehavior) {\r\n    this.autoMappingBehavior = autoMappingBehavior;\r\n  }\r\n\r\n  /**\r\n   * @since 3.4.0\r\n   */\r\n  public AutoMappingUnknownColumnBehavior getAutoMappingUnknownColumnBehavior() {\r\n    return autoMappingUnknownColumnBehavior;\r\n  }\r\n\r\n  /**\r\n   * @since 3.4.0\r\n   */\r\n  public void setAutoMappingUnknownColumnBehavior(AutoMappingUnknownColumnBehavior autoMappingUnknownColumnBehavior) {\r\n    this.autoMappingUnknownColumnBehavior = autoMappingUnknownColumnBehavior;\r\n  }\r\n\r\n  public boolean isLazyLoadingEnabled() {\r\n    return lazyLoadingEnabled;\r\n  }\r\n\r\n  public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) {\r\n    this.lazyLoadingEnabled = lazyLoadingEnabled;\r\n  }\r\n\r\n  public ProxyFactory getProxyFactory() {\r\n    return proxyFactory;\r\n  }\r\n\r\n  public void setProxyFactory(ProxyFactory proxyFactory) {\r\n    if (proxyFactory == null) {\r\n      proxyFactory = new JavassistProxyFactory();\r\n    }\r\n    this.proxyFactory = proxyFactory;\r\n  }\r\n\r\n  public boolean isAggressiveLazyLoading() {\r\n    return aggressiveLazyLoading;\r\n  }\r\n\r\n  public void setAggressiveLazyLoading(boolean aggressiveLazyLoading) {\r\n    this.aggressiveLazyLoading = aggressiveLazyLoading;\r\n  }\r\n\r\n  public boolean isMultipleResultSetsEnabled() {\r\n    return multipleResultSetsEnabled;\r\n  }\r\n\r\n  public void setMultipleResultSetsEnabled(boolean multipleResultSetsEnabled) {\r\n    this.multipleResultSetsEnabled = multipleResultSetsEnabled;\r\n  }\r\n\r\n  public Set&lt;String&gt; getLazyLoadTriggerMethods() {\r\n    return lazyLoadTriggerMethods;\r\n  }\r\n\r\n  public void setLazyLoadTriggerMethods(Set&lt;String&gt; lazyLoadTriggerMethods) {\r\n    this.lazyLoadTriggerMethods = lazyLoadTriggerMethods;\r\n  }\r\n\r\n  public boolean isUseGeneratedKeys() {\r\n    return useGeneratedKeys;\r\n  }\r\n\r\n  public void setUseGeneratedKeys(boolean useGeneratedKeys) {\r\n    this.useGeneratedKeys = useGeneratedKeys;\r\n  }\r\n\r\n  public ExecutorType getDefaultExecutorType() {\r\n    return defaultExecutorType;\r\n  }\r\n\r\n  public void setDefaultExecutorType(ExecutorType defaultExecutorType) {\r\n    this.defaultExecutorType = defaultExecutorType;\r\n  }\r\n\r\n  public boolean isCacheEnabled() {\r\n    return cacheEnabled;\r\n  }\r\n\r\n  public void setCacheEnabled(boolean cacheEnabled) {\r\n    this.cacheEnabled = cacheEnabled;\r\n  }\r\n\r\n  public Integer getDefaultStatementTimeout() {\r\n    return defaultStatementTimeout;\r\n  }\r\n\r\n  public void setDefaultStatementTimeout(Integer defaultStatementTimeout) {\r\n    this.defaultStatementTimeout = defaultStatementTimeout;\r\n  }\r\n\r\n  /**\r\n   * @since 3.3.0\r\n   */\r\n  public Integer getDefaultFetchSize() {\r\n    return defaultFetchSize;\r\n  }\r\n\r\n  /**\r\n   * @since 3.3.0\r\n   */\r\n  public void setDefaultFetchSize(Integer defaultFetchSize) {\r\n    this.defaultFetchSize = defaultFetchSize;\r\n  }\r\n\r\n  public boolean isUseColumnLabel() {\r\n    return useColumnLabel;\r\n  }\r\n\r\n  public void setUseColumnLabel(boolean useColumnLabel) {\r\n    this.useColumnLabel = useColumnLabel;\r\n  }\r\n\r\n  public LocalCacheScope getLocalCacheScope() {\r\n    return localCacheScope;\r\n  }\r\n\r\n  public void setLocalCacheScope(LocalCacheScope localCacheScope) {\r\n    this.localCacheScope = localCacheScope;\r\n  }\r\n\r\n  public JdbcType getJdbcTypeForNull() {\r\n    return jdbcTypeForNull;\r\n  }\r\n\r\n  public void setJdbcTypeForNull(JdbcType jdbcTypeForNull) {\r\n    this.jdbcTypeForNull = jdbcTypeForNull;\r\n  }\r\n\r\n  public Properties getVariables() {\r\n    return variables;\r\n  }\r\n\r\n  public void setVariables(Properties variables) {\r\n    this.variables = variables;\r\n  }\r\n\r\n  public TypeHandlerRegistry getTypeHandlerRegistry() {\r\n    return typeHandlerRegistry;\r\n  }\r\n\r\n  public TypeAliasRegistry getTypeAliasRegistry() {\r\n    return typeAliasRegistry;\r\n  }\r\n\r\n  /**\r\n   * @since 3.2.2\r\n   */\r\n  public MapperRegistry getMapperRegistry() {\r\n    return mapperRegistry;\r\n  }\r\n\r\n  public ReflectorFactory getReflectorFactory() {\r\n	  return reflectorFactory;\r\n  }\r\n\r\n  public void setReflectorFactory(ReflectorFactory reflectorFactory) {\r\n	  this.reflectorFactory = reflectorFactory;\r\n  }\r\n\r\n  public ObjectFactory getObjectFactory() {\r\n    return objectFactory;\r\n  }\r\n\r\n  public void setObjectFactory(ObjectFactory objectFactory) {\r\n    this.objectFactory = objectFactory;\r\n  }\r\n\r\n  public ObjectWrapperFactory getObjectWrapperFactory() {\r\n    return objectWrapperFactory;\r\n  }\r\n\r\n  public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\r\n    this.objectWrapperFactory = objectWrapperFactory;\r\n  }\r\n\r\n  /**\r\n   * @since 3.2.2\r\n   */\r\n  public List&lt;Interceptor&gt; getInterceptors() {\r\n    return interceptorChain.getInterceptors();\r\n  }\r\n\r\n  public LanguageDriverRegistry getLanguageRegistry() {\r\n    return languageRegistry;\r\n  }\r\n\r\n  public void setDefaultScriptingLanguage(Class&lt;?&gt; driver) {\r\n    if (driver == null) {\r\n      driver = XMLLanguageDriver.class;\r\n    }\r\n    getLanguageRegistry().setDefaultDriverClass(driver);\r\n  }\r\n\r\n  public LanguageDriver getDefaultScriptingLanuageInstance() {\r\n    return languageRegistry.getDefaultDriver();\r\n  }\r\n\r\n  public MetaObject newMetaObject(Object object) {\r\n    return MetaObject.forObject(object, objectFactory, objectWrapperFactory, reflectorFactory);\r\n  }\r\n\r\n  public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {\r\n    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);\r\n    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);\r\n    return parameterHandler;\r\n  }\r\n\r\n  public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,\r\n      @SuppressWarnings(\"rawtypes\") ResultHandler resultHandler, BoundSql boundSql) {\r\n    ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);\r\n    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);\r\n    return resultSetHandler;\r\n  }\r\n\r\n  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, @SuppressWarnings(\"rawtypes\") ResultHandler resultHandler, BoundSql boundSql) {\r\n    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);\r\n    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);\r\n    return statementHandler;\r\n  }\r\n\r\n  public Executor newExecutor(Transaction transaction) {\r\n    return newExecutor(transaction, defaultExecutorType);\r\n  }\r\n\r\n  public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\r\n    executorType = executorType == null ? defaultExecutorType : executorType;\r\n    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\r\n    Executor executor;\r\n    if (ExecutorType.BATCH == executorType) {\r\n      executor = new BatchExecutor(this, transaction);\r\n    } else if (ExecutorType.REUSE == executorType) {\r\n      executor = new ReuseExecutor(this, transaction);\r\n    } else {\r\n      executor = new SimpleExecutor(this, transaction);\r\n    }\r\n    if (cacheEnabled) {\r\n      executor = new CachingExecutor(executor);\r\n    }\r\n    executor = (Executor) interceptorChain.pluginAll(executor);\r\n    return executor;\r\n  }\r\n\r\n  public void addKeyGenerator(String id, KeyGenerator keyGenerator) {\r\n    keyGenerators.put(id, keyGenerator);\r\n  }\r\n\r\n  public Collection&lt;String&gt; getKeyGeneratorNames() {\r\n    return keyGenerators.keySet();\r\n  }\r\n\r\n  public Collection&lt;KeyGenerator&gt; getKeyGenerators() {\r\n    return keyGenerators.values();\r\n  }\r\n\r\n  public KeyGenerator getKeyGenerator(String id) {\r\n    return keyGenerators.get(id);\r\n  }\r\n\r\n  public boolean hasKeyGenerator(String id) {\r\n    return keyGenerators.containsKey(id);\r\n  }\r\n\r\n  public void addCache(Cache cache) {\r\n    caches.put(cache.getId(), cache);\r\n  }\r\n\r\n  public Collection&lt;String&gt; getCacheNames() {\r\n    return caches.keySet();\r\n  }\r\n\r\n  public Collection&lt;Cache&gt; getCaches() {\r\n    return caches.values();\r\n  }\r\n\r\n  public Cache getCache(String id) {\r\n    return caches.get(id);\r\n  }\r\n\r\n  public boolean hasCache(String id) {\r\n    return caches.containsKey(id);\r\n  }\r\n\r\n  public void addResultMap(ResultMap rm) {\r\n    resultMaps.put(rm.getId(), rm);\r\n    checkLocallyForDiscriminatedNestedResultMaps(rm);\r\n    checkGloballyForDiscriminatedNestedResultMaps(rm);\r\n  }\r\n\r\n  public Collection&lt;String&gt; getResultMapNames() {\r\n    return resultMaps.keySet();\r\n  }\r\n\r\n  public Collection&lt;ResultMap&gt; getResultMaps() {\r\n    return resultMaps.values();\r\n  }\r\n\r\n  public ResultMap getResultMap(String id) {\r\n    return resultMaps.get(id);\r\n  }\r\n\r\n  public boolean hasResultMap(String id) {\r\n    return resultMaps.containsKey(id);\r\n  }\r\n\r\n  public void addParameterMap(ParameterMap pm) {\r\n    parameterMaps.put(pm.getId(), pm);\r\n  }\r\n\r\n  public Collection&lt;String&gt; getParameterMapNames() {\r\n    return parameterMaps.keySet();\r\n  }\r\n\r\n  public Collection&lt;ParameterMap&gt; getParameterMaps() {\r\n    return parameterMaps.values();\r\n  }\r\n\r\n  public ParameterMap getParameterMap(String id) {\r\n    return parameterMaps.get(id);\r\n  }\r\n\r\n  public boolean hasParameterMap(String id) {\r\n    return parameterMaps.containsKey(id);\r\n  }\r\n\r\n  public void addMappedStatement(MappedStatement ms) {\r\n    mappedStatements.put(ms.getId(), ms);\r\n  }\r\n\r\n  public Collection&lt;String&gt; getMappedStatementNames() {\r\n    buildAllStatements();\r\n    return mappedStatements.keySet();\r\n  }\r\n\r\n  public Collection&lt;MappedStatement&gt; getMappedStatements() {\r\n    buildAllStatements();\r\n    return mappedStatements.values();\r\n  }\r\n\r\n  public Collection&lt;XMLStatementBuilder&gt; getIncompleteStatements() {\r\n    return incompleteStatements;\r\n  }\r\n\r\n  public void addIncompleteStatement(XMLStatementBuilder incompleteStatement) {\r\n    incompleteStatements.add(incompleteStatement);\r\n  }\r\n\r\n  public Collection&lt;CacheRefResolver&gt; getIncompleteCacheRefs() {\r\n    return incompleteCacheRefs;\r\n  }\r\n\r\n  public void addIncompleteCacheRef(CacheRefResolver incompleteCacheRef) {\r\n    incompleteCacheRefs.add(incompleteCacheRef);\r\n  }\r\n\r\n  public Collection&lt;ResultMapResolver&gt; getIncompleteResultMaps() {\r\n    return incompleteResultMaps;\r\n  }\r\n\r\n  public void addIncompleteResultMap(ResultMapResolver resultMapResolver) {\r\n    incompleteResultMaps.add(resultMapResolver);\r\n  }\r\n\r\n  public void addIncompleteMethod(MethodResolver builder) {\r\n    incompleteMethods.add(builder);\r\n  }\r\n\r\n  public Collection&lt;MethodResolver&gt; getIncompleteMethods() {\r\n    return incompleteMethods;\r\n  }\r\n\r\n  public MappedStatement getMappedStatement(String id) {\r\n    return this.getMappedStatement(id, true);\r\n  }\r\n\r\n  public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) {\r\n    if (validateIncompleteStatements) {\r\n      buildAllStatements();\r\n    }\r\n    return mappedStatements.get(id);\r\n  }\r\n\r\n  public Map&lt;String, XNode&gt; getSqlFragments() {\r\n    return sqlFragments;\r\n  }\r\n\r\n  public void addInterceptor(Interceptor interceptor) {\r\n    interceptorChain.addInterceptor(interceptor);\r\n  }\r\n\r\n  public void addMappers(String packageName, Class&lt;?&gt; superType) {\r\n    mapperRegistry.addMappers(packageName, superType);\r\n  }\r\n\r\n  public void addMappers(String packageName) {\r\n    mapperRegistry.addMappers(packageName);\r\n  }\r\n\r\n  public &lt;T&gt; void addMapper(Class&lt;T&gt; type) {\r\n    mapperRegistry.addMapper(type);\r\n  }\r\n\r\n  public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) {\r\n    return mapperRegistry.getMapper(type, sqlSession);\r\n  }\r\n\r\n  public boolean hasMapper(Class&lt;?&gt; type) {\r\n    return mapperRegistry.hasMapper(type);\r\n  }\r\n\r\n  public boolean hasStatement(String statementName) {\r\n    return hasStatement(statementName, true);\r\n  }\r\n\r\n  public boolean hasStatement(String statementName, boolean validateIncompleteStatements) {\r\n    if (validateIncompleteStatements) {\r\n      buildAllStatements();\r\n    }\r\n    return mappedStatements.containsKey(statementName);\r\n  }\r\n\r\n  public void addCacheRef(String namespace, String referencedNamespace) {\r\n    cacheRefMap.put(namespace, referencedNamespace);\r\n  }\r\n\r\n  /**\r\n   * Parses all the unprocessed statement nodes in the cache. It is recommended\r\n   * to call this method once all the mappers are added as it provides fail-fast\r\n   * statement validation.\r\n   */\r\n  protected void buildAllStatements() {\r\n    if (!incompleteResultMaps.isEmpty()) {\r\n      synchronized (incompleteResultMaps) {\r\n        // This always throws a BuilderException.\r\n        incompleteResultMaps.iterator().next().resolve();\r\n      }\r\n    }\r\n    if (!incompleteCacheRefs.isEmpty()) {\r\n      synchronized (incompleteCacheRefs) {\r\n        // This always throws a BuilderException.\r\n        incompleteCacheRefs.iterator().next().resolveCacheRef();\r\n      }\r\n    }\r\n    if (!incompleteStatements.isEmpty()) {\r\n      synchronized (incompleteStatements) {\r\n        // This always throws a BuilderException.\r\n        incompleteStatements.iterator().next().parseStatementNode();\r\n      }\r\n    }\r\n    if (!incompleteMethods.isEmpty()) {\r\n      synchronized (incompleteMethods) {\r\n        // This always throws a BuilderException.\r\n        incompleteMethods.iterator().next().resolve();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts namespace from fully qualified statement id.\r\n   *\r\n   * @param statementId\r\n   * @return namespace or null when id does not contain period.\r\n   */\r\n  protected String extractNamespace(String statementId) {\r\n    int lastPeriod = statementId.lastIndexOf(\'.\');\r\n    return lastPeriod &gt; 0 ? statementId.substring(0, lastPeriod) : null;\r\n  }\r\n\r\n  /**\r\n   * Slow but a one time cost. A better solution is welcome.\r\n   * @param rm\r\n   */\r\n  protected void checkGloballyForDiscriminatedNestedResultMaps(ResultMap rm) {\r\n    if (rm.hasNestedResultMaps()) {\r\n      for (Map.Entry&lt;String, ResultMap&gt; entry : resultMaps.entrySet()) {\r\n        Object value = entry.getValue();\r\n        if (value instanceof ResultMap) {\r\n          ResultMap entryResultMap = (ResultMap) value;\r\n          if (!entryResultMap.hasNestedResultMaps() &amp;&amp; entryResultMap.getDiscriminator() != null) {\r\n            Collection&lt;String&gt; discriminatedResultMapNames = entryResultMap.getDiscriminator().getDiscriminatorMap().values();\r\n            if (discriminatedResultMapNames.contains(rm.getId())) {\r\n              entryResultMap.forceNestedResultMaps();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Slow but a one time cost. A better solution is welcome.\r\n   * @param rm\r\n   */\r\n  protected void checkLocallyForDiscriminatedNestedResultMaps(ResultMap rm) {\r\n    if (!rm.hasNestedResultMaps() &amp;&amp; rm.getDiscriminator() != null) {\r\n      for (Map.Entry&lt;String, String&gt; entry : rm.getDiscriminator().getDiscriminatorMap().entrySet()) {\r\n        String discriminatedResultMapName = entry.getValue();\r\n        if (hasResultMap(discriminatedResultMapName)) {\r\n          ResultMap discriminatedResultMap = resultMaps.get(discriminatedResultMapName);\r\n          if (discriminatedResultMap.hasNestedResultMaps()) {\r\n            rm.forceNestedResultMaps();\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected static class StrictMap&lt;V&gt; extends HashMap&lt;String, V&gt; {\r\n\r\n    private static final long serialVersionUID = -4950446264854982944L;\r\n    private final String name;\r\n\r\n    public StrictMap(String name, int initialCapacity, float loadFactor) {\r\n      super(initialCapacity, loadFactor);\r\n      this.name = name;\r\n    }\r\n\r\n    public StrictMap(String name, int initialCapacity) {\r\n      super(initialCapacity);\r\n      this.name = name;\r\n    }\r\n\r\n    public StrictMap(String name) {\r\n      super();\r\n      this.name = name;\r\n    }\r\n\r\n    public StrictMap(String name, Map&lt;String, ? extends V&gt; m) {\r\n      super(m);\r\n      this.name = name;\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    @Override\r\n    public V put(String key, V value) {\r\n/*************************************** Modify begin. ***************************************/\r\n    	// 如果现在状态为刷新，则刷新(先删除后添加)\r\n    	if (org.apache.ibatis.thread.Runnable.isRefresh()) {\r\n			remove(key);\r\n			org.apache.ibatis.thread.Runnable.log.debug(\"refresh key:\" + key.substring(key.lastIndexOf(\".\") + 1));\r\n		}\r\n/**************************************** Modify end. ****************************************/\r\n    	\r\n		if (containsKey(key)) {\r\n			throw new IllegalArgumentException(name\r\n					+ \" already contains value for \" + key);\r\n		}\r\n		String myKey = \".\";\r\n		if (key.contains(myKey)) {\r\n			final String shortKey = getShortName(key);\r\n			if (super.get(shortKey) == null) {\r\n				super.put(shortKey, value);\r\n			} else {\r\n				super.put(shortKey, (V) new Ambiguity(shortKey));\r\n			}\r\n		}\r\n		return super.put(key, value);\r\n    }\r\n\r\n    @Override\r\n    public V get(Object key) {\r\n      V value = super.get(key);\r\n      if (value == null) {\r\n        throw new IllegalArgumentException(name + \" does not contain value for \" + key);\r\n      }\r\n      if (value instanceof Ambiguity) {\r\n        throw new IllegalArgumentException(((Ambiguity) value).getSubject() + \" is ambiguous in \" + name\r\n            + \" (try using the full name including the namespace, or rename one of the entries)\");\r\n      }\r\n      return value;\r\n    }\r\n\r\n    private String getShortName(String key) {\r\n      final String[] keyParts = key.split(\"\\\\.\");\r\n      return keyParts[keyParts.length - 1];\r\n    }\r\n\r\n    protected static class Ambiguity {\r\n      final private String subject;\r\n\r\n      public Ambiguity(String subject) {\r\n        this.subject = subject;\r\n      }\r\n\r\n      public String getSubject() {\r\n        return subject;\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n<p>4. 在项目中添加包: org.apache.ibatis.thread, 包中增加如下类:&nbsp;Runnable</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package org.apache.ibatis.thread;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.LinkedBlockingDeque;\r\nimport java.util.concurrent.ThreadFactory;\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.apache.ibatis.session.Configuration;\r\nimport org.apache.log4j.Logger;\r\nimport org.mybatis.spring.SqlSessionFactoryBean;\r\nimport org.springframework.core.NestedIOException;\r\n\r\n/**\r\n * 刷新使用进程\r\n * @author paul\r\n * @date 2017年10月23日 下午2:11:31\r\n */\r\npublic class Runnable implements java.lang.Runnable {\r\n\r\n	public static Logger log = Logger.getLogger(Runnable.class);\r\n\r\n	private String location;\r\n	private Configuration configuration;\r\n\r\n	/**\r\n	 * 上一次刷新时间\r\n	 */\r\n	private Long beforeTime = 0L;\r\n	/**\r\n	 * 是否执行刷新\r\n	 */\r\n	private static boolean refresh = false;\r\n	/**\r\n	 * xml文件夹匹配字符串，需要根据需要修改\r\n	 */\r\n	private static String mappingPath = \"com/paulandcode/dao\";\r\n	/**\r\n	 * 延迟刷新秒数\r\n	 */\r\n	private static int delaySeconds = 10;\r\n	/**\r\n	 * 休眠时间\r\n	 */\r\n	private static int sleepSeconds = 1;\r\n	/**\r\n	 * 是否启动自动刷新功能(可写在配置文件中, 部署到Linux后, 需要关闭, 否则可能日志报错)\r\n	 */\r\n	private static boolean enabled = true;\r\n\r\n	public static boolean isRefresh() {\r\n		return refresh;\r\n	}\r\n\r\n	public Runnable(String location, Configuration configuration) {\r\n		this.location = location.replaceAll(\"\\\\\\\\\", \"/\");\r\n		this.configuration = configuration;\r\n	}\r\n\r\n	@Override\r\n	public void run() {\r\n		location = location.substring(\"file [\".length(), location.lastIndexOf(mappingPath) + mappingPath.length());\r\n		beforeTime = System.currentTimeMillis();\r\n		log.debug(\"[location] \" + location);\r\n		log.debug(\"[configuration] \" + configuration);\r\n		if (enabled) {\r\n			start(this);\r\n		}\r\n	}\r\n\r\n	public void start(final Runnable runnable) {\r\n		ThreadFactory myThreadFactory = Executors.defaultThreadFactory();\r\n		ThreadPoolExecutor threadPool = new ThreadPoolExecutor(3, 5, 1, TimeUnit.SECONDS, new LinkedBlockingDeque&lt;java.lang.Runnable&gt;(128), myThreadFactory);\r\n		java.lang.Runnable myRunable = new java.lang.Runnable() {\r\n			@Override\r\n			public void run() {\r\n				try {\r\n					Thread.sleep(delaySeconds * 1000);\r\n				} catch (InterruptedException e) {\r\n					e.printStackTrace();\r\n				}\r\n				refresh = true;\r\n				System.out.println(\"====================================================================\");\r\n				System.out.println(\"================== Enabled refresh mybatis mapper ==================\");\r\n				System.out.println(\"====================================================================\");\r\n				while (true) {\r\n					try {\r\n						runnable.refresh(location, beforeTime);\r\n					} catch (Exception e) {\r\n						e.printStackTrace();\r\n					}\r\n					try {\r\n						// 每1秒刷新一次mapper文件\r\n						Thread.sleep(sleepSeconds * 1000);\r\n					} catch (InterruptedException e) {\r\n						e.printStackTrace();\r\n					}\r\n				}\r\n			}\r\n		};\r\n		threadPool.execute(myRunable);\r\n	}\r\n\r\n	/**\r\n	 * 执行刷新\r\n	 * \r\n	 * @param filePath\r\n	 *            刷新目录\r\n	 * @param beforeTime\r\n	 *            上次刷新时间\r\n	 * @throws NestedIOException\r\n	 *             解析异常\r\n	 * @throws FileNotFoundException\r\n	 *             文件未找到\r\n	 */\r\n	public void refresh(String filePath, Long beforeTime) throws Exception {\r\n		// 本次刷新时间\r\n		Long refrehTime = System.currentTimeMillis();\r\n		List&lt;File&gt; refreshs = this.getRefreshFile(new File(filePath), beforeTime);\r\n		if (refreshs.size() &gt; 0) {\r\n			log.debug(\"refresh files:\" + refreshs.size());\r\n		}\r\n		for (File refresh : refreshs) {\r\n			System.out.println(\"Refresh file: \" + mappingPath\r\n					+ StringUtils.substringAfterLast(refresh.getAbsolutePath(), mappingPath));\r\n			log.debug(\"refresh file:\" + refresh.getAbsolutePath());\r\n			log.debug(\"refresh filename:\" + refresh.getName());\r\n			SqlSessionFactoryBean.refresh(new FileInputStream(refresh), refresh.getAbsolutePath(), configuration);\r\n		}\r\n		// 如果刷新了文件，则修改刷新时间，否则不修改\r\n		if (refreshs.size() &gt; 0) {\r\n			this.beforeTime = refrehTime;\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 获取需要刷新的文件列表\r\n	 * \r\n	 * @param dir\r\n	 *            目录\r\n	 * @param beforeTime\r\n	 *            上次刷新时间\r\n	 * @return 刷新文件列表\r\n	 */\r\n	public List&lt;File&gt; getRefreshFile(File dir, Long beforeTime) {\r\n		List&lt;File&gt; refreshs = new ArrayList&lt;File&gt;();\r\n		File[] files = dir.listFiles();\r\n		for (File file : files) {\r\n			if (file.isDirectory()) {\r\n				// 利用递归,将目录下及子目录下所有(需要刷新的)文件加入刷新文件列表\r\n				refreshs.addAll(this.getRefreshFile(file, beforeTime));\r\n			} else if (file.isFile()) {\r\n				if (this.check(file, beforeTime)) {\r\n					refreshs.add(file);\r\n				}\r\n			} else {\r\n				System.out.println(\"error file.\" + file.getName());\r\n			}\r\n		}\r\n		return refreshs;\r\n	}\r\n\r\n	/**\r\n	 * 判断文件是否需要刷新\r\n	 * \r\n	 * @param file\r\n	 *            文件\r\n	 * @param beforeTime\r\n	 *            上次刷新时间\r\n	 * @return 需要刷新返回true，否则返回false\r\n	 */\r\n	public boolean check(File file, Long beforeTime) {\r\n		return file.lastModified() &gt; beforeTime;\r\n	}\r\n}</code></pre>\r\n\r\n<p>5. 除了添加上面4个类, 还需要做两处修改</p>\r\n\r\n<p style=\"margin-left:40px\">(1)Spring与MyBatis整合的时候需要这么写:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">	&lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt;\r\n	        &lt;!-- 若基本的MyBatis配置需要改变,则指定MyBatis的配置文件路径. --&gt;\r\n			&lt;property name=\"configLocation\" value=\"classpath:config/mybatis.xml\"/&gt;\r\n			&lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\r\n	        &lt;!-- 此处还要指定mapper文件位置: --&gt;\r\n	        &lt;!-- &lt;property name=\"mapperLocations\" value=\"classpath*:com/paulandcode/dao/*Dao.xml\"/&gt; --&gt;\r\n	        &lt;!-- 此处若不配置,则需要mapper文件所在包名和DAO接口所在包完全一致. --&gt;\r\n	        &lt;!-- 这样才能使DAO接口生成的class文件和xml文件都在com/paulandcode/dao这个文件夹下,使他们一一对应. --&gt;\r\n	        &lt;!-- 本来可以省略以下代码的,但是该项目整合了jeesite的(更新mapper映射文件无需重启服务器)功能,在重写mybatis源码时需要该属性 --&gt;\r\n	        &lt;property name=\"mapperLocations\" value=\"classpath*:com/paulandcode/dao/*Dao.xml\"/&gt;\r\n	&lt;/bean&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2)在org.apache.ibatis.thread.Runnable文件中根据需要修改如下属性:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">// xml文件夹匹配字符串\r\nprivate static String mappingPath = \"com/paulandcode/dao\";\r\n// 是否启动自动刷新功能(可写在配置文件中, 部署到Linux后, 需要关闭, 否则可能日志报错)\r\nprivate static boolean enabled = true;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-23 02:00:18.302214', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3279ad93a7194ede9e6235515c9f4830', 'Oracle递归查询树结构', '<p>1. 适用的表拥有id和parent</p>\r\n\r\n<p>2. 测试数据准备</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">--菜单目录结构表\r\ncreate table tb_menu(\r\n    id number(10) not null, --主键id\r\n    title varchar2(50), --标题\r\n    parent number(10) --parent id\r\n)\r\n \r\n--父菜单\r\ninsert into tb_menu(id, title, parent) values(1, \'父菜单1\',null);\r\ninsert into tb_menu(id, title, parent) values(2, \'父菜单2\',null);\r\ninsert into tb_menu(id, title, parent) values(3, \'父菜单3\',null);\r\ninsert into tb_menu(id, title, parent) values(4, \'父菜单4\',null);\r\ninsert into tb_menu(id, title, parent) values(5, \'父菜单5\',null);\r\n--一级菜单\r\ninsert into tb_menu(id, title, parent) values(6, \'一级菜单6\',1);\r\ninsert into tb_menu(id, title, parent) values(7, \'一级菜单7\',1);\r\ninsert into tb_menu(id, title, parent) values(8, \'一级菜单8\',1);\r\ninsert into tb_menu(id, title, parent) values(9, \'一级菜单9\',2);\r\ninsert into tb_menu(id, title, parent) values(10, \'一级菜单10\',2);\r\ninsert into tb_menu(id, title, parent) values(11, \'一级菜单11\',2);\r\ninsert into tb_menu(id, title, parent) values(12, \'一级菜单12\',3);\r\ninsert into tb_menu(id, title, parent) values(13, \'一级菜单13\',3);\r\ninsert into tb_menu(id, title, parent) values(14, \'一级菜单14\',3);\r\ninsert into tb_menu(id, title, parent) values(15, \'一级菜单15\',4);\r\ninsert into tb_menu(id, title, parent) values(16, \'一级菜单16\',4);\r\ninsert into tb_menu(id, title, parent) values(17, \'一级菜单17\',4);\r\ninsert into tb_menu(id, title, parent) values(18, \'一级菜单18\',5);\r\ninsert into tb_menu(id, title, parent) values(19, \'一级菜单19\',5);\r\ninsert into tb_menu(id, title, parent) values(20, \'一级菜单20\',5);\r\n--二级菜单\r\ninsert into tb_menu(id, title, parent) values(21, \'二级菜单21\',6);\r\ninsert into tb_menu(id, title, parent) values(22, \'二级菜单22\',6);\r\ninsert into tb_menu(id, title, parent) values(23, \'二级菜单23\',7);\r\ninsert into tb_menu(id, title, parent) values(24, \'二级菜单24\',7);\r\ninsert into tb_menu(id, title, parent) values(25, \'二级菜单25\',8);\r\ninsert into tb_menu(id, title, parent) values(26, \'二级菜单26\',9);\r\ninsert into tb_menu(id, title, parent) values(27, \'二级菜单27\',10);\r\ninsert into tb_menu(id, title, parent) values(28, \'二级菜单28\',11);\r\ninsert into tb_menu(id, title, parent) values(29, \'二级菜单29\',12);\r\ninsert into tb_menu(id, title, parent) values(30, \'二级菜单30\',13);\r\ninsert into tb_menu(id, title, parent) values(31, \'二级菜单31\',14);\r\ninsert into tb_menu(id, title, parent) values(32, \'二级菜单32\',15);\r\ninsert into tb_menu(id, title, parent) values(33, \'二级菜单33\',16);\r\ninsert into tb_menu(id, title, parent) values(34, \'二级菜单34\',17);\r\ninsert into tb_menu(id, title, parent) values(35, \'二级菜单35\',18);\r\ninsert into tb_menu(id, title, parent) values(36, \'二级菜单36\',19);\r\ninsert into tb_menu(id, title, parent) values(37, \'二级菜单37\',20);\r\n--三级菜单\r\ninsert into tb_menu(id, title, parent) values(38, \'三级菜单38\',21);\r\ninsert into tb_menu(id, title, parent) values(39, \'三级菜单39\',22);\r\ninsert into tb_menu(id, title, parent) values(40, \'三级菜单40\',23);\r\ninsert into tb_menu(id, title, parent) values(41, \'三级菜单41\',24);\r\ninsert into tb_menu(id, title, parent) values(42, \'三级菜单42\',25);\r\ninsert into tb_menu(id, title, parent) values(43, \'三级菜单43\',26);\r\ninsert into tb_menu(id, title, parent) values(44, \'三级菜单44\',27);\r\ninsert into tb_menu(id, title, parent) values(45, \'三级菜单45\',28);\r\ninsert into tb_menu(id, title, parent) values(46, \'三级菜单46\',28);\r\ninsert into tb_menu(id, title, parent) values(47, \'三级菜单47\',29);\r\ninsert into tb_menu(id, title, parent) values(48, \'三级菜单48\',30);\r\ninsert into tb_menu(id, title, parent) values(49, \'三级菜单49\',31);\r\ninsert into tb_menu(id, title, parent) values(50, \'三级菜单50\',31);\r\ncommit;\r\n \r\nselect * from tb_menu;</code></pre>\r\n\r\n<p>3. 查询某个节点的所有后代</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select * from tb_menu m start with m.id=1 connect by m.parent=prior m.id;</code></pre>\r\n\r\n<p>4. 查询某个节点的所有祖宗</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select * from tb_menu m start with m.id=38 connect by prior m.parent=m.id;</code></pre>\r\n\r\n<p>5.&nbsp;查询与一个节点同级的所有节点</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">with tmp as(\r\n      select a.*, level leaf        \r\n      from tb_menu a                \r\n      start with a.parent is null     \r\n      connect by a.parent = prior a.id)\r\nselect *                               \r\nfrom tmp                             \r\nwhere leaf = (select leaf from tmp where id = 50);</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 06:32:42.389139', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('327acc92bbd24971ab1e00b6efb0d8a0', 'Docker零碎笔记', '<p>001.查看镜像、容器、数据卷所占用的空间:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;docker system df</p>\r\n\r\n<p>002.具体查看镜像内的历史记录:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;docker history nginx:v2</p>\r\n\r\n<p>003.使用Dockerfile构建镜像:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;docker build -t myip .</p>\r\n\r\n<p>004.使用compose对docker容器进行编排管理时，需要编写docker-compose.yml文件,yml文件换行后的缩进，不允许使用tab键字符，只能使用空格，而空格的数量也有要求</p>\r\n\r\n<p>005.docker-compose:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;负责实现对 Docker 容器集群的快速编排</p>\r\n\r\n<p>006.docker-machine:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;负责在多种平台上快速安装docker环境</p>\r\n\r\n<p>007.swarm mode:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;负责将多个docker主机封装为单个大型的虚拟dockerd主机,快速打造一套容器云平台</p>\r\n\r\n<p>008.安装virtualbox:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;sudo apt-get purge virtualbox<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;sudo apt-get<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; install linux-generic<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; linux-image-generic<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; linux-headers-generic<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; linux-signed-generic</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;sudo apt-get<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; install virtualbox</p>\r\n\r\n<p>009.docker镜像加速器下载速度对比:<br />\r\n&nbsp;&nbsp; &nbsp;表格:</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n	<tbody>\r\n		<tr>\r\n			<td>加速器</td>\r\n			<td>地址</td>\r\n			<td>Httpd,177MB下载镜像耗时</td>\r\n			<td>MySQL,407MB下载镜像耗时</td>\r\n			<td>Nginx,109MB下载镜像耗时</td>\r\n		</tr>\r\n		<tr>\r\n			<td>官方</td>\r\n			<td>https://registry.docker-cn.com</td>\r\n			<td>52 s</td>\r\n			<td>42 s</td>\r\n			<td>20 s</td>\r\n		</tr>\r\n		<tr>\r\n			<td>阿里</td>\r\n			<td>https://2lqq34jg.mirror.aliyuncs.com</td>\r\n			<td>36 s</td>\r\n			<td>38 s</td>\r\n			<td>20 s</td>\r\n		</tr>\r\n		<tr>\r\n			<td>网易</td>\r\n			<td>http://hub-mirror.c.163.com</td>\r\n			<td>67 s</td>\r\n			<td>73 s</td>\r\n			<td>475 s</td>\r\n		</tr>\r\n		<tr>\r\n			<td>官方错误</td>\r\n			<td>http://registry.docker-cn.com</td>\r\n			<td>1770 s</td>\r\n			<td>不忍测试</td>\r\n			<td>闲时再测</td>\r\n		</tr>\r\n		<tr>\r\n			<td>不使用</td>\r\n			<td>---</td>\r\n			<td>一个字慢！</td>\r\n			<td>不忍测试</td>\r\n			<td>闲时再测</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>结论：<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1、使用加速器后，下载速度飞快,家庭100Mb宽带环境下，镜像下载速度能达到3-5MB/s以上。<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2、由于Docker采用分层文件系统，不同镜像公用一些相同的层文件，在下载后续镜像时下载速度更快，比如阿里加速器下载MySQL镜像，&ldquo;达到&rdquo;了10.7MB/s；<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3、加速器地址一定要写对，官方加速器的不能写成http，一定要写https，否则无加速效果；<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;4、加速器的加速效果差不多？官方的、阿里的、网易163的加速器效果如下：阿里&nbsp;&gt;官方&nbsp;&gt;&nbsp;网易&nbsp;&gt;&nbsp;不加速<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;5、Docker支持同时配置多个加速器，建议依上面的次序同时配置多个加速器。<br />\r\n&nbsp;&nbsp; &nbsp;代码:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &quot;registry-mirrors&quot;: [<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&quot;https://2lqq34jg.mirror.aliyuncs.com&quot;,<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&quot;https://registry.docker-cn.com&quot;,<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&quot;http://hub-mirror.c.163.com&quot;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ]<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p>\r\n\r\n<p>010.docker的run命令:&nbsp;&nbsp; &nbsp;docker run -it -v /usr/java/:/mnt/software/ myubuntu /bin/bash<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;docker run &lt;相关参数&gt; &lt;镜像ID 或者 仓库名:标签名&gt; &lt;初始命令&gt;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;相关参数包括： &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;-i：表示以&ldquo;交互模式&rdquo;运行容器 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;-t：表示容器启动后会进入其命令行 &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;-v：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;初始命令表示一旦容器启动，需要运行的命令，此时使用&ldquo;/bin/bash&rdquo;，表示什么也不做，只需进入命令行即可<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;退出容器使用Ctrl+d或输入exit<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;再次启动已启动过但现在是关闭的容器: docker start 容器ID或容器名<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;这个命令只会启动容器，不会进入容器。要进入容器得用命令: docker attach 容器ID或容器名</p>\r\n\r\n<p>011.docker如何查看已存在的容器所挂载的目录: &nbsp;docker inspect container_name | grep Mounts -A 20</p>\r\n\r\n<p>012.docker启动mysql容器(初次启动需要之指定root用户密码): docker run -e MYSQL_ROOT_PASSWORD=root -p 33066:3306 --name mysql-5.7 -d mysql:5.7<br />\r\n&nbsp;&nbsp; &nbsp;-v /data/mysql/my.cnf:/etc/mysql/mysql.conf.d<br />\r\n&nbsp;&nbsp; &nbsp;-v /data/mysql/logs:/usr/local/mysql/logs<br />\r\n&nbsp;&nbsp; &nbsp;-v /data/mysql/data:/var/lib/mysql<br />\r\n013.docker进入mysql容器: docker exec -it mysql-5.7 bash &nbsp;&nbsp; &nbsp;然后进入mysql服务:mysql -uroot -p</p>\r\n\r\n<p>014.docker启动tomcat: docker run --mount source=tomcat-8.5-xyj,target=/usr/local/tomcat/webapps -p 8081:8080 --name tomcat-8.5 -d tomcat:8.5</p>\r\n\r\n<p>015.DockerCompose通过compose工程名以及服务名从dockerEngine获取当前所有含有此标记的容器以检查当前工程所包含的服务状态,根据当前状态为每个服务制定接下来的动作<br />\r\n&nbsp;&nbsp; &nbsp;a. 若容器不存在，则服务动作设置为创建（create）<br />\r\n&nbsp;&nbsp; &nbsp;b. 若容器存在但设置不允许重建，则服务动作设置为启动（start）<br />\r\n&nbsp;&nbsp; &nbsp;c. 若容器配置发生变化（config-hash）或者设置强制重建标志，则服务动作设置为重建（recreate）<br />\r\n&nbsp;&nbsp; &nbsp;d. 若容器状态为停止，则服务动作设置为启动（start）<br />\r\n&nbsp;&nbsp; &nbsp;e. 若容器状态为运行但其依赖容器需要重建，则服务状态设置为重建（recreate）<br />\r\n&nbsp;&nbsp; &nbsp;f. &nbsp;若容器状态为运行其无配置改变则不作操作</p>\r\n\r\n<p>016.mysql的docker-compose.yml文件示例:<br />\r\nversion: &quot;3.4&quot;</p>\r\n\r\n<p>services:<br />\r\n&nbsp;mysql:<br />\r\n&nbsp; image: mysql:5.7<br />\r\n&nbsp; container_name: common_mysql<br />\r\n&nbsp; restart: always<br />\r\n&nbsp; environment:<br />\r\n&nbsp; &nbsp;MYSQL_ROOT_PASSWORD: root<br />\r\n&nbsp; ports:<br />\r\n&nbsp; &nbsp;- &quot;3306:3306&quot;<br />\r\n&nbsp; networks:<br />\r\n&nbsp; &nbsp;- common_mysql<br />\r\n&nbsp; volumes:<br />\r\n&nbsp; &nbsp;- type: volume<br />\r\n&nbsp; &nbsp; &nbsp;source: mysql_data<br />\r\n&nbsp; &nbsp; &nbsp;target: /var/lib/mysql<br />\r\n&nbsp; &nbsp;- type: volume<br />\r\n&nbsp; &nbsp; &nbsp;source: mysql_conf<br />\r\n&nbsp; &nbsp; &nbsp;target: /etc/mysql/my.cnf</p>\r\n\r\n<p>volumes:<br />\r\n&nbsp;mysql_data:<br />\r\n&nbsp;mysql_conf:</p>\r\n\r\n<p>networks:<br />\r\n&nbsp;common_mysql:</p>\r\n\r\n<p>017.docker查看某个容器大小: 进入docker容器默认位置:/var/lib/docker/containers &nbsp;&nbsp; &nbsp;文件夹名称即为容器名,文件夹大小即为容器大小</p>', '2018-07-16 07:31:30.884941', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('33b4a9a401c54fe891e8e2728de51c74', 'Spring Boot 项目前端页面跳转的两种方式', '<p>0. 文件的目录结构</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/Spring%20Boot%20%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/01.jpg\" style=\"height:342px; width:473px\" /></p>\r\n\r\n<p>1. 通过前端直接跳转, 可以跳转到上图中的test1.html(这相当于非Spring Boot项目中WEB-INF外的html页面), 跳转按钮代码如下:</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;button onclick=\"location.href=\'test1.html\'\"&gt;test1&lt;/button&gt;</code></pre>\r\n\r\n<p>2. 通过后端间接跳转,&nbsp;可以跳转到上图中的test2.html(这相当于非Spring Boot项目中WEB-INF里的jsp页面, 这里也能像jsp那样传递变量)</p>\r\n\r\n<p style=\"margin-left:40px\">2.1 导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.2 后端代码</p>\r\n\r\n<p style=\"margin-left:80px\">2.2.1 不传递参数</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n/**\r\n * 测试\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 2018/12/17 16:46\r\n */\r\n@Controller\r\npublic class TestController {\r\n    @RequestMapping(value = \"testHtml\")\r\n    public String test() {\r\n        return \"test2\";\r\n    }\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:80px\">2.2.2 传递参数</p>\r\n\r\n<p style=\"margin-left:120px\">2.2.2.1 实体类:</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.ribeen.entity;\r\n\r\n/**\r\n * ce\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 2018/12/17 17:13\r\n */\r\npublic class Test {\r\n    private String id;\r\n    private String name;\r\n\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:120px\">2.2.2.2 Controller:</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.ribeen.controller;\r\n\r\nimport com.ribeen.entity.Test;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n/**\r\n * 测试\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 2018/12/17 16:46\r\n */\r\n@Controller\r\npublic class TestController {\r\n    @RequestMapping(value = \"testHtml\")\r\n    public String test(Model model) {\r\n        model.addAttribute(\"param1\", \"字符串\");\r\n        Test test = new Test();\r\n        test.setId(\"123\");\r\n        test.setName(\"张三\");\r\n        model.addAttribute(\"param2\", test);\r\n        return \"test2\";\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:120px\">2.2.2.3&nbsp;test2.html代码</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"&gt;\r\n&lt;meta charset=\"utf-8\"&gt;\r\n&lt;head&gt;&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;span th:text=\"${param1}\"&gt;&lt;/span&gt;\r\n    &lt;span th:text=\"${param2.id}\"&gt;&lt;/span&gt;\r\n    &lt;span th:text=\"${param2.name}\"&gt;&lt;/span&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.3&nbsp;前端跳转按钮代码:</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;button onclick=\"location.href=\'testHtml\'\"&gt;test2&lt;/button&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">&nbsp;</p>', '2018-12-17 09:32:50.048042', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('33d34504c8b145f597eeba81501d6dc9', '使用FastJson时报错', '<p>1. 错误信息</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">Exception in thread \"main\" com.alibaba.fastjson.JSONException: syntax error, expect {, actual ], pos 39\r\n	at com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze(JavaBeanDeserializer.java:212)\r\n	at com.alibaba.fastjson.parser.deserializer.ASMJavaBeanDeserializer.parseRest(ASMJavaBeanDeserializer.java:96)\r\n	at Fastjson_ASM_User_1.deserialze(Unknown Source)\r\n	at com.alibaba.fastjson.parser.DefaultJSONParser.parseObject(DefaultJSONParser.java:513)\r\n	at com.alibaba.fastjson.JSON.parseObject(JSON.java:244)\r\n	at com.alibaba.fastjson.JSON.parseObject(JSON.java:220)\r\n	at com.alibaba.fastjson.JSON.parseObject(JSON.java:179)\r\n	at com.alibaba.fastjson.JSON.parseObject(JSON.java:323)\r\n	at com.jadyer.main.JSONDemoDetail.main(JSONDemoDetail.java:18)</code></pre>\r\n\r\n<p>2. 解决方法</p>\r\n\r\n<p style=\"margin-left:40px\">使用FastJson序列化的对象的属性中, 不能有对象数组, 要改成List</p>', '2018-09-08 10:54:59.806290', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('37bbd201ffc14eac94f32e02ea554d7d', 'Linux虚拟机桥接联网的配置文件', '<p>Linux虚拟机桥接联网时需要如下两个配置文件:</p>\r\n\r\n<p style=\"margin-left:40px\">1.&nbsp;/etc/resolv.conf</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\">nameserver 8.8.8.8</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2. /etc/sysconfig/network-scripts/ifcfg-eno16777736</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\">TYPE=\"Ethernet\"\r\nBOOTPROTO=\"static\"\r\nIPADDR=\"192.168.0.66\"\r\nNETWORK=\"255.255.255.0\"\r\nGATEWAY=\"192.168.0.1\"\r\nDNS1=\"8.8.8.8\"\r\nDEFROUTE=\"yes\"\r\nPEERDNS=\"yes\"\r\nPEERROUTES=\"yes\"\r\nIPV4_FAILURE_FATAL=\"no\"\r\nIPV6INIT=\"yes\"\r\nIPV6_AUTOCONF=\"yes\"\r\nIPV6_DEFROUTE=\"yes\"\r\nIPV6_PEERDNS=\"yes\"\r\nIPV6_PEERROUTES=\"yes\"\r\nIPV6_FAILURE_FATAL=\"no\"\r\nNAME=\"eno16777736\"\r\nUUID=\"96aa40e3-de9e-4074-b4ad-760d28ae2b66\"\r\nDEVICE=\"eno16777736\"\r\nONBOOT=\"yes\"</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 06:58:56.548871', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('38771e365481437f90ba27903b5850a8', 'MySQL忘记密码解决方案', '<p>1. 在配置文件/etc/my.cnf添加一行: skip-grant-tables, 跳过密码验证.&nbsp;</p>\r\n\r\n<p>2.&nbsp;重启mysql数据库主进程</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/etc/init.d/mysqld restart</code></pre>\r\n\r\n<p>3. 不使用密码登录数据库, 然后修改密码</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; use mysql;\r\n Database changed\r\nmysql&gt; update user set authentication_string=password(\'yourNewPassword\') where user=\'root\' and host=\'localhost\'; \r\n Query OK, 1 row affected (0.00 sec)\r\nmysql&gt; flush privileges;\r\n Query OK, 0 rows affected (0.00 sec)\r\nmysql&gt; exit</code></pre>\r\n\r\n<p>这里需要修改的字段是authentication_string, 这点和老版本不同. 旧版本为</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">set password=password(‘admin\')</code></pre>\r\n\r\n<p>4. 如果你设置的密码太简单, 则在数据库执行任何命令都会报类似如下错误(需要跳到第1步重新开始):&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; show databases;\r\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\r\nmysql&gt; use mysql;\r\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</code></pre>\r\n\r\n<p>5.&nbsp;如果只想设置简单密码需要修改两个全局参数:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; set global validate_password_policy=0;\r\n Query OK, 0 rows affected (0.00 sec)\r\nmysql&gt; set global validate_password_length=1; \r\n Query OK, 0 rows affected (0.00 sec)\r\nmysql&gt; update user set authentication_string=password(\'yourNewPassword\') where user=\'root\' and host=\'localhost\';\r\n Query OK, 1 row affected (0.00 sec)\r\nmysql&gt; use mysql;\r\n Database changed</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-18 07:49:37.557580', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('39880fde5c9544d4b1a2c14320544e7f', 'ORACLE同步两张表: 通过某一个字段个来同步另一个字段', '<p>&nbsp;根据相同的NAME字段来同步TASK字段</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">update T_ALARM_INFO a set a.TASK = (SELECT DISTINCT TASK FROM TEST b WHERE a.NAME = b.NAME)</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-12-04 12:26:31.128016', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3a72a10df2a5456cb8f1f53462f66250', 'Oracle的sysdate和系统时间不一致', '<p>1.&nbsp;<strong>SELECT DBTIMEZONE FROM DUAL;</strong>此时返回的结果是&#39;+00:00&#39;，这就意味着当前的Oracle时间是GMT+0.00，就是格林威治标准时间</p>\r\n\r\n<p>2.&nbsp;修改Oracle的时区设置。</p>\r\n\r\n<p><strong>ALTER DATABASE SET TIME_ZONE=&#39;+08:00&#39;;</strong>修改之后，重新启动Oracle数据库</p>\r\n\r\n<p>3. 执行select sysdate from dual后系统时间一致</p>', '2018-09-16 06:48:09.168279', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3ae146bfd6b641e1a99f83737b6dcdfe', 'Arrays.asList返回的List无法直接使用add()方法, Java报错: java.lang.UnsupportedOperationException', '<p>1. 报错代码</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">String[] array = {\"1\",\"2\",\"3\",\"4\",\"5\"};\r\nList&lt;String&gt; list = Arrays.asList(array);\r\nlist.add(\"6\");</code></pre>\r\n\r\n<p>2. 报错信息</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">Exception in thread \"main\" java.lang.UnsupportedOperationException\r\n    at java.util.AbstractList.add(AbstractList.java:148)\r\n    at java.util.AbstractList.add(AbstractList.java:108)\r\n    at com.paulandcode.test.ListTest.main(ListTest.java:11)\r\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n    at java.lang.reflect.Method.invoke(Method.java:498)</code></pre>\r\n\r\n<p>3. 错误分析</p>\r\n\r\n<p>调用了Arrays.asList()生产的List的add、remove方法时报异常, 这是由Arrays.asList() 返回的是Arrays的内部类ArrayList, &nbsp;而不是java.util.ArrayList. Arrays的内部类ArrayList和java.util.ArrayList都是继承AbstractList, remove、add等方法AbstractList中是默认throw UnsupportedOperationException而且不作任何操作. java.util.ArrayList重新了这些方法而Arrays的内部类ArrayList没有重新, 所以会抛出异常.&nbsp;</p>\r\n\r\n<p>4. 解决错误</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">String[] array = {\"1\",\"2\",\"3\",\"4\",\"5\"};\r\nList&lt;String&gt; list = Arrays.asList(array);\r\nList&lt;String&gt; arrList = new ArrayList&lt;String&gt;(list);\r\narrList.add(\"6\");</code></pre>\r\n\r\n<p>&nbsp;</p>', '2019-05-29 11:16:10.725398', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3cf53d5d7b4b4128abc7869c44a4ae70', 'Linux下使用命令行导入, 导出MySQL数据库', '<p>1. 导出数据库</p>\r\n\r\n<p style=\"margin-left:40px\">(1)只导出表结构</p>\r\n\r\n<p style=\"margin-left:40px\">格式:&nbsp;mysqldump -u用户名 -p密码 -d 数据库名 &gt; 文件名.sql</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/usr/local/mysql/bin/mysqldump -uroot -p -d abc &gt; file.sql</code></pre>\r\n\r\n<p style=\"margin-left:40px\">若-p后不加密码, 则敲回车后会提示输入密码</p>\r\n\r\n<p style=\"margin-left:40px\">(2)导出表结构和数据</p>\r\n\r\n<p style=\"margin-left:40px\">格式:&nbsp;mysqldump -u用户名 -p密码 数据库名 &gt; 文件名.sql</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/usr/local/mysql/bin/mysqldump -uroot -p abc &gt; file.sql</code></pre>\r\n\r\n<p>2. 导入数据库</p>\r\n\r\n<p style=\"margin-left:40px\">(1)使用MySQL的Bash命令</p>\r\n\r\n<p style=\"margin-left:40px\">格式:&nbsp;mysql -u用户名 -p密码 数据库名 &lt; 文件名.sql</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">mysql -uroot -p abc &lt; file.sql</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2)进入MySQL执行命令</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;1&gt;进入MySQL</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">mysql -uroot -p</code></pre>\r\n\r\n<p style=\"margin-left:80px\">&lt;2&gt;选择数据库</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">use abc;</code></pre>\r\n\r\n<p style=\"margin-left:80px\">&lt;3&gt;设置数据库编码, 这个很关键, 否则会乱码</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">set names utf8;</code></pre>\r\n\r\n<p style=\"margin-left:80px\">&lt;4&gt;导入数据</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">source /home/abc/file.sql;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-18 07:31:57.866816', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3e212bcc52fc4c048b590b1b03a5d6d3', '装饰者模式', '<p>1. 应用场景</p>\r\n\r\n<p style=\"margin-left:40px\">向一个现有的对象添加新的功能, 同时又不改变其结构. 可以扩展一个类的功能, 动态增加功能, 动态撤销.&nbsp;</p>\r\n\r\n<p>2.&nbsp;示例代码</p>\r\n\r\n<p style=\"margin-left:40px\">2.1 对象公共接口</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 英雄\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/16/2018 9:49 AM\r\n */\r\npublic interface Hero {\r\n    /**\r\n     * 攻击\r\n     */\r\n    void attack();\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.2 已有对象实体类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 盲僧\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/16/2018 9:55 AM\r\n */\r\npublic class BlindMonk implements Hero {\r\n    @Override\r\n    public void attack() {\r\n        System.out.print(\"盲僧进行普通攻击! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 吉格斯\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/16/2018 9:57 AM\r\n */\r\npublic class Ziggs implements Hero {\r\n    @Override\r\n    public void attack() {\r\n        System.out.print(\"吉格斯进行普通攻击! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.3 抽象装饰类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 学了技能的英雄(抽象装饰类)\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/16/2018 10:01 AM\r\n */\r\npublic abstract class SkilledHero implements Hero {\r\n    /**\r\n     * 学习了(装饰了)技能的英雄\r\n     */\r\n    Hero decoratedHero;\r\n\r\n    protected SkilledHero(Hero hero) {\r\n        this.decoratedHero = hero;\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.4 实体装饰类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 学了Q技能的英雄(实体装饰类)\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/16/2018 10:05 AM\r\n */\r\npublic class QSkilledHero extends SkilledHero {\r\n    public QSkilledHero(Hero hero) {\r\n        super(hero);\r\n    }\r\n\r\n    @Override\r\n    public void attack() {\r\n        decoratedHero.attack();\r\n        System.out.println(\"使用Q技能攻击! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 学了R技能的英雄(实体装饰类)\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/16/2018 10:05 AM\r\n */\r\npublic class RSkilledHero extends SkilledHero {\r\n    public RSkilledHero(Hero hero) {\r\n        super(hero);\r\n    }\r\n\r\n    @Override\r\n    public void attack() {\r\n        decoratedHero.attack();\r\n        System.out.println(\"使用R技能攻击! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.5 测试</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 测试\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/31 8:39\r\n */\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        Hero blindMonk = new BlindMonk();\r\n        Hero qSkilledBlindMonk = new QSkilledHero(new BlindMonk());\r\n        Hero rSkilledZiggs = new RSkilledHero(new Ziggs());\r\n        System.out.println(\"没有学习技能的盲僧进行攻击: \");\r\n        blindMonk.attack();\r\n        System.out.println();\r\n        System.out.println();\r\n\r\n        System.out.println(\"学习了Q技能的盲僧进行攻击: \");\r\n        qSkilledBlindMonk.attack();\r\n        System.out.println();\r\n\r\n        System.out.println(\"学习了R技能的吉格斯进行攻击: \");\r\n        rSkilledZiggs.attack();\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">输出</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">没有学习技能的盲僧进行攻击: \r\n盲僧进行普通攻击! \r\n\r\n学习了Q技能的盲僧进行攻击: \r\n盲僧进行普通攻击! 使用Q技能攻击! \r\n\r\n学习了R技能的吉格斯进行攻击: \r\n吉格斯进行普通攻击! 使用R技能攻击! </code></pre>\r\n\r\n<p>3. 优点</p>\r\n\r\n<p>装饰类和被装饰类可以独立发展, 不会相互耦合, 装饰模式是继承的一个替代模式, 装饰模式可以动态扩展一个实现类的功能</p>\r\n\r\n<p>4. 缺点</p>\r\n\r\n<p>多层装饰比较复杂</p>', '2018-12-05 13:09:56.830336', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3e83523263674d6daba8bf62a2610c72', 'MySQL5.7语句GROUP BY报错', '<p>mysql命令gruop by报错this is incompatible with sql_mode=only_full_group_by<br />\r\n&nbsp;&nbsp; &nbsp;在mysql 工具 搜索或者插入数据时报下面错误：<br />\r\n&nbsp;&nbsp; &nbsp;ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;database_tl.emp.id&#39; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;原因：<br />\r\n&nbsp;&nbsp; &nbsp;看一下group by的语法：<br />\r\n&nbsp;&nbsp; &nbsp;select 选取分组中的列+聚合函数 from 表名称 group by 分组的列&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;从语法格式来看，是先有分组，再确定检索的列，检索的列只能在参加分组的列中选。<br />\r\n&nbsp;&nbsp; &nbsp;我当前Mysql版本5.7.17，<br />\r\n&nbsp;&nbsp; &nbsp;再看一下ONLY_FULL_GROUP_BY的意思是：对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中，也就是说查出来的列必须在group by后面出现否则就会报错，或者这个字段出现在聚合函数里面。<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;查看mysql版本命令：select version();<br />\r\n&nbsp;&nbsp; &nbsp;查看sql_model参数命令：<br />\r\n&nbsp;&nbsp; &nbsp;SELECT @@GLOBAL.sql_mode;<br />\r\n&nbsp;&nbsp; &nbsp;SELECT @@SESSION.sql_mode;<br />\r\n&nbsp;&nbsp; &nbsp;发现：<br />\r\n&nbsp;&nbsp; &nbsp;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br />\r\n&nbsp;&nbsp; &nbsp;第一项默认开启ONLY_FULL_GROUP_BY，<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;解决方法：<br />\r\n&nbsp;&nbsp; &nbsp;1.只选择出现在group by后面的列，或者给列增加聚合函数；（不推荐）<br />\r\n&nbsp;&nbsp; &nbsp;2.命令行输入：<br />\r\n&nbsp;&nbsp; &nbsp;set @@GLOBAL.sql_mode=&#39;&#39;;<br />\r\n&nbsp;&nbsp; &nbsp;set sql_mode =&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;默认关掉ONLY_FULL_GROUP_BY！<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;这个时候 在用工具select 一下<br />\r\n&nbsp;&nbsp; &nbsp;SELECT @@sql_mode;<br />\r\n&nbsp;&nbsp; &nbsp;SELECT @@GLOBAL.sql_mode;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;发现已经不存在ONLY_FULL_GROUP_BY ，感觉已经OK。但是如果你重启Mysql服务的话，发现ONLY_FULL_GROUP_BY还是会存在的<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;想要彻底解决这个问题 就得去改my.ini 配置（如果你们mysql 没有这个文件，就把my-default.ini 改成my.ini，我这个版本就是没有my.ini配置问题）<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;在 [mysqld]和[mysql]下添加<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;sql-mode=&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</p>', '2018-07-14 23:05:56.891287', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('3f9d3bea949b436d925cdd10382874bc', 'Windows如何新建以\".\"开头的文件', '<p>1. 问题描述</p>\r\n\r\n<p style=\"margin-left:40px\">Windows下, 如果新建以&quot;.&quot;开头的文件, 会提示: 必须键入文件名.</p>\r\n\r\n<p>2. 解决方法</p>\r\n\r\n<p style=\"margin-left:40px\">在文件名后面再加个&quot;.&quot;, 例如&quot;.gitignore.&quot;, 则可以新建.gitignore文件</p>', '2018-07-16 05:27:06.572263', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('4124fad1f97b4af98ccc92dba218033c', 'Mabatis字段下划线自动转换为驼峰', '<p>1. spring-jdbc.xml配置文件中Spring与MyBatis整合部分</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">&lt;!-- Spring与MyBatis整合 --&gt;\r\n&lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt;\r\n    &lt;!-- 若基本的MyBatis配置需要改变,则指定MyBatis的配置文件路径. --&gt;\r\n	&lt;property name=\"configLocation\" value=\"classpath:mybatis.xml\" /&gt;\r\n	&lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\r\n    &lt;!-- 此处还要指定mapper文件位置, 若不配置, 则需要mapper文件所在包名和DAO接口所在包完全一致. --&gt;\r\n    &lt;!-- 这样才能使DAO接口生成的class文件和xml文件都在com/paulandcode/dao这个文件夹下,使他们一一对应. --&gt;\r\n    &lt;property name=\"mapperLocations\" value=\"classpath*:com/paulandcode/dao/*Dao.xml\"/&gt;\r\n	&lt;!-- &lt;property name=\"mapperLocations\" value=\"classpath:com/**/*.xml\"/&gt; --&gt;\r\n&lt;/bean&gt;</code></pre>\r\n\r\n<p>2. mybatis.xml文件</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\r\n&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"  \r\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\r\n\r\n&lt;!-- 该文件作用: 修改MyBatis的基本配置 --&gt;\r\n\r\n&lt;configuration&gt;\r\n	&lt;settings&gt;\r\n        &lt;!-- 改配置可以实现将下划线自动转换为驼峰 --&gt;\r\n        &lt;!-- 比如以前要这么写: --&gt;\r\n        &lt;!--        SELECT file_id AS fileId,\r\n                       dir_id AS dirId,\r\n                FROM sys_directory_file --&gt;\r\n		&lt;!-- 现在可以直接这么写, 也可以自动转化为驼峰: --&gt;\r\n		&lt;!--    SELECT file_id,\r\n                       dir_id,\r\n                FROM sys_directory_file --&gt;\r\n		&lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\" /&gt;\r\n    &lt;/settings&gt;\r\n&lt;/configuration&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 02:48:05.931242', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('41ee600687704b13a21e37a1e2fc4593', 'Java代码行数统计', '<p>该类须放在src/test/java下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年5月18日 下午13:27:13\r\n */\r\npublic class CodeCounter {\r\n	static long files = 0;\r\n	static long codeLines = 0;\r\n	static long commentLines = 0;\r\n	static long blankLines = 0;\r\n	static ArrayList&lt;File&gt; fileArray = new ArrayList&lt;File&gt;();\r\n	\r\n	/**\r\n	 * 获得目录下的文件和子目录下的文件\r\n	 * @param f\r\n	 * @return\r\n	 */\r\n	public static ArrayList&lt;File&gt; getFile(File f) {\r\n		File[] ff = f.listFiles();\r\n		for (File child : ff) {\r\n			if (child.isDirectory()) {\r\n				getFile(child);\r\n			} else\r\n				fileArray.add(child);\r\n		}\r\n		return fileArray;\r\n	}\r\n\r\n	/**\r\n	 * 统计方法\r\n	 * @param f\r\n	 */\r\n	private static void count(File f) {\r\n		BufferedReader br = null;\r\n		boolean flag = false;\r\n		try {\r\n			br = new BufferedReader(new FileReader(f));\r\n			String line = \"\";\r\n			while ((line = br.readLine()) != null) {\r\n				line = line.trim(); // 除去注释前的空格\r\n				if (line.matches(\"^[ ]*$\")) { // 匹配空行\r\n					blankLines++;\r\n				} else if (line.startsWith(\"//\")) {\r\n					commentLines++;\r\n				} else if (line.startsWith(\"/*\") &amp;&amp; !line.endsWith(\"*/\")) {\r\n					commentLines++;\r\n					flag = true;\r\n				} else if (line.startsWith(\"/*\") &amp;&amp; line.endsWith(\"*/\")) {\r\n					commentLines++;\r\n				} else if (flag == true) {\r\n					commentLines++;\r\n					if (line.endsWith(\"*/\")) {\r\n						flag = false;\r\n					}\r\n				} else {\r\n					codeLines++;\r\n				}\r\n			}\r\n			files++;\r\n		} catch (FileNotFoundException e) {\r\n			e.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			if (br != null) {\r\n				try {\r\n					br.close();\r\n					br = null;\r\n				} catch (IOException e) {\r\n					e.printStackTrace();\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 代码行数统计\r\n	 */\r\n	public static void main(String[] args) {\r\n		String file = CodeCounter.class.getResource(\"/\").getFile();\r\n		String path = file.replace(\"target/test-classes\", \"src\");\r\n\r\n		ArrayList&lt;File&gt; al = getFile(new File(path));\r\n		for (File f : al) {\r\n			if (f.getName().matches(\".*\\\\.java$\")){ // 匹配java格式的文件\r\n				count(f);\r\n				System.out.println(f);\r\n			}\r\n		}\r\n		System.out.println(\"统计文件：\" + files);\r\n		System.out.println(\"代码行数：\" + codeLines);\r\n		System.out.println(\"注释行数：\" + commentLines);\r\n		System.out.println(\"空白行数：\" + blankLines);\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-14 22:59:04.289037', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('4275e65d147f4f549ec3b36f9494d73c', 'Ubuntu通过命令行连接WIFI', '<p>1.&nbsp;查看无线网卡的信息</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">iwconfig</code></pre>\r\n\r\n<p>输入类似如下结果</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">rmnetctl  no wireless extensions.\r\n\r\nwlan0     IEEE 802.11abgn  ESSID:off/any\r\n          Mode:Managed  Access Point: Not-Associated   Tx-Power=31 dBm\r\n          Retry  long limit:7   RTS thr:off   Fragment thr:off\r\n          Power Management:on\r\n\r\ndummy0    no wireless extensions.\r\n\r\nenx00044b6697cd  no wireless extensions.\r\n\r\nip6tnl0   no wireless extensions.\r\n\r\nsit0      no wireless extensions.\r\n\r\nlo        no wireless extensions.\r\n\r\ntunl0     no wireless extensions.</code></pre>\r\n\r\n<p>注意:&nbsp;需要在你的无线网卡存在, 且无线网卡驱动安装后, 才会检测到类似上面的wlan0的网卡项. 如果没有网卡项, 请先确认您的机子上存在无线网卡, 且驱动正确安装.&nbsp;</p>\r\n\r\n<p>2.&nbsp;启动无线网卡项</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ip link set wlan0 up</code></pre>\r\n\r\n<p>3.&nbsp;扫描所检测到的无线网络</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo iw dev wlan0 scan | less</code></pre>\r\n\r\n<p>输出如下</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">BSS f0:b4:29:61:92:ef(on wlan0)\r\n        TSF: 9516218618 usec (0d, 02:38:36)\r\n        freq: 2447\r\n        beacon interval: 100 TUs\r\n        capability: ESS Privacy ShortSlotTime APSD (0x0c11)\r\n        signal: -58.00 dBm\r\n        last seen: 10 ms ago\r\n        Information elements from Probe Response frame:\r\n        SSID: Xiaomi_517\r\n        Supported rates: 1.0* 2.0* 5.5* 11.0* 9.0 18.0 36.0 54.0\r\n        DS Parameter set: channel 8\r\n        ERP: Barker_Preamble_Mode\r\n        Extended supported rates: 6.0 12.0 24.0 48.0\r\n        HT capabilities:\r\n                Capabilities: 0x6c\r\n                        HT20\r\n                        SM Power Save disabled\r\n                        RX HT20 SGI\r\n                        RX HT40 SGI\r\n                        No RX STBC\r\n                        Max AMSDU length: 3839 bytes\r\n                        No DSSS/CCK HT40\r\n                Maximum RX AMPDU length 65535 bytes (exponent: 0x003)\r\n                Minimum RX AMPDU time spacing: 4 usec (0x05)\r\n                HT RX MCS rate indexes supported: 0-15\r\n                HT TX MCS rate indexes are undefined\r\n        HT operation:\r\n                 * primary channel: 8\r\n                 * secondary channel offset: no secondary\r\n                 * STA channel width: 20 MHz\r\n                 * RIFS: 0\r\n                 * HT protection: no\r\n                 * non-GF present: 0\r\n                 * OBSS non-GF present: 0\r\n                 * dual beacon: 0\r\n                 * dual CTS protection: 0\r\n                 * STBC beacon: 0\r\n                 * L-SIG TXOP Prot: 0\r\n                 * PCO active: 0\r\n                 * PCO phase: 0\r\n        WPA:     * Version: 1\r\n                 * Group cipher: TKIP\r\n                 * Pairwise ciphers: TKIP CCMP\r\n                 * Authentication suites: PSK\r\n        RSN:     * Version: 1\r\n                 * Group cipher: TKIP\r\n                 * Pairwise ciphers: TKIP CCMP\r\n                 * Authentication suites: PSK\r\n                 * Capabilities: 1-PTKSA-RC 1-GTKSA-RC (0x0000)\r\n        WMM:     * Parameter version 1\r\n                 * u-APSD\r\n                 * BE: CW 15-1023, AIFSN 3\r\n                 * BK: CW 15-1023, AIFSN 7\r\n                 * VI: CW 7-15, AIFSN 2, TXOP 3008 usec\r\n                 * VO: CW 3-7, AIFSN 2, TXOP 1504 usec\r\n        BSS Load:\r\n                 * station count: 0\r\n                 * channel utilisation: 19/255\r\n                 * available admission capacity: 31250 [*32us]\r\n        Country: CN     Environment: Indoor/Outdoor\r\n                Channels [1 - 13] @ 16 dBm\r\n        WPS:     * Version: 1.0\r\n                 * Wi-Fi Protected Setup State: 2 (Configured)\r\n                 * Response Type: 3 (AP)\r\n                 * UUID: 28802880-2880-1880-a880-f0b4296192ef\r\n                 * Manufacturer: xiaomi\r\n                 * Model: R1CM\r\n                 * Model Number: 0002\r\n                 * Serial Number: 12345678\r\n                 * Primary Device Type: 6-0050f204-1\r\n                 * Device name: XiaoMiRouter\r\n                 * Config methods: Label, Display, Keypad\r\n                 * RF Bands: 0x1\r\n                 * Unknown TLV (0x1049, 6 bytes): 00 37 2a 00 01 20\r\nBSS b0:c5:54:81:0d:aa(on wlan0)\r\n        TSF: 9516218240 usec (0d, 02:38:36)\r\n        freq: 2412\r\n        beacon interval: 100 TUs\r\n        capability: ESS Privacy ShortPreamble ShortSlotTime (0x0431)\r\n        signal: -65.00 dBm\r\n        last seen: 10 ms ago\r\n        Information elements from Probe Response frame:\r\n        SSID: CSR\r\n        Supported rates: 1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0\r\n        DS Parameter set: channel 1\r\n        ERP: &lt;no flags&gt;\r\n        Extended supported rates: 24.0 36.0 48.0 54.0\r\n        HT capabilities:\r\n                Capabilities: 0x186e\r\n                        HT20/HT40\r\n                        SM Power Save disabled\r\n                        RX HT20 SGI\r\n                        RX HT40 SGI\r\n                        No RX STBC\r\n                        Max AMSDU length: 7935 bytes\r\n                        DSSS/CCK HT40\r\n                Maximum RX AMPDU length 32767 bytes (exponent: 0x002)\r\n                Minimum RX AMPDU time spacing: 16 usec (0x07)\r\n                HT RX MCS rate indexes supported: 0-15\r\n                HT TX MCS rate indexes are undefined\r\n        HT operation:\r\n                 * primary channel: 1\r\n                 * secondary channel offset: above\r\n                 * STA channel width: any\r\n                 * RIFS: 0\r\n                 * HT protection: nonmember\r\n                 * non-GF present: 0\r\n                 * OBSS non-GF present: 1\r\n                 * dual beacon: 0\r\n                 * dual CTS protection: 0\r\n                 * STBC beacon: 0\r\n                 * L-SIG TXOP Prot: 0\r\n                 * PCO active: 0\r\n                 * PCO phase: 0\r\n        WPA:     * Version: 1\r\n                 * Group cipher: TKIP\r\n                 * Pairwise ciphers: TKIP CCMP\r\n                 * Authentication suites: PSK\r\n        RSN:     * Version: 1\r\n                 * Group cipher: TKIP\r\n                 * Pairwise ciphers: TKIP CCMP\r\n                 * Authentication suites: PSK\r\n                 * Capabilities: 1-PTKSA-RC 1-GTKSA-RC (0x0000)\r\n        WMM:     * Parameter version 1\r\n                 * u-APSD\r\n                 * BE: CW 15-1023, AIFSN 3\r\n                 * BK: CW 15-1023, AIFSN 7\r\n                 * VI: CW 7-15, AIFSN 2, TXOP 3008 usec\r\n                 * VO: CW 3-7, AIFSN 2, TXOP 1504 usec\r\n        WPS:     * Version: 1.0\r\n                 * Wi-Fi Protected Setup State: 2 (Configured)\r\n                 * Response Type: 3 (AP)\r\n                 * UUID: 63041253-1019-2006-1228-b0c554810daa\r\n                 * Manufacturer: D-Link Systems\r\n                 * Model: DIR-619L\r\n                 * Model Number: DIR-619L\r\n                 * Serial Number: 20070413-0001\r\n                 * Primary Device Type: 6-0050f204-1\r\n                 * Device name: DIR-619L\r\n                 * Config methods: Display, PBC\r\n                 * Unknown TLV (0x1049, 6 bytes): 00 37 2a 00 01 20</code></pre>\r\n\r\n<p>上述的输出中描述了两个不同的wifi源, 我们所需要关注的项主要有两个, 一个是SSID, 这个项即为该wifi的名称, 如Xiaomi_517. 第二个项为WPA, WPA是一种网络加密协议, WPA的版本分为1和2, 从上面我们可以看到, WPA的版本号为1.</p>\r\n\r\n<p>4. 连接网络</p>\r\n\r\n<p style=\"margin-left:40px\">(1)如果所连接的网络没有加密, 则可以轻松地直接连接</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo iw dev wlan0 connect [网络 SSID]</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2)如果网络是用较低级的协议, WEP加密的, 则也比较容易</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo iw dev wlan0 connect [网络SSID] key 0:[WEP密钥]</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3)如果网络使用的是WPA或者WPA2协议, 则稍微复杂</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;1&gt;安装wpasupplicant</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt install wpasupplicant</code></pre>\r\n\r\n<p style=\"margin-left:80px\">&lt;2&gt;设置配置文件</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo vim /etc/wpasupplicant/wpa_supplicant.conf</code></pre>\r\n\r\n<p style=\"margin-left:80px\">如果已有该文件, 则备份原有文件, 在新文件中加入如下内容</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\">ctrl_interface=/var/run/wpa_supplicant\r\n\r\nap_scan=1\r\n\r\nnetwork={\r\n        ssid=\"[your SSID name]\"\r\n        psk=\"[your WiFi password]\"\r\n        priority=1\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:80px\">&lt;3&gt;以上述配置文件启动wpa_supplicant</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf &amp;</code></pre>\r\n\r\n<p style=\"margin-left:80px\">在该命令中, 最后的&amp;符号意思为将该命令挂到后台运行.&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">若执行上述命令后出现CONNECTED, 则说明启动成功, 若出现CHANGE或REJECT或其他的, 则说明启动失败.&nbsp;</p>\r\n\r\n<p>5.&nbsp;为本机获取IP地址</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo dhclient wlan0</code></pre>\r\n\r\n<p>6.&nbsp;检查是否成功连接WIFI</p>\r\n\r\n<p style=\"margin-left:40px\">通过iwconfig命令, 查看wlan0是否已经连接上相应SSID的WIFI, 或者通过ping尝试联网.&nbsp;</p>', '2018-07-19 03:11:10.520979', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('46051cbbaf464349978f3a623603c26f', 'Kettle报错: Unexpected problem reading shared objects from XML file:null', '<p>1. 原因</p>\r\n\r\n<p style=\"margin-left:40px\">将数据库链接进行了共享, 然后删除共享. 再次保存转换时报错.</p>\r\n\r\n<p style=\"margin-left:40px\">或者DB连接为中文, 也会报这个错误.&nbsp;</p>\r\n\r\n<p>2. 解决</p>\r\n\r\n<p style=\"margin-left:40px\">在C:/Administrator/.kettle文件夹下, 找到share.xml, 在文件中找到sharedobjects节点, 将想要删除的共享对应的子节点删除.</p>', '2018-09-13 12:35:35.339924', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('46c0029888f54acaa2585d2aa6160dc8', 'Ubuntu18.04.2安装图形界面时无法进入的解决方案', '<p>一. 问题描述</p>\r\n\r\n<p>执行如下命令后会安装图形界面，但是重启后无法进入，卡在登录界面</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt install ubuntu-desktop &amp;&amp; sudo startx</code></pre>\r\n\r\n<p>二. 原因</p>\r\n\r\n<p>电脑配置了GPU， 而Ubuntu默认没有这个驱动，导致卡死。</p>\r\n\r\n<p>三. 解决方案</p>\r\n\r\n<p>1. 删除已有的nvidia驱动</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt-get purge nvidia-*</code></pre>\r\n\r\n<p>2. 安装nvidia驱动并chon重启</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt install software-properties-common\r\nsudo add-apt-repository ppa:graphics-drivers/ppa\r\nsudo apt-get update\r\nsudo apt-get install nvidia-384   \r\nsudo reboot</code></pre>\r\n\r\n<p>其中384代表nvidia版本， 如想使用其他版本， 可以到nvidia官网查看版本号</p>\r\n\r\n<p>3. 验证是否安装成功</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">nvidia-smi</code></pre>\r\n\r\n<p>如果看到nvidia相关信息则说明安装成功</p>', '2019-10-24 08:44:56.324631', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('46fdfe42afd64c1c9a3c1564c8b2a2dd', 'Java, Kettle, Jenkins等第三方插件执行Linux的sudo命令时报错: sudo: no tty present and no askpass program specified', '<p>0. 这是因为非root账号执行sudo时需要密码, 可以设置免密码.&nbsp;</p>\r\n\r\n<p>1.&nbsp;进入到root用户下</p>\r\n\r\n<p>2. 给/etc/sudoers文件添加写权限</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">chmod u+w /etc/sudoers</code></pre>\r\n\r\n<p>3. 添加免密码</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">abc ALL = NOPASSWD: ALL</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-09-12 13:11:10.432452', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('48f4d7e0cf8641d189bd2b212d14da9b', 'XMind快捷键', '<p><img alt=\"\" src=\"https://paulandcode.com/blogs/XMind%E5%BF%AB%E6%8D%B7%E9%94%AE/01.jpg\" style=\"height:794px; width:800px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/XMind%E5%BF%AB%E6%8D%B7%E9%94%AE/02.jpg\" style=\"height:965px; width:800px\" /></p>', '2018-07-25 07:36:41.221568', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('48fd10718c9d47198263f63f20a39287', 'Redis工具类', '<p>1. properties配置文件</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\"># redis 配置文件\r\nredis.hostName=127.0.0.1\r\nredis.port=6379\r\nredis.timeout=36000\r\nredis.usePool=true \r\nredis.maxIdle=6\r\nredis.minEvictableIdleTimeMillis=300000\r\nredis.numTestsPerEvictionRun=3\r\nredis.timeBetweenEvictionRunsMillis=60000</code></pre>\r\n\r\n<p>2. Spring添加配置文件</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;!-- 配置redis --&gt;\r\n&lt;bean id=\"jedisPoolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\"&gt;\r\n	&lt;!-- &lt;property name=\"maxIdle\" value=\"6\"&gt;&lt;/property&gt; &lt;property name=\"minEvictableIdleTimeMillis\" \r\n		value=\"300000\"&gt;&lt;/property&gt; &lt;property name=\"numTestsPerEvictionRun\" value=\"3\"&gt;&lt;/property&gt; \r\n		&lt;property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"&gt;&lt;/property&gt; --&gt;\r\n	&lt;property name=\"minEvictableIdleTimeMillis\" value=\"${redis.minEvictableIdleTimeMillis}\"&gt;&lt;/property&gt;\r\n	&lt;property name=\"maxIdle\" value=\"${redis.maxIdle}\"&gt;&lt;/property&gt;\r\n	&lt;property name=\"numTestsPerEvictionRun\" value=\"${redis.numTestsPerEvictionRun}\"&gt;&lt;/property&gt;\r\n	&lt;property name=\"timeBetweenEvictionRunsMillis\" value=\"${redis.timeBetweenEvictionRunsMillis}\"&gt;&lt;/property&gt;\r\n&lt;/bean&gt;\r\n&lt;bean id=\"jedisConnectionFactory\"\r\n	class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"\r\n	destroy-method=\"destroy\"&gt;\r\n	&lt;property name=\"poolConfig\" ref=\"jedisPoolConfig\"&gt;&lt;/property&gt;\r\n	&lt;property name=\"hostName\" value=\"${redis.hostName}\"&gt;&lt;/property&gt;\r\n	&lt;property name=\"port\" value=\"${redis.port}\"&gt;&lt;/property&gt;\r\n	&lt;property name=\"timeout\" value=\"${redis.timeout}\"&gt;&lt;/property&gt;\r\n	&lt;property name=\"usePool\" value=\"${redis.usePool}\"&gt;&lt;/property&gt;\r\n&lt;/bean&gt;\r\n&lt;bean id=\"jedisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\"&gt;\r\n	&lt;property name=\"connectionFactory\" ref=\"jedisConnectionFactory\"/&gt;\r\n	&lt;property name=\"keySerializer\"&gt;\r\n		&lt;bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" /&gt;\r\n	&lt;/property&gt;\r\n	&lt;property name=\"valueSerializer\"&gt;\r\n		&lt;bean class=\"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer\" /&gt;\r\n	&lt;/property&gt;\r\n&lt;/bean&gt;</code></pre>\r\n\r\n<p>3. Maven依赖</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n	&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;\r\n	&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;\r\n	&lt;version&gt;1.6.2.RELEASE&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n	&lt;groupId&gt;redis.clients&lt;/groupId&gt;\r\n	&lt;artifactId&gt;jedis&lt;/artifactId&gt;\r\n	&lt;version&gt;2.9.0&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>4. Redis工具类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.data.redis.core.BoundListOperations;\r\nimport org.springframework.data.redis.core.BoundSetOperations;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.stereotype.Service;\r\n\r\n/**\r\n * redis缓存存储与获取\r\n *\r\n * @author paulandcode\r\n * @since 2018年3月8日 下午2:56:46\r\n */\r\n@Service\r\npublic class RedisCacheUtil {\r\n	@Autowired\r\n	@Qualifier(\"jedisTemplate\")\r\n	public RedisTemplate&lt;Object, Object&gt; redisTemplate;\r\n\r\n	/**\r\n	 * 缓存基本的对象,Integer,String,实体类等\r\n	 * \r\n	 * @param key\r\n	 * @param value\r\n	 */\r\n	public &lt;K, V&gt; void setCacheObject(K key, V value) {\r\n		redisTemplate.boundValueOps(key).set(value);\r\n	}\r\n\r\n	/**\r\n	 * 获得缓存的基本对象\r\n	 * \r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	@SuppressWarnings(\"unchecked\")\r\n	public &lt;K, V&gt; V getCacheObject(K key) {\r\n		return (V) redisTemplate.boundValueOps(key).get();\r\n	}\r\n\r\n	/**\r\n	 * 缓存List\r\n	 * \r\n	 * @param key\r\n	 * @param dataList\r\n	 */\r\n	public &lt;K, V&gt; void setCacheList(K key, List&lt;V&gt; dataList) {\r\n		redisTemplate.delete(key);\r\n		for (V v : dataList) {\r\n			redisTemplate.boundListOps(key).rightPush(v);\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 获得缓存的List\r\n	 * \r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	@SuppressWarnings(\"unchecked\")\r\n	public &lt;K, V&gt; List&lt;V&gt; getCacheList(K key) {\r\n		BoundListOperations&lt;K, V&gt; listOperation = (BoundListOperations&lt;K, V&gt;) redisTemplate.boundListOps(key);\r\n		return listOperation.range(0, listOperation.size());\r\n	}\r\n\r\n	/**\r\n	 * 缓存Set\r\n	 * \r\n	 * @param key\r\n	 * @param dataSet\r\n	 */\r\n	@SuppressWarnings(\"unchecked\")\r\n	public &lt;K, V&gt; void setCacheSet(K key, Set&lt;V&gt; dataSet) {\r\n		redisTemplate.delete(key);\r\n		BoundSetOperations&lt;K, V&gt; setOperation = (BoundSetOperations&lt;K, V&gt;) redisTemplate.boundSetOps(key);\r\n		Iterator&lt;V&gt; it = dataSet.iterator();\r\n		while (it.hasNext()) {\r\n			setOperation.add(it.next());\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 获得缓存的Set\r\n	 * \r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	@SuppressWarnings(\"unchecked\")\r\n	public &lt;K, V&gt; Set&lt;V&gt; getCacheSet(K key) {\r\n		return (Set&lt;V&gt;) redisTemplate.boundSetOps(key).members();\r\n	}\r\n\r\n	/**\r\n	 * 缓存Map\r\n	 * \r\n	 * @param key\r\n	 * @param dataMap\r\n	 */\r\n	public &lt;K, HK, HV&gt; void setCacheMap(K key, Map&lt;HK, HV&gt; dataMap) {\r\n		redisTemplate.delete(key);\r\n		redisTemplate.boundHashOps(key).putAll(dataMap);\r\n	}\r\n\r\n	/**\r\n	 * 获得缓存的Map\r\n	 * \r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	@SuppressWarnings(\"unchecked\")\r\n	public &lt;K, HK, HV&gt; Map&lt;HK, HV&gt; getCacheMap(K key) {\r\n		return (Map&lt;HK, HV&gt;) redisTemplate.boundHashOps(key).entries();\r\n	}\r\n\r\n	/**\r\n	 * 根据key删除对应的缓存\r\n	 * \r\n	 * @param key, 若key为String, key支持通配符\r\n	 */\r\n	public &lt;K&gt; void deleteByKey(K key) {\r\n		redisTemplate.delete(redisTemplate.keys(key));\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-30 03:25:25.729378', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('4b2d83c944974ce1954e88404732ce73', 'Log4j配置文件log4j.properties', '<pre>\r\n<code class=\"language-apacheconf\"># 日志级别(由低到高):\r\n# ALL   打开所有日志记录\r\n# DEBUG 调试信息\r\n# INFO  运行信息\r\n# WARN  警告信息,有潜在错误\r\n# ERROR 错误信息,但不影响程序运行\r\n# FATAL 严重信息,会导致程序退出\r\n# OFF   关闭所有日志记录\r\n\r\n# 日志的输出方式:\r\n# org.apache.log4j.ConsoleAppender(控制台)\r\n# org.apache.log4j.FileAppender(文件)\r\n# org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)\r\n# org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)\r\n# org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)\r\n\r\n# 日志的输出格式:\r\n# org.apache.log4j.HTMLLayout(以HTML表格形式布局)\r\n# org.apache.log4j.PatternLayout(可以灵活地指定布局模式)\r\n# org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串)\r\n# org.apache.log4j.TTCCLayout(包含日志产生的时间,线程,类别等信息)\r\n\r\n# 灵活指定日志输出格式:\r\n# %c: 输出所属的类目,通常就是所在类的全名\r\n# %d: 输出日志时间点的日期或时间,默认格式为ISO8601,也可以在其后指定格式,比如: %d{yyyy-MM-dd HH:mm:ss} 输出类似:2002-10-18 22:10:28\r\n# %l: 输出日志事件的发生位置,包括类目名,发生的线程,在代码中的行数.举例: Testlog4.main(TestLog4.java:10)\r\n# %m: 输出代码中指定的消息\r\n# %n: 输出一个回车换行符,Windows平台为\"/r/n\",Unix平台为\"/n\"\r\n# %p: 输出优先级,即DEBUG,INFO,WARN,ERROR,FATAL\r\n# %r: 输出自应用启动到输出该log信息耗费的毫秒数\r\n# %t: 输出产生该日志事件的线程名\r\n\r\n# 将所有包的日志级别设为INFO(输出INFO及以上级别日志)\r\n# 为这些日志配置4种日志输出并命名为: console,info,warn,error(这些名字随便取)\r\nlog4j.rootLogger=INFO,console,info,warn,error\r\n# 将org与com.alibaba包的日志级别设为OFF(关闭所有日志记录)\r\nlog4j.logger.org=OFF\r\nlog4j.logger.com.alibaba=OFF\r\n\r\n# console\r\n# 输出方式为: 控制台输出\r\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.console.Target=System.out\r\n# 输出级别为INFO(包括INFO,WARN,ERROR,FATAL)\r\nlog4j.appender.console.Threshold=INFO\r\n# 输出格式为: 灵活指定格式\r\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.console.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# info\r\n# 输出方式为: 每天产生一个日志文件\r\nlog4j.appender.info=org.apache.log4j.DailyRollingFileAppender\r\n# 日志文件位置: ${catalina.home}/logs/paulandcode/base/info.log(${catalina.home}指: D:/Java/apache-tomcat-9.0.0)\r\nlog4j.appender.info.File=${catalina.home}/logs/paulandcode/base/info.log\r\n# 每日生成的日志文件命名方式: info.log.2017-05-24\r\nlog4j.appender.info.append=true\r\nlog4j.appender.info.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.info.Threshold=INFO\r\nlog4j.appender.info.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.info.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# warn\r\nlog4j.appender.warn=org.apache.log4j.DailyRollingFileAppender\r\nlog4j.appender.warn.File=${catalina.home}/logs/paulandcode/base/warn.log\r\nlog4j.appender.warn.append=true\r\nlog4j.appender.warn.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.warn.Threshold=WARN\r\nlog4j.appender.warn.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.warn.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# error\r\nlog4j.appender.error=org.apache.log4j.DailyRollingFileAppender\r\nlog4j.appender.error.File=${catalina.home}/logs/paulandcode/base/error.log\r\nlog4j.appender.error.append=true\r\nlog4j.appender.error.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.error.Threshold=ERROR\r\nlog4j.appender.error.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.error.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n\r\n\r\n# slowsql\r\nlog4j.logger.com.alibaba.druid.filter.stat.StatFilter=ERROR,slowsql\r\nlog4j.appender.slowsql=org.apache.log4j.DailyRollingFileAppender\r\nlog4j.appender.slowsql.File=${catalina.home}/logs/paulandcode/base/slow_sql.log\r\nlog4j.appender.slowsql.append=true\r\nlog4j.appender.slowsql.datePattern=\'.\'yyyy-MM-dd\r\nlog4j.appender.slowsql.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.slowsql.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %m %n\r\n\r\n# sql\r\n# 将com.paulandcode.dao包下的日志级别设为DEBUG\r\n# 为这些日志配置1种日志输出并命名为:sql\r\nlog4j.logger.com.paulandcode.dao=DEBUG,sql\r\nlog4j.appender.sql=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.sql.Target=System.out\r\nlog4j.appender.sql.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.sql.layout.ConversionPattern=%m %n</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 07:48:13.527493', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('4b695aab7cfc4b5296b9afc381495da4', 'Java 通过IP获取对应的国家省份城市经纬度(离线文件方案)', '<p>1. 除了调用接口查询城市, 还可以通过离线文件查询城市, 使用GeoLite2 City库</p>\r\n\r\n<p>2. 离线库下载地址:&nbsp;<a href=\"https://dev.maxmind.com/geoip/geoip2/geolite2/\" target=\"_blank\">https://dev.maxmind.com/geoip/geoip2/geolite2/</a>&nbsp;点击如下位置下载压缩文件</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/Java%20%E9%80%9A%E8%BF%87Request%E8%AF%B7%E6%B1%82%E8%8E%B7%E5%8F%96IP%E5%9C%B0%E5%9D%80%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9B%BD%E5%AE%B6%E7%9C%81%E4%BB%BD%E5%9F%8E%E5%B8%82%E7%BB%8F%E7%BA%AC%E5%BA%A6%28%E7%A6%BB%E7%BA%BF%E6%96%87%E4%BB%B6%E6%96%B9%E6%A1%88%29/01.png\" style=\"height:188px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">文件解压后有一个文件名为GeoLite2-City.mmdb, 这就是我们的离线库</p>\r\n\r\n<p>3. 导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n    &lt;groupId&gt;com.maxmind.geoip2&lt;/groupId&gt;\r\n    &lt;artifactId&gt;geoip2&lt;/artifactId&gt;\r\n    &lt;version&gt;2.8.1&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>4. 编写工具类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.product.utils;\r\n\r\nimport java.net.InetAddress;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.maxmind.geoip2.DatabaseReader;\r\n\r\n/**\r\n * \r\n * @description: 获取客户端IP地址\r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年9月17日 下午3:44:51\r\n */\r\npublic class IPUtils {\r\n	private static Logger logger = LoggerFactory.getLogger(IPUtils.class);\r\n\r\n	/**\r\n	 * 获取客户端IP地址\r\n	 * \r\n	 * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址\r\n	 * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址\r\n	 */\r\n	public static String getIP(HttpServletRequest request) {\r\n		String ip = null;\r\n		try {\r\n			ip = request.getHeader(\"x-forwarded-for\");\r\n			if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n				ip = request.getHeader(\"Proxy-Client-IP\");\r\n			}\r\n			if (StringUtils.isEmpty(ip) || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n				ip = request.getHeader(\"WL-Proxy-Client-IP\");\r\n			}\r\n			if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n				ip = request.getHeader(\"HTTP_CLIENT_IP\");\r\n			}\r\n			if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n				ip = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\r\n			}\r\n			if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n				ip = request.getRemoteAddr();\r\n			}\r\n		} catch (Exception e) {\r\n			logger.error(\"IPUtils ERROR \", e);\r\n		}\r\n		return ip;\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * @description: 获得国家 \r\n	 * @param reader\r\n	 * @param ip\r\n	 * @return\r\n	 * @throws Exception\r\n	 */\r\n	public static String getCountry(DatabaseReader reader, String ip) throws Exception {\r\n		return reader.city(InetAddress.getByName(ip)).getCountry().getNames().get(\"zh-CN\");\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * @description: 获得省份 \r\n	 * @param reader\r\n	 * @param ip\r\n	 * @return\r\n	 * @throws Exception\r\n	 */\r\n	public static String getProvince(DatabaseReader reader, String ip) throws Exception {\r\n		return reader.city(InetAddress.getByName(ip)).getMostSpecificSubdivision().getNames().get(\"zh-CN\");\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * @description: 获得城市 \r\n	 * @param reader\r\n	 * @param ip\r\n	 * @return\r\n	 * @throws Exception\r\n	 */\r\n	public static String getCity(DatabaseReader reader, String ip) throws Exception {\r\n		return reader.city(InetAddress.getByName(ip)).getCity().getNames().get(\"zh-CN\");\r\n	}\r\n	\r\n	/**\r\n	 * \r\n	 * @description: 获得经度 \r\n	 * @param reader\r\n	 * @param ip\r\n	 * @return\r\n	 * @throws Exception\r\n	 */\r\n	public static Double getLongitude(DatabaseReader reader, String ip) throws Exception {\r\n		return reader.city(InetAddress.getByName(ip)).getLocation().getLongitude();\r\n	}\r\n	\r\n	/**\r\n	 * \r\n	 * @description: 获得纬度\r\n	 * @param reader\r\n	 * @param ip\r\n	 * @return\r\n	 * @throws Exception\r\n	 */\r\n	public static Double getLatitude(DatabaseReader reader, String ip) throws Exception {\r\n		return reader.city(InetAddress.getByName(ip)).getLocation().getLatitude();\r\n	}\r\n}</code></pre>\r\n\r\n<p>5. main方法测试</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">// String path = req.getSession().getServletContext().getRealPath(\"/WEB-INF/classes/GeoLite2-City.mmdb\");\r\nString path = \"E:/GeoLite2-City.mmdb\";\r\n// 创建 GeoLite2 数据库\r\nFile database = new File(path);\r\n// 读取数据库内容\r\nDatabaseReader reader = new DatabaseReader.Builder(database).build();\r\n// 访问IP\r\nString ip = \"36.157.208.62\";\r\nString site = IPUtils.getCountry(reader, ip) + \"-\" + IPUtils.getProvince(reader, ip) + \"-\" + IPUtils.getCity(reader, ip);\r\nSystem.out.println(site);</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 05:58:56.871451', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('4bb3c66be8894447a3fd95f279c768cc', 'kettle使用命令行来运行ktr和kjb示例', '<p>0. 在CMD下</p>\r\n\r\n<p>1.&nbsp;ktr的运行：运行transformation文件是通过Pan.bat来运行的</p>\r\n\r\n<p>2.&nbsp;kjb的运行：运行job文件是通过kitchen.bat来运行的</p>\r\n\r\n<p>3. 示例</p>\r\n\r\n<p style=\"margin-left:40px\">3.1&nbsp;运行本地的kettle</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">C:\\data-integration\\Kitchen.bat /file:C:\\code\\kettle\\yjkf\\yjkf.kjb /level:Basic&gt;&gt;C:\\code\\kettle\\yjkf\\yjkf.log</code></pre>\r\n\r\n<p style=\"margin-left:40px\">3.2&nbsp;运行资源库中的kettle</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">C:\\data-integration\\Kitchen.bat /rep:33 /user:admin /pass:admin /dir:/gpstime /job:gpstime</code></pre>\r\n\r\n<p>&nbsp;</p>', '2019-03-15 08:30:58.537228', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('4e8e4c47ff384915b3eed1c70852b7a8', '如何Ping固定端口号', '<p>1. Windows需要选择: 控制面板 --&gt; 程序 --&gt; 启动或关闭Windows功能, 在Telnet客户端和Telnet服务端打勾. 被Ping的机器需要服务端, 要Ping的机器需要客户端.</p>\r\n\r\n<p>2. Linux若没有自带telnet, 需要安装客户端和服务端</p>\r\n\r\n<p>3. 连接命令: telnet 127.0.0.1 8080</p>\r\n\r\n<p style=\"margin-left:40px\">注意: IP和端口号之间是空格, 不是冒号.&nbsp;</p>', '2018-09-11 09:20:35.646921', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('4fa9ad7b10144910a4d8234bd439a5e3', 'Oracle角色与权限', '<p>1. 新建用户</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">create user xxxxx(用户名) identified by \"密码\" \r\n\r\nalert user 用户名 identified by \"新密码\"  --修改用户密码</code></pre>\r\n\r\n<p>2.&nbsp;因为新建的用户和默认的用户是锁住的, 没有权限, 所以新建用户后要给用户赋予权限</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">授予权限关键字: grant(示例: grant create table to  用户名)\r\n\r\n撤销权限关键字: revoke(示例: revoke create table to  用户名)</code></pre>\r\n\r\n<p>3. 常用权限</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">用户及角色系统权限 \r\ncreate user 创建用户的权限 \r\ncreate role 创建角色的权限 \r\nalter user 修改用户的权限 \r\nalter any role 修改任意角色的权限 \r\ndrop user 删除用户的权限 \r\ndrop any role 删除任意角色权限\r\n\r\n概要文件系统权限 \r\ncreate profile 创建概要文件的权限 \r\nalter profile 修改概要文件的权限 \r\ndrop profile 删除概要文件的权限\r\n\r\n同义词系统权限 \r\ncreate any synonym 为任意用户创建同义名的权限 \r\ncreate synonym 为用户创建同义名的权限 \r\ndrop public synonym 删除公共同义名的权限 \r\ndrop any synonym 删除任意同义名的权限\r\n\r\n表系统权限 \r\nselect any table 查询任意表的权限 \r\nselect table 使用用户表的权限 \r\nupdate any table 修改任意表中数据的权限 \r\nupdate table 修改用户表中的行的权限 \r\ndelete any table 删除任意表行数据的权限 \r\ndelete table 为用户删除表行的权限 \r\ncreate any table 为任意用户创建表的权限 \r\ncreate table 为用户创建表的权限 \r\ndrop any table 删除任意表的权限 \r\nalter any table 修改任意表的权限 \r\nalter table 修改拥有的表权限\r\n\r\n表空间系统权限 \r\ncreate tablespace 创建表空间的权限 \r\nalter tablespace 修改表空间的权限 \r\ndrop tablespace 删除表空间的权限 \r\nunlimited tablespace 对表空间大小不加限制的权限\r\n\r\n索引系统权限 \r\ncreate any index 为任意用户创建索引的权限 \r\ndrop any index 删除任意索引的权限 \r\nalter any index 修改任意索引的权限\r\n\r\n会话系统权限(即登录权限) \r\ncreate session 创建会话的权限 \r\nalter session 修改数据库会话的权限\r\n\r\n视图系统权限 \r\ncreate any view 为任意用户创建视图的权限 \r\ncreate view 为用户创建视图的权限 \r\ndrop any view 删除任意视图的权限 \r\nselect viwew 使用视图的权限 \r\nupdate view 修改视图中行的权限 \r\ndelete any view 删除任意视图行的权限 \r\ndelete view 删除视图行的权限\r\n\r\n序列系统权限 \r\ncreate any sequence 为任意用户创建序列的权限 \r\ncreate sequence 为用户创建序列的权限 \r\nalter any sequence 修改任意序列的权限 \r\nalter sequence 修改拥有的序列权限 \r\ndrop any sequence 删除任意序列的权限 \r\nselect any sequence 使用任意序列的权限 \r\nselect sequence 使用用户序列的权限\r\n\r\n子程序系统权限 \r\ncreate any procedure 为任意用户创建存储过程的权限 \r\ncreate procedure 为用户创建存储过程的权限 \r\ncreate any trigger 为任意用户创建触发器的权限 \r\nalter procedure 修改拥有的存储过程权限 \r\nalter any trigger 修改任意触发器的权限 \r\nexecute any procedure 执行任意存储过程的权限 \r\nexecute function 执行存储函数的权限 \r\nexecute package 执行存储包的权限 \r\nexecute procedure 执行用户存储过程的权限 \r\ndrop any procedure 删除任意存储过程的权限 \r\ndrop trigger 删除任意触发器的权限</code></pre>\r\n\r\n<p>4. 将一个用户的某个权限赋予给另一个用户</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">grant select on user_a.table_a to user_b</code></pre>\r\n\r\n<p>上面代码表示将用户user_a对table_a表的查询权限赋予给用户user_b</p>\r\n\r\n<p>注意: 这个语句在没有访问另一个用户的权限情况下这个语句要在另一个用户登录情况下执行, 这样才能生效</p>\r\n\r\n<p>5. 查看权限</p>\r\n\r\n<p style=\"margin-left:40px\">(1)&nbsp;查看当前用户的系统权限</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select * from user_sys_privs</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2)&nbsp;查看当前用户对表的权限</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select * from user_tab_privs</code></pre>\r\n\r\n<p>6. 角色(角色即权限的集合, 可以把多个角色授予给用户)</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 创建角色</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">create role myrole</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2) 将权限授予角色</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">grant create table to myrole</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3) 将角色授予用户</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">grant myrole to user_a</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4) 删除角色</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">drop role myrole</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 08:45:34.938448', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('5118307546e2452681bf9135153f8c70', 'Maven配置文件setting.xml', '<pre>\r\n<code class=\"language-markup\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n\r\n&lt;!--\r\nLicensed to the Apache Software Foundation (ASF) under one\r\nor more contributor license agreements.  See the NOTICE file\r\ndistributed with this work for additional information\r\nregarding copyright ownership.  The ASF licenses this file\r\nto you under the Apache License, Version 2.0 (the\r\n\"License\"); you may not use this file except in compliance\r\nwith the License.  You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing,\r\nsoftware distributed under the License is distributed on an\r\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, either express or implied.  See the License for the\r\nspecific language governing permissions and limitations\r\nunder the License.\r\n--&gt;\r\n\r\n&lt;!--\r\n | This is the configuration file for Maven. It can be specified at two levels:\r\n |\r\n |  1. User Level. This settings.xml file provides configuration for a single user,\r\n |                 and is normally provided in ${user.home}/.m2/settings.xml.\r\n |\r\n |                 NOTE: This location can be overridden with the CLI option:\r\n |\r\n |                 -s /path/to/user/settings.xml\r\n |\r\n |  2. Global Level. This settings.xml file provides configuration for all Maven\r\n |                 users on a machine (assuming they\'re all using the same Maven\r\n |                 installation). It\'s normally provided in\r\n |                 ${maven.conf}/settings.xml.\r\n |\r\n |                 NOTE: This location can be overridden with the CLI option:\r\n |\r\n |                 -gs /path/to/global/settings.xml\r\n |\r\n | The sections in this sample file are intended to give you a running start at\r\n | getting the most out of your Maven installation. Where appropriate, the default\r\n | values (values used when the setting is not specified) are provided.\r\n |\r\n |--&gt;\r\n&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt;\r\n  &lt;!-- localRepository\r\n   | The path to the local repository maven will use to store artifacts.\r\n   |\r\n   | Default: ${user.home}/.m2/repository --&gt;\r\n  &lt;localRepository&gt;D:/Java/apache-maven-3.5.0/repository&lt;/localRepository&gt; \r\n  \r\n\r\n  &lt;!-- interactiveMode\r\n   | This will determine whether maven prompts you when it needs input. If set to false,\r\n   | maven will use a sensible default value, perhaps based on some other setting, for\r\n   | the parameter in question.\r\n   |\r\n   | Default: true\r\n  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;\r\n  --&gt;\r\n\r\n  &lt;!-- offline\r\n   | Determines whether maven should attempt to connect to the network when executing a build.\r\n   | This will have an effect on artifact downloads, artifact deployment, and others.\r\n   |\r\n   | Default: false\r\n  &lt;offline&gt;false&lt;/offline&gt;\r\n  --&gt;\r\n\r\n  &lt;!-- pluginGroups\r\n   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.\r\n   | when invoking a command line like \"mvn prefix:goal\". Maven will automatically add the group identifiers\r\n   | \"org.apache.maven.plugins\" and \"org.codehaus.mojo\" if these are not already contained in the list.\r\n   |--&gt;\r\n  &lt;pluginGroups&gt;\r\n    &lt;!-- pluginGroup\r\n     | Specifies a further group identifier to use for plugin lookup.\r\n    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;\r\n    --&gt;\r\n  &lt;/pluginGroups&gt;\r\n\r\n  &lt;!-- proxies\r\n   | This is a list of proxies which can be used on this machine to connect to the network.\r\n   | Unless otherwise specified (by system property or command-line switch), the first proxy\r\n   | specification in this list marked as active will be used.\r\n   |--&gt;\r\n  &lt;proxies&gt;\r\n    &lt;!-- proxy\r\n     | Specification for one proxy, to be used in connecting to the network.\r\n     |\r\n    &lt;proxy&gt;\r\n      &lt;id&gt;optional&lt;/id&gt;\r\n      &lt;active&gt;true&lt;/active&gt;\r\n      &lt;protocol&gt;http&lt;/protocol&gt;\r\n      &lt;username&gt;proxyuser&lt;/username&gt;\r\n      &lt;password&gt;proxypass&lt;/password&gt;\r\n      &lt;host&gt;proxy.host.net&lt;/host&gt;\r\n      &lt;port&gt;80&lt;/port&gt;\r\n      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;\r\n    &lt;/proxy&gt;\r\n    --&gt;\r\n  &lt;/proxies&gt;\r\n\r\n  &lt;!-- servers\r\n   | This is a list of authentication profiles, keyed by the server-id used within the system.\r\n   | Authentication profiles can be used whenever maven must make a connection to a remote server.\r\n   |--&gt;\r\n  &lt;servers&gt;\r\n    &lt;!-- server\r\n     | Specifies the authentication information to use when connecting to a particular server, identified by\r\n     | a unique name within the system (referred to by the \'id\' attribute below).\r\n     |\r\n     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\r\n     |       used together.\r\n     |\r\n    &lt;server&gt;\r\n      &lt;id&gt;deploymentRepo&lt;/id&gt;\r\n      &lt;username&gt;repouser&lt;/username&gt;\r\n      &lt;password&gt;repopwd&lt;/password&gt;\r\n    &lt;/server&gt;\r\n    --&gt;\r\n\r\n    &lt;!-- Another sample, using keys to authenticate.\r\n    &lt;server&gt;\r\n      &lt;id&gt;siteServer&lt;/id&gt;\r\n      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;\r\n      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;\r\n    &lt;/server&gt;\r\n    --&gt;\r\n  &lt;/servers&gt;\r\n\r\n  &lt;!-- mirrors\r\n   | This is a list of mirrors to be used in downloading artifacts from remote repositories.\r\n   |\r\n   | It works like this: a POM may declare a repository to use in resolving certain artifacts.\r\n   | However, this repository may have problems with heavy traffic at times, so people have mirrored\r\n   | it to several places.\r\n   |\r\n   | That repository definition will have a unique id, so we can create a mirror reference for that\r\n   | repository, to be used as an alternate download site. The mirror site will be the preferred\r\n   | server for that repository.\r\n   |--&gt;\r\n  &lt;mirrors&gt;\r\n    &lt;!-- mirror\r\n     | Specifies a repository mirror site to use instead of a given repository. The repository that\r\n     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used\r\n     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.\r\n     |--&gt;\r\n    &lt;mirror&gt;\r\n      &lt;id&gt;alimaven&lt;/id&gt;\r\n      &lt;name&gt;aliyun maven&lt;/name&gt;\r\n      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;\r\n      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        \r\n    &lt;/mirror&gt;\r\n  &lt;/mirrors&gt;\r\n\r\n  &lt;!-- profiles\r\n   | This is a list of profiles which can be activated in a variety of ways, and which can modify\r\n   | the build process. Profiles provided in the settings.xml are intended to provide local machine-\r\n   | specific paths and repository locations which allow the build to work in the local environment.\r\n   |\r\n   | For example, if you have an integration testing plugin - like cactus - that needs to know where\r\n   | your Tomcat instance is installed, you can provide a variable here such that the variable is\r\n   | dereferenced during the build process to configure the cactus plugin.\r\n   |\r\n   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles\r\n   | section of this document (settings.xml) - will be discussed later. Another way essentially\r\n   | relies on the detection of a system property, either matching a particular value for the property,\r\n   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a\r\n   | value of \'1.4\' might activate a profile when the build is executed on a JDK version of \'1.4.2_07\'.\r\n   | Finally, the list of active profiles can be specified directly from the command line.\r\n   |\r\n   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact\r\n   |       repositories, plugin repositories, and free-form properties to be used as configuration\r\n   |       variables for plugins in the POM.\r\n   |\r\n   |--&gt;\r\n  &lt;profiles&gt;\r\n    &lt;!-- profile\r\n     | Specifies a set of introductions to the build process, to be activated using one or more of the\r\n     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;\r\n     | or the command line, profiles have to have an ID that is unique.\r\n     |\r\n     | An encouraged best practice for profile identification is to use a consistent naming convention\r\n     | for profiles, such as \'env-dev\', \'env-test\', \'env-production\', \'user-jdcasey\', \'user-brett\', etc.\r\n     | This will make it more intuitive to understand what the set of introduced profiles is attempting\r\n     | to accomplish, particularly when you only have a list of profile id\'s for debug.\r\n     |\r\n     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.--&gt;\r\n		&lt;profile&gt;\r\n			&lt;id&gt;jdk-1.8&lt;/id&gt;\r\n			&lt;activation&gt;\r\n				&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\r\n				&lt;jdk&gt;1.8&lt;/jdk&gt;\r\n			&lt;/activation&gt;\r\n			&lt;properties&gt;  \r\n				&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;  \r\n				&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;  \r\n				&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;  \r\n			&lt;/properties&gt;\r\n		&lt;/profile&gt;\r\n    \r\n    &lt;!--\r\n     | Here is another profile, activated by the system property \'target-env\' with a value of \'dev\',\r\n     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration\r\n     | might hypothetically look like:\r\n     |\r\n     | ...\r\n     | &lt;plugin&gt;\r\n     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;\r\n     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;\r\n     |\r\n     |   &lt;configuration&gt;\r\n     |     &lt;tomcatLocation&gt;${tomcatPath}&lt;/tomcatLocation&gt;\r\n     |   &lt;/configuration&gt;\r\n     | &lt;/plugin&gt;\r\n     | ...\r\n     |\r\n     | NOTE: If you just wanted to inject this configuration whenever someone set \'target-env\' to\r\n     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.\r\n     |\r\n    &lt;profile&gt;\r\n      &lt;id&gt;env-dev&lt;/id&gt;\r\n\r\n      &lt;activation&gt;\r\n        &lt;property&gt;\r\n          &lt;name&gt;target-env&lt;/name&gt;\r\n          &lt;value&gt;dev&lt;/value&gt;\r\n        &lt;/property&gt;\r\n      &lt;/activation&gt;\r\n\r\n      &lt;properties&gt;\r\n        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;\r\n      &lt;/properties&gt;\r\n    &lt;/profile&gt;\r\n    --&gt;\r\n  &lt;/profiles&gt;\r\n\r\n  &lt;!-- activeProfiles\r\n   | List of profiles that are active for all builds.\r\n   |\r\n  &lt;activeProfiles&gt;\r\n    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;\r\n    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;\r\n  &lt;/activeProfiles&gt;\r\n  --&gt;\r\n&lt;/settings&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 07:57:27.702218', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('51d310acbc3d474baf3df988371f68d1', '.gitignore文件', '<pre>\r\n<code class=\"language-git\">.mymetadata\r\n.checkstyle\r\n.classpath\r\n.project\r\n.class\r\n.war\r\n.zip\r\n.rar\r\n.idea\r\n*.iml\r\n*.py[cod]\r\n.settings/*\r\n/indexes/*\r\n/target/*\r\n/src/main/webapp/WEB-INF/classes/*\r\n/src/main/webapp/userfiles/*\r\n/target/</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-16 02:51:50.624135', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('537b389aa19b44c28804d93a593ef874', 'Oracle 11g服务器安装详细步骤', '<p><a href=\"https://jingyan.baidu.com/article/363872eccfb9266e4aa16f5d.html\" target=\"_blank\">https://jingyan.baidu.com/article/363872eccfb9266e4aa16f5d.html</a></p>', '2019-05-18 13:47:18.501609', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('53f43a237d204b0995e872b9387b846d', 'Kettle连接MySQL或Oracle等数据库出现问题', '<p>1. 错误信息：</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">错误连接数据库 [tcc] : org.pentaho.di.core.exception.KettleDatabaseException: \r\nError occurred while trying to connect to the database\r\n\r\nDriver class \'org.gjt.mm.mysql.Driver\' could not be found, make sure the \'MySQL\' driver (jar file) is installed.\r\norg.gjt.mm.mysql.Driver\r\n\r\norg.pentaho.di.core.exception.KettleDatabaseException: \r\nError occurred while trying to connect to the database\r\n\r\nDriver class \'org.gjt.mm.mysql.Driver\' could not be found, make sure the \'MySQL\' driver (jar file) is installed.\r\norg.gjt.mm.mysql.Driver</code></pre>\r\n\r\n<p>2. 解决方法</p>\r\n\r\n<p>下载jar包：mysql-connector-java-5.1.15-bin.jar或ojdbc6-11.2.0.3.jar等数据库连接包</p>\r\n\r\n<p>放到Kettle安装目录下：D:\\kettle\\data-integration\\lib</p>\r\n\r\n<p>重启Spoon.bat问题解决</p>', '2019-10-24 09:11:07.260968', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('5417c724dd43485e895d3160e7221c7b', 'Java后端解决跨域问题', '<p>1. 添加Maven依赖</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n	&lt;groupId&gt;com.thetransactioncompany&lt;/groupId&gt;\r\n	&lt;artifactId&gt;cors-filter&lt;/artifactId&gt;\r\n	&lt;version&gt;2.6&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>2. web.xml中添加过滤器</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;!--================================================== 解决跨域问题 ==================================================--&gt;\r\n&lt;!-- cors.allowOrigin指的可以通过的ip，*代表所有，可以使用指定的ip，多个的话可以用逗号分隔，默认为*\r\n	 cors.supportedMethods指的是请求方式 默认为*\r\n	 cors.supportedHeaders请求支持的头信息，默认为*\r\n	 cors.exposedHeaders暴露的头信息，默认的empy list\r\n	 cors.supportsCredentials支持证书，默认为true\r\n	 cors.maxAge 最大过期时间，默认为-1\r\n	 cors.tagRequests 默认为false\r\n	 cors.allowSubdomains允许子域 默认为false --&gt;\r\n&lt;filter&gt;  \r\n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;  \r\n    &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;/filter-class&gt;  \r\n    &lt;init-param&gt;  \r\n        &lt;param-name&gt;cors.allowOrigin&lt;/param-name&gt; \r\n        &lt;param-value&gt;*&lt;/param-value&gt; \r\n    &lt;/init-param&gt;  \r\n    &lt;init-param&gt;  \r\n        &lt;param-name&gt;cors.supportedMethods&lt;/param-name&gt; \r\n        &lt;param-value&gt;GET, POST, HEAD, PUT, DELETE&lt;/param-value&gt; \r\n    &lt;/init-param&gt;  \r\n    &lt;init-param&gt;  \r\n        &lt;param-name&gt;cors.supportedHeaders&lt;/param-name&gt; \r\n        &lt;param-value&gt;Accept, Origin, X-Requested-With, Content-Type, Last-Modified&lt;/param-value&gt; \r\n    &lt;/init-param&gt;  \r\n    &lt;init-param&gt;  \r\n        &lt;param-name&gt;cors.exposedHeaders&lt;/param-name&gt; \r\n        &lt;param-value&gt;Set-Cookie&lt;/param-value&gt; \r\n    &lt;/init-param&gt;  \r\n    &lt;init-param&gt;  \r\n        &lt;param-name&gt;cors.supportsCredentials&lt;/param-name&gt; \r\n        &lt;param-value&gt;true&lt;/param-value&gt; \r\n    &lt;/init-param&gt;  \r\n&lt;/filter&gt;  \r\n&lt;filter-mapping&gt;  \r\n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;  \r\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  \r\n&lt;/filter-mapping&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-09-06 05:30:25.289077', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('5598fc7a5c1547738ec1f5dc03d52e93', 'RedHat7安装MySQL5.7.19', '<p>1. 自定义目录说明</p>\r\n\r\n<p style=\"margin-left:40px\">(1)MySQL安装目录: /usr/local/mysql</p>\r\n\r\n<p style=\"margin-left:40px\">(2)数据库目录: /data/mysql</p>\r\n\r\n<p style=\"margin-left:40px\">(3)日志保存目录: /data/log/mysql</p>\r\n\r\n<p>2. 下载路径</p>\r\n\r\n<p style=\"margin-left:40px\"><a href=\"https://downloads.mysql.com/archives/community/\" target=\"_blank\">https://downloads.mysql.com/archives/community/</a></p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/RedHat7%E5%AE%89%E8%A3%85MySQL5.7.19/01.png\" style=\"height:482px; width:800px\" /></p>\r\n\r\n<p>3. 解压并复制到/usr/local/mysql</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">tar -zxvf mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz\r\nmv mysql-5.7.19-linux-glibc2.12-x86_64 /usr/local/mysql</code></pre>\r\n\r\n<p>4. 创建数据库目录/data/mysql</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">mkdir /data\r\nmkdir /data/mysql</code></pre>\r\n\r\n<p>5. 创建MySQL组, 用户, 并禁止用户登录shell</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">useradd -r -s /sbin/nologin -g mysql mysql -d /usr/local/mysql</code></pre>\r\n\r\n<p>6. 更改文件夹权限</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">chown –R mysql /usr/local/mysql\r\nchgrp –R mysql /usr/local/mysql\r\nchown -R mysql /data\r\nchmod -R 755 /data\r\nchown -R mysql /data/mysql</code></pre>\r\n\r\n<p>7. 修改/etc/my.cnf文件</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\">[client]\r\nport=3306\r\nsocket=/tmp/mysql.sock\r\n\r\n[mysql]\r\ndefault-character-set=utf8\r\n\r\n[mysqld]\r\nlower_case_table_names=1\r\ndefault-storage-engine=INNODB\r\ncharacter_set_server=utf8\r\nport=3306\r\nsocket=/tmp/mysql.sock\r\nbasedir=/usr/local/mysql\r\ndatadir=/data/mysql\r\ntmpdir=/tmp\r\npid-file=/data/mysql/mysql.pid\r\nuser=mysql\r\nbind-address=0.0.0.0\r\nexplicit_defaults_for_timestamp=true\r\n\r\n[mysqld_safe]\r\nopen-files-limit=65535\r\nlog-error=/data/log/mysql/mysql_error.log\r\nlog=/data/log/mysql/mysql.log</code></pre>\r\n\r\n<p>8. 初始化MySQL</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid --tmpdir=/tmp</code></pre>\r\n\r\n<p>记录上述语句生成的临时密码, 并执行如下语句</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/usr/local/mysql/bin/mysql_ssl_rsa_setup --datadir=/data/mysql</code></pre>\r\n\r\n<p>9.&nbsp;修改系统配置参数</p>\r\n\r\n<pre>\r\n<code>cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql\r\nvim /etc/init.d/mysql</code></pre>\r\n\r\n<p>在打开的文件中, 找到并修改如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\">basedir=/usr/local/mysql\r\ndatadir=/data/mysql</code></pre>\r\n\r\n<p>10. 创建MySQL日志文件</p>\r\n\r\n<pre>\r\n<code>mkdir /data/log\r\nmkdir /data/log/mysql\r\ntouch /data/log/mysql/mysql.log\r\ntouch /data/log/mysql/mysql_error.log</code></pre>\r\n\r\n<p>11. 创建MySQL的PID文件</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">touch /data/mysql/mysql.pid</code></pre>\r\n\r\n<p>12. 创建MySQL命令的软链接</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ln –s /usr/local/mysql/bin/mysql /usr/bin\r\nln –s /usr/local/mysql/bin/mysqladmin /usr/bin</code></pre>\r\n\r\n<p>13. 启动MySQL服务</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">service mysql start</code></pre>\r\n\r\n<p>14. 进入MySQL</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">mysql –u root –p</code></pre>\r\n\r\n<p>输入第8步中记录的临时密码</p>\r\n\r\n<p>15. 修改密码</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; set password=password(\'myNewPassword\')\r\nmysql&gt; exit</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-25 07:47:27.117210', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('55b4a069b8194eddbe25a088cc7dab4a', '关于WebSocket', '<p>1. 相对于HTTP的非持久化,&nbsp;WebSocket是一种持久化协议.</p>\r\n\r\n<p>2. 在没有WebSocket之前, 可能会用ajax轮询和long poll.</p>\r\n\r\n<p style=\"margin-left:40px\">(1)&nbsp;ajax轮询:&nbsp;让浏览器隔个几秒就发送一次请求, 询问服务器是否有新数据.</p>\r\n\r\n<p style=\"margin-left:40px\">(2)&nbsp;long poll: 其实原理跟ajax轮询差不多, 都是采用轮询的方式, 不过采取的是阻塞模型(一直打电话, 没收到就不挂电话), 也就是说, 客户端发起连接后, 如果没消息, 就一直不返回Response给客户端. 直到有消息才返回, 返回完之后, 客户端再次建立连接, 周而复始.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">(3) 这两个方式都表现出HTTP协议的被动性, 并且HTTP是非状态性的,&nbsp;每次都要重新传输identity info(鉴别信息), 来告诉服务端你是谁.&nbsp;而WebSocket只需要一次HTTP请求, 就会一直推送数据, 相当于是有状态的, 而且是主动的.&nbsp;</p>', '2019-04-22 03:09:45.184914', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('585768a33d094ed283c36f55e8fc2cde', 'Eclipse设置Java类和方法的注释模板', '<p>1.&nbsp;打开设置模板的窗口: Window-&gt;Preference-&gt;Java-&gt;Code Style-&gt;Code Template展开Comments</p>\r\n\r\n<p>2. 设置类的模板: 选择Types, 模板内容如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n * @Description: \r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: ${date} ${time}\r\n */</code></pre>\r\n\r\n<p>3. 设置方法的模板: 选择Methods, 模板内容如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n * @Description: \r\n * ${tags}\r\n */</code></pre>\r\n\r\n<p>4. 使用方法</p>\r\n\r\n<p style=\"margin-left:40px\">在类或者方法上面输入: /**, 然后按回车即可出现模板.&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package test;\r\n\r\n/**\r\n * \r\n * @Description: \r\n * @author: paulandcode\r\n * @email: paulandcode@gmail.com\r\n * @since: 2018年8月9日 下午1:23:46\r\n */\r\npublic class Yes {\r\n	\r\n	/**\r\n	 * \r\n	 * @Description: \r\n	 * @param str1\r\n	 * @param str2\r\n	 * @return\r\n	 */\r\n	static String test(String str1, String str2) {\r\n		return \"\";\r\n	}\r\n}</code></pre>\r\n\r\n<p>5. 设置重写方法的模板: 选择Overriding methods, 模板内容如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n * ${see_to_overridden}\r\n */</code></pre>\r\n\r\n<p>生成模板举例如下: (会返回接口或父类所对应方法的位置)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">/**\r\n *\r\n * 	@see com.artofsolving.jodconverter.DocumentFormatRegistry#getFormatByFileExtension(java.lang.String)\r\n */</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-09 05:56:41.181130', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('58b6b745edc14d848e7910a1b5d7d223', '将Spring的Been注入到静态工具类中', '<pre>\r\n<code class=\"language-java\">package com.paulandcode.schedule;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport com.paulandcode.entity.Data;\r\n\r\n@Component\r\npublic class ScheduleUtils {\r\n	private static RedisTemplate&lt;String, Object&gt; redisTemplate;\r\n\r\n	@Autowired\r\n	public void setRedisTemplate(RedisTemplate&lt;String, Object&gt; redisTemplate) {\r\n		ScheduleUtils.redisTemplate = redisTemplate;\r\n	}\r\n\r\n	public static void save(String key, String connection, String sql) {\r\n		Data data = new Data(key, connection, sql);\r\n		redisTemplate.boundListOps(\"sqlCache\").rightPush(data);\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-09-08 07:27:32.250077', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('58c05f1698aa4c878489ff3fe1b6247f', '根据日期生成目录', '<pre>\r\n<code class=\"language-java\">import java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\n/**\r\n * 根据日期生成目录\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 上午10:33:33\r\n */\r\npublic class DirectoryUtils {\r\n	/**\r\n	 * 生成目录\r\n	 * return 2018/07/26/1532572300220\r\n	 */\r\n	public static String getDir() {\r\n		StringBuilder sb = new StringBuilder(\"\");\r\n		Date date = new Date();\r\n		SimpleDateFormat format = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n		String path = format.format(date);\r\n		long time = new Date().getTime();\r\n		sb.append(path).append(\"/\").append(time);\r\n		return sb.toString();\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 02:38:35.087104', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('59c92df25773494daaa189ee5296a9e4', 'SpringContext工具类', '<pre>\r\n<code class=\"language-java\">import org.springframework.beans.BeansException;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.ApplicationContextAware;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * SpringContext 工具类\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:29:19\r\n */\r\n@Component\r\npublic class SpringContextUtils implements ApplicationContextAware {\r\n    public static ApplicationContext applicationContext; \r\n\r\n    /**\r\n     *\r\n     * @see org.springframework.context.ApplicationContextAware#setApplicationContext(org.springframework.context.ApplicationContext)\r\n     */\r\n    @Override\r\n    public void setApplicationContext(ApplicationContext applicationContext)\r\n            throws BeansException {\r\n        SpringContextUtils.applicationContext = applicationContext;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * 获得Bean.\r\n     * @param name Bean的名称\r\n     * @return\r\n     */\r\n    public static Object getBean(String name) {\r\n        return applicationContext.getBean(name);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * 获得Bean.\r\n     * @param name Bean的名称\r\n     * @param requiredType 类型\r\n     * @return\r\n     */\r\n    public static &lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType) {\r\n        return applicationContext.getBean(name, requiredType);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * 是否包含某个Bean.\r\n     * @param name Bean的名称\r\n     * @return\r\n     */\r\n    public static boolean containsBean(String name) {\r\n        return applicationContext.containsBean(name);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Bean是否是单例.\r\n     * @param name Bean的名称\r\n     * @return\r\n     */\r\n    public static boolean isSingleton(String name) {\r\n        return applicationContext.isSingleton(name);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Bean的类型.\r\n     * @param name Bean的名称\r\n     * @return\r\n     */\r\n    public static Class&lt;? extends Object&gt; getType(String name) {\r\n        return applicationContext.getType(name);\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 03:21:32.443792', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('5a1e008db75a46608af934a68dbab642', '使用Kitchen.bat执行kettle时传递参数', '<p>1.&nbsp;Kitchen命令如下, 这里要注意,&nbsp;-param后面的键值对两边要用双引号, 否则等号会被解析成空格导致赋值失败</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">E:/kettle/Kitchen.bat -file=E:/test/test.kjb -param:\"xmlFilePath=E:/test/test.xml\"</code></pre>\r\n\r\n<p>2. 在kjb页面右键, 点击作业设置(或者直接双击空白处)</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E4%BD%BF%E7%94%A8Kitchen.bat%E6%89%A7%E8%A1%8Ckettle%E6%97%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/01.png\" style=\"height:489px; width:800px\" /></p>\r\n\r\n<p>3. 在弹出的作业属性页面中, 选择命名参数选项卡, 填写命名参数. 填写的参数名是第1步中所写命令里的参数名xmlFilePath. 这一步的参数在这个kjb中使用.</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E4%BD%BF%E7%94%A8Kitchen.bat%E6%89%A7%E8%A1%8Ckettle%E6%97%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/02.png\" style=\"height:429px; width:709px\" /></p>\r\n\r\n<p>4. 在kjb页面双击要传递参数的转换,&nbsp;选择命名参数选项卡, 命名参数在这里自定义为filePath, 值就是第3步的参数名xmlFilePath, 两边要用${}包围.&nbsp;这一步的参数在这个双击的转换中使用.</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E4%BD%BF%E7%94%A8Kitchen.bat%E6%89%A7%E8%A1%8Ckettle%E6%97%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/03.png\" style=\"height:573px; width:800px\" /></p>\r\n\r\n<p>5. 在ktr页面右键, 点击转换设置(或者直接双击空白处)</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E4%BD%BF%E7%94%A8Kitchen.bat%E6%89%A7%E8%A1%8Ckettle%E6%97%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/04.png\" style=\"height:370px; width:800px\" /></p>\r\n\r\n<p>6.&nbsp;在弹出的转换属性页面中, 选择命名参数选项卡, 填写命名参数.&nbsp;填写的参数名是第4步所填写的命名参数filePath. 这一步的参数在这个ktr中使用.</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E4%BD%BF%E7%94%A8Kitchen.bat%E6%89%A7%E8%A1%8Ckettle%E6%97%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/05.png\" style=\"height:375px; width:744px\" /></p>\r\n\r\n<p>7. 使用参数, 参数名是第6步的filePath, 也用${}包围, 如下, 在表输入中使用.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E4%BD%BF%E7%94%A8Kitchen.bat%E6%89%A7%E8%A1%8Ckettle%E6%97%B6%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/06.png\" style=\"height:563px; width:800px\" /></p>', '2018-10-24 08:07:44.842112', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('5a7e299f7496441394b513acfc8a7853', 'Web响应信息工具类', '<pre>\r\n<code class=\"language-java\">package com.paulandcode.common;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Web响应信息\r\n * 前后端通信时一般0或200为正常, 1或500以及其他为异常\r\n * 数据库中字段的值一般0为false, 1为true\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 2019/3/27 17:23\r\n */\r\npublic class R extends HashMap&lt;String, Object&gt; {\r\n    private static final long serialVersionUID = -7035368021961298846L;\r\n\r\n    /**\r\n     * 构造函数, 默认成功.\r\n     */\r\n    public R() {\r\n        put(\"code\", 0);\r\n    }\r\n\r\n    /**\r\n     * 响应未知异常.\r\n     *\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public static R err() {\r\n        return err(1, \"未知异常, 请联系管理员! \");\r\n    }\r\n\r\n    /**\r\n     * 响应自定义异常信息.\r\n     *\r\n     * @param msg 异常信息\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public static R err(String msg) {\r\n        return err(1, msg);\r\n    }\r\n\r\n    /**\r\n     * 响应自定义异常信息和状态码.\r\n     *\r\n     * @param code 状态码\r\n     * @param msg 异常信息\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public static R err(int code, String msg) {\r\n        R r = new R();\r\n        r.put(\"code\", code);\r\n        r.put(\"msg\", msg);\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 响应成功.\r\n     *\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public static R ok() {\r\n        return new R();\r\n    }\r\n\r\n    /**\r\n     * 响应成功并自定义信息.\r\n     *\r\n     * @param msg 成功信息\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public static R ok(String msg) {\r\n        R r = new R();\r\n        r.put(\"msg\", msg);\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 响应成功并加入一些键值对.\r\n     *\r\n     * @param map 键值对\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public static R ok(Map&lt;String, Object&gt; map) {\r\n        R r = new R();\r\n        r.putAll(map);\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 响应信息移除指定键值对.\r\n     *\r\n     * @param key 键\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public R remove(String key){\r\n        super.remove(key);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 响应中加入一个键值对.\r\n     *\r\n     * @param key 键\r\n     * @param value 值\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    @Override\r\n    public R put(String key, Object value) {\r\n        super.put(key, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 放入响应数据\r\n     *\r\n     * @param data 响应数据\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public R data(Object data) {\r\n        return put(\"data\", data);\r\n    }\r\n\r\n    /**\r\n     * 放入数据总数\r\n     *\r\n     * @param count 总数\r\n     * @return com.paulandcode.common.R\r\n     */\r\n    public R count(int count) {\r\n        return put(\"count\", count);\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2019-03-27 11:14:50.970500', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('5c9984862ac44a3f88c9cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed.java.net.UnknownHostException.', '<p>1. 详细错误信息如下</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ERROR  - Get local host name failed -com.trs.infra.cluster.ClusterConfig.getMemberHost(ClusterConfig.java:293) \r\njava.net.UnknownHostException: localhost: localhost\r\n        at java.net.InetAddress.getLocalHost(InetAddress.java:1353) \r\n        at xxxxxxx 产品异常信息 \r\n        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1029) \r\n        at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:862) \r\n        at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:4013) \r\n        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4357) \r\n        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:823) \r\n        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:807) \r\n        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:595) \r\n        at org.apache.catalina.core.StandardHostDeployer.install(StandardHostDeployer.java:277) \r\n        at org.apache.catalina.core.StandardHost.install(StandardHost.java:832) \r\n        at org.apache.catalina.startup.HostConfig.deployDirectories(HostConfig.java:701) \r\n        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:432) \r\n        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:983) \r\n        at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:349) \r\n        at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119) \r\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1091) \r\n        at org.apache.catalina.core.StandardHost.start(StandardHost.java:789) \r\n        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1083) \r\n        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:478) \r\n        at org.apache.catalina.core.StandardService.start(StandardService.java:480) \r\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:2313) \r\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:556) \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) \r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) \r\n        at java.lang.reflect.Method.invoke(Method.java:597) \r\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:287) \r\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:425)</code></pre>\r\n\r\n<p>2.&nbsp;出错的Java代码</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">InetAddress localhost = InetAddress.getLocalHost();</code></pre>\r\n\r\n<p>3. 分析问题</p>\r\n\r\n<p style=\"margin-left:40px\">ping &nbsp;127.0.0.1 &nbsp;可以ping通&nbsp;<br />\r\nping &nbsp;localhost &nbsp;不通&nbsp;<br />\r\n说明是主机映射的原因</p>\r\n\r\n<p>4. 解决方法</p>\r\n\r\n<p style=\"margin-left:40px\">在Linux的/etc/hosts文件最后一行加入如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">127.0.0.1 www.paulandcode.com localhost</code></pre>\r\n\r\n<p style=\"margin-left:40px\">第一部份: 网络IP地址<br />\r\n第二部份: 主机名或域名<br />\r\n第三部份: 主机名别名</p>', '2018-07-19 06:54:21.009021', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('5ec164d307bb495e91e4f9acb9f9218e', '@Autowired与@Resource的区别', '<p>两者都可以注入Bean, 只是注入的方式不同</p>\r\n\r\n<p>1.&nbsp;@Autowired: 通过Bean的名称注入</p>\r\n\r\n<p>2.&nbsp;@Resource: 通过Bean的类型注入</p>', '2019-03-26 10:35:07.426881', '22ac56c65a0d44c5bf6b45e876c742f9');
INSERT INTO `blog_blog` VALUES ('5ee6a27331684273a3dccfd6591dbcc4', '2018.2.4版本IDEA无法连接SVN', '<p>1. 2018.2.4版本IDEA使用SVN时需要安装TortoiseSVN客户端, 下载地址:&nbsp;<a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\">https://tortoisesvn.net/downloads.html</a></p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/2018.2.4%E7%89%88%E6%9C%ACIDEA%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5SVN/01.png\" style=\"height:426px; width:800px\" /></p>\r\n\r\n<p>安装时需要注意一点, IDEA需要用到command line client tools, 而TortoiseSVN默认不安装这个, 所以要改一下选项, 将原来的红叉改成[Will be installed ...]这个选项, 如下图</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/2018.2.4%E7%89%88%E6%9C%ACIDEA%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5SVN/02.png\" style=\"height:544px; width:800px\" /></p>\r\n\r\n<p>2. SVN服务端可以选择http或者https, 如果是https, 则IDEA连接SVN时会因为没有证书而无法连接, 需要作如下修改</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 将SSH连接方式改为密码形式</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/2018.2.4%E7%89%88%E6%9C%ACIDEA%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5SVN/03.png\" style=\"height:555px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(2)&nbsp;清除认证信息</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/2018.2.4%E7%89%88%E6%9C%ACIDEA%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5SVN/04.png\" style=\"height:548px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(3) 使用SVN客户端登录, 客户端会询问是否保存什么凭证, 有两个选项,&nbsp;一个是保存,&nbsp;一个是永久保存,&nbsp;永久保存后再次使用IDEA连接SVN即可</p>', '2018-11-06 05:20:26.649903', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('60b645d6849548bc8b9db288d4fc48ec', '将Tomcat注册为Windows服务', '<p>1. 注册服务</p>\r\n\r\n<p style=\"margin-left:40px\">cmd到Tomcat根目录下的bin目录, 输入</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">service.bat install service_name (service_name是自定义服务名)</code></pre>\r\n\r\n<p>2. 开机自动启动</p>\r\n\r\n<p style=\"margin-left:40px\">在服务中找到这个服务点击右键 ==&gt; 属性 ==&gt; 启动类型改为自动即可设为开机自动启动</p>\r\n\r\n<p>3. 修改Tomcat服务默认内存</p>\r\n\r\n<p style=\"margin-left:40px\">3.1&nbsp;cmd到regedit注册机中, 找到如下路径: HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Apache Software Foundation\\Procrun 2.0\\service_name\\Parameters\\Java</p>\r\n\r\n<p style=\"margin-left:40px\">3.2 修改左侧的JvmMs和JvmMx的数据值, 点击十进制, 改成128和512, 或者更大.&nbsp;</p>\r\n\r\n<p>4. 删除服务&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">cmd输入命令:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sc delete service_name (service_name是服务名)</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-11-20 10:04:56.822706', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('653cd06a0bd040749fe92d4734cc6c24', 'Eclipse常用配置', '<p>1.启动Eclipse时重新设置workspace<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences&mdash;&gt;General&mdash;&gt;Startup and Shutdown&mdash;&gt;Workspaces&mdash;&gt;选中Prompt for workspace on startup</p>\r\n\r\n<p>2.启动Eclipse时刷新workspace<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences&mdash;&gt;General&mdash;&gt;Startup and Shutdown&mdash;&gt;Workspaces&mdash;&gt;选中Refresh workspace on startup</p>\r\n\r\n<p>3.设置web项目启动后默认弹出浏览器<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences&mdash;&gt;General&mdash;&gt;Web Browser&mdash;&gt;在External web browser中New</p>\r\n\r\n<p>4.Eclipse修改jsp的默认编码<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences-&gt;Web-&gt;JSP Files-&gt;Encoding</p>\r\n\r\n<p>5.关闭Eclipse的jap页面错误检查<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences-&gt;Validation-&gt; 去掉对应的对勾<br />\r\n&nbsp;&nbsp; &nbsp;JSP Content Validator JSP文本验证 &nbsp; &nbsp; &nbsp;Manual 提示<br />\r\n&nbsp;&nbsp; &nbsp;JSP Syntax Validator &nbsp;JSP语法验证 &nbsp; &nbsp; &nbsp;Build 编译</p>\r\n\r\n<p>6.Eclipse修改字体大小<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences&mdash;&gt;General-&gt;Appearance-&gt;Colors and Font-&gt;Basic-&gt;Text Font&nbsp;</p>\r\n\r\n<p>7.Eclipse修改工作空间的默认编码<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences&mdash;&gt;General-&gt;Workspace-&gt;右侧Text file encoding</p>\r\n\r\n<p>8.选中了一个单词 &ldquo;String&rdquo; ，其他相同的单词&ldquo;String&rdquo; 的颜色就会变化<br />\r\n&nbsp;&nbsp; &nbsp;&quot;Window&quot;-&quot;preferences&quot;-&quot;Java&quot;-&quot;Editor&quot;-&quot;Mark Occurrences&quot;复选框勾选&nbsp;</p>\r\n\r\n<p>9.改变classes的位置，发布到 WEB-INF 下的 classes 里<br />\r\n&nbsp;&nbsp; &nbsp;a.eclipse新建的Dynamic web project 默认是将类编译在build如果在eclipse中配置了tomcate（server项），用自带的发布功能，是能自动识别的。<br />\r\n&nbsp;&nbsp; &nbsp;b.自已修改到WEB-INF下也是可以的，要修改eclipse设置，具体做法右键你的工程－〉java Build Path-〉source项页面最下面的default out folder，选择到你的web-inf 目录的classes下，没有要新建,好像您没有使用自动发布功能.</p>\r\n\r\n<p>10.源码包导入方法<br />\r\n&nbsp;&nbsp; &nbsp;a、Navigate--&gt;Open Type--&gt;输入自己想要查看的类--&gt;双击要查看类--&gt;如果没有源码就会弹出源码选择框--&gt;选择本地源码即可<br />\r\n&nbsp;&nbsp; &nbsp;b、右键需要导入源码的项目--&gt;Bulid Path--&gt;Configure Build path--&gt;Libraries选项卡--&gt;找到jar包--&gt;展开--&gt;选中Source attachment--&gt;Edit--&gt;选择本地源码</p>\r\n\r\n<p>11.设置maven的配置文件&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;Window&mdash;&gt;Preferences&mdash;&gt;Maven-&gt;User Settings 设置完要点一下Update Settings</p>', '2018-07-14 23:26:02.799935', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('661bd4590cfb4e589ed234ba3dd8b128', 'Nginx的一些默认目录及文件', '<p>1. 可以使用如下命令查看文件夹的目录结构:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo tree /etc/nginx</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/Nginx%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%96%87%E4%BB%B6/01.png\" style=\"height:499px; width:624px\" /></p>\r\n\r\n<p>2.&nbsp;网站文件</p>\r\n\r\n<p>/var/www/html为网站文件存放的地方, 默认只有Nginx欢迎页面, 可以通过改变Nginx配置文件的方式来修改这个位置.&nbsp;</p>\r\n\r\n<p>3.&nbsp;服务器配置文件</p>\r\n\r\n<p>&nbsp; &nbsp; 01.&nbsp;/etc/nginx:</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Nginx配置文件目录, 所有的Nginx配置文件都在这里.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; 02.&nbsp;/etc/nginx/nginx.conf:&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; Nginx的主配置文件, 可以修改它来改变Nginx的全局配置.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; 03.&nbsp;/etc/nginx/sites-available:&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; 这个目录存储每一个网站的&quot;server blocks&quot;, Nginx通常不会使用这些配置, 除非它们被链接到sites-enabled目录. 一般所有的server block配置都在这个目录中设置, 然后软链接到别的目录.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; 04.&nbsp;/etc/nginx/sites-enabled:</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; 这个目录存储生效的&quot;server blocks&quot;配置. 通常, 这个配置都是链接到sites-available目录中的配置文件.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; 05.&nbsp;/etc/nginx/snippets:</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; 这个目录主要可以包含在其它Nginx配置文件中的配置片段, 重复的配置都可以重构为配置片段.&nbsp;</p>\r\n\r\n<p>4.&nbsp;日志文件</p>\r\n\r\n<p>&nbsp; &nbsp; 01.&nbsp;/var/log/nginx/access.log:</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;每一个访问请求都会默认记录在这个文件中, 除非你做了其它设置.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; 02.&nbsp;/var/log/nginx/error.log:&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;任何Nginx的错误信息都会记录到这个文件中.&nbsp;</p>', '2018-07-25 07:59:50.376545', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('66765477f3be4a44bc527b835760ec70', 'Properties载入工具类', '<p>1. 工具类如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * properties载入工具类\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年5月18日 下午13:27:13\r\n */\r\npublic class PropertiesLoader {\r\n	private final Properties properties;\r\n\r\n	public PropertiesLoader(String... resourcePaths) {\r\n		properties = loadProperties(resourcePaths);\r\n	}\r\n\r\n	/**\r\n	 * 载入多个properties文件\r\n	 * \r\n	 * @param resourcePaths\r\n	 * @return\r\n	 */\r\n	private Properties loadProperties(String[] resourcePaths) {\r\n		Properties props = new Properties();\r\n		for (String location : resourcePaths) {\r\n			InputStreamReader is = null;\r\n			try {\r\n				is = new InputStreamReader(PropertiesLoader.class.getClassLoader().getResourceAsStream(location),\r\n						\"UTF-8\");\r\n				props.load(is);\r\n			} catch (Exception e) {\r\n\r\n			} finally {\r\n				try {\r\n					is.close();\r\n				} catch (IOException e) {\r\n				}\r\n			}\r\n		}\r\n		return props;\r\n	}\r\n\r\n	/**\r\n	 *  获得字符串参数\r\n	 * \r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	public String getConfig(String key) {\r\n		if (properties.containsKey(key)) {\r\n			return properties.getProperty(key);\r\n		}\r\n		return \"\";\r\n	}\r\n	\r\n	/**\r\n	 * \r\n	 * 获得数字参数 \r\n	 * @param key\r\n	 * @return\r\n	 */\r\n	public int getIntConfig(String key) {\r\n		return Integer.parseInt(getConfig(key));\r\n	}\r\n}</code></pre>\r\n\r\n<p>2. 使用</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">public static PropertiesLoader loader = new PropertiesLoader(\"config/config.properties\");\r\n\r\npublic void test() {\r\n    String content = loader.getConfig(\"content\");\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-09-03 00:14:26.669459', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('66a0aa39a114440fa3bacd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都类似)', '<p>1. 在IDEA上通过Git或者GitHub检出项目</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87IDEA%E4%BD%BF%E7%94%A8Git%28IDEA%2C%20PyCharm%2C%20AndroidStudio%E7%AD%89%E8%BF%99%E4%BA%9B%E5%A5%97%E8%B7%AF%E9%83%BD%E7%B1%BB%E4%BC%BC%29/01.png\" style=\"height:592px; width:800px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87IDEA%E4%BD%BF%E7%94%A8Git%28IDEA%2C%20PyCharm%2C%20AndroidStudio%E7%AD%89%E8%BF%99%E4%BA%9B%E5%A5%97%E8%B7%AF%E9%83%BD%E7%B1%BB%E4%BC%BC%29/02.png\" style=\"height:318px; width:800px\" /></p>\r\n\r\n<p>2. 更新和提交</p>\r\n\r\n<p style=\"margin-left:40px\">(1)按键</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87IDEA%E4%BD%BF%E7%94%A8Git%28IDEA%2C%20PyCharm%2C%20AndroidStudio%E7%AD%89%E8%BF%99%E4%BA%9B%E5%A5%97%E8%B7%AF%E9%83%BD%E7%B1%BB%E4%BC%BC%29/03.png\" style=\"height:171px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">上图5个按键分别是：更新、提交、比较、历史、Revert</p>\r\n\r\n<p style=\"margin-left:40px\">(2)文件类型</p>\r\n\r\n<p style=\"margin-left:40px\">白：无修改；蓝：修改； 红：新增未Add Git； 绿：新增Add to Git</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87IDEA%E4%BD%BF%E7%94%A8Git%28IDEA%2C%20PyCharm%2C%20AndroidStudio%E7%AD%89%E8%BF%99%E4%BA%9B%E5%A5%97%E8%B7%AF%E9%83%BD%E7%B1%BB%E4%BC%BC%29/04.png\" style=\"height:360px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(3)更新</p>\r\n\r\n<p style=\"margin-left:40px\">点击更新后，请在Event Log页面查看结果（可能有种种原因更新失败）</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87IDEA%E4%BD%BF%E7%94%A8Git%28IDEA%2C%20PyCharm%2C%20AndroidStudio%E7%AD%89%E8%BF%99%E4%BA%9B%E5%A5%97%E8%B7%AF%E9%83%BD%E7%B1%BB%E4%BC%BC%29/05.png\" style=\"height:201px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(4)提交</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;1&gt;点击Commit 按钮, 会直接提交至本地库.&nbsp;更新至远程库需要再Push一次:&nbsp;VCS --&gt; Git --&gt; Push</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;2&gt;点击Commit and Push: 提交到本地, 并且提交到远程仓库,&nbsp;Commit and Push按钮的位置在提交页面Commit按钮旁边的下拉箭头:&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87IDEA%E4%BD%BF%E7%94%A8Git%28IDEA%2C%20PyCharm%2C%20AndroidStudio%E7%AD%89%E8%BF%99%E4%BA%9B%E5%A5%97%E8%B7%AF%E9%83%BD%E7%B1%BB%E4%BC%BC%29/06.png\" style=\"height:447px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(5)比较</p>\r\n\r\n<p style=\"margin-left:40px\">在History中右键compare</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode.com/blogs/%E9%80%9A%E8%BF%87IDEA%E4%BD%BF%E7%94%A8Git%28IDEA%2C%20PyCharm%2C%20AndroidStudio%E7%AD%89%E8%BF%99%E4%BA%9B%E5%A5%97%E8%B7%AF%E9%83%BD%E7%B1%BB%E4%BC%BC%29/07.png\" style=\"height:268px; width:800px\" /></p>', '2018-07-25 07:55:31.334629', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('66b72ad934f24ce48aa0ae4aa59c9cfc', 'spring源码构建时缺失spring-cglib-repack和spring-objenesis-repack', '<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/spring%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA%E6%97%B6%E7%BC%BA%E5%A4%B1spring-cglib-repack%E5%92%8Cspring-objenesis-repack/01.png\" style=\"height:1035px; width:800px\" /></p>\r\n\r\n<p>执行这两个命令，缺少的jar包就自动打好放在相应的位置了</p>', '2019-03-15 02:46:21.731948', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('6ad3d4aa18b141c7a34da503fc89e1d6', '不使用Request获得Web项目的全路径', '<pre>\r\n<code class=\"language-java\">String path = Test.class.getResource(\"\").getFile();</code></pre>\r\n\r\n<p>假如Test.class类文件在blog项目的com/paulandcode/utils目录下, 则上面的path值为:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/D:/Tomcat/webapps/blog/WEB-INF/classes/com/paulandcode/utils/</code></pre>\r\n\r\n<p>注意: 得到的值前后都有个斜杠</p>', '2018-10-24 08:31:42.678465', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('6ca7b63e19df48598e8381e4083ba382', '报错： IllegalArgumentException: The main resource set specified ... is not valid', '<p>1. 错误信息如下：</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/spring]]\r\n    at java.util.concurrent.FutureTask.report(Unknown Source)\r\n    at java.util.concurrent.FutureTask.get(Unknown Source)\r\n    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:941)\r\n    at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:872)\r\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\r\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1421)\r\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1411)\r\n    at java.util.concurrent.FutureTask.run(Unknown Source)\r\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\r\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\r\n    at java.lang.Thread.run(Unknown Source)\r\nCaused by: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/spring]]\r\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)\r\n    ... 6 more\r\nCaused by: org.apache.catalina.LifecycleException: Failed to start component [org.apache.catalina.webresources.StandardRoot@19d5011c]\r\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)\r\n    at org.apache.catalina.core.StandardContext.resourcesStart(StandardContext.java:4868)\r\n    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5003)\r\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\r\n    ... 6 more\r\nCaused by: java.lang.IllegalArgumentException: The main resource set specified [D:\\Users\\chengyq\\eclipse-workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\spring] is not valid\r\n    at org.apache.catalina.webresources.StandardRoot.createMainResourceSet(StandardRoot.java:748)\r\n    at org.apache.catalina.webresources.StandardRoot.startInternal(StandardRoot.java:706)\r\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\r\n    ... 9 more</code></pre>\r\n\r\n<p>2. 错误原因</p>\r\n\r\n<p>之前创建了一个名为spring的项目，已经删除， 但是server中还有这个项目。现在运行其他项目，报错找不到已经删除的项目。</p>\r\n\r\n<p>3. 解决方法</p>\r\n\r\n<p style=\"margin-left:40px\">3.1 找到如下路径：&nbsp;workspace\\metadata\\plugins\\org.eclipse.wst.server.core\\tmp0\\conf, 将其中已删除项目对应的&lt;Context&gt;标签删除。</p>\r\n\r\n<p style=\"margin-left:40px\">3.2&nbsp;再删除Eclipse左侧Servers中对应的Server.xml文件中多余的<code>&lt;Context&gt;</code>配标签。</p>', '2019-05-18 14:20:47.683925', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('7066d496355d41a0b15f1e7bf172f69b', 'Sublime安装自动识别编码插件', '<p>1. 打开Sublime,&nbsp;按Ctrl+ `(此符号为tab按键上面的按键) 调出console</p>\r\n\r\n<p>2.&nbsp;粘贴以下代码到命令行并回车</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import urllib.request,os; pf = \'Package Control.sublime-package\'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), \'wb\').write(urllib.request.urlopen( \'http://sublime.wbond.net/\' + pf.replace(\' \',\'%20\')).read())</code></pre>\r\n\r\n<p>3.&nbsp;如果在菜单栏上的Perferences-&gt;中看到package control这一项，则package control安装成功</p>\r\n\r\n<p>4. 点击package control, 输入&quot;Install Package&rdquo; 稍等几秒后, 会弹出一个输入框, 在输入框内输入&ldquo;CovertToUTF8&rdquo;安装自动识别编码插件.&nbsp;</p>', '2018-09-14 03:13:21.520010', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('70d4234aeebb4d7b9620be7bcb97d64a', '书单', '<p>1.&nbsp;<strong>《深入理解Java虚拟机：JVM高级特性与最佳实践》, 周志明</strong></p>\r\n\r\n<p><strong>2.&nbsp;《HotSpot实战》,&nbsp;</strong>陈涛</p>\r\n\r\n<p>3.&nbsp;<strong>《Java并发编程实战》,&nbsp;</strong>Brian Goetz</p>\r\n\r\n<p><strong>4.&nbsp;《java多线程编程核心技术》,&nbsp;</strong>高洪岩</p>\r\n\r\n<p><strong>5.&nbsp;《Effective Java中文版》,&nbsp;</strong>Joshua Bloch</p>\r\n\r\n<p><strong>6.&nbsp;《深入分析Java Web技术内幕》,&nbsp;</strong>许令波</p>\r\n\r\n<p><strong>7.&nbsp;《大型网站技术架构 核心原理与案例分析》,&nbsp;</strong>李智慧</p>\r\n\r\n<p><strong>8.&nbsp;《大型网站系统与Java中间件实践》,&nbsp;</strong>曾宪杰</p>\r\n\r\n<p><strong>9.&nbsp;《从Paxos到ZooKeeper分布式一致性原理与实践》,&nbsp;</strong>倪超</p>\r\n\r\n<p><strong>10.&nbsp;《MySQL5.6从零开始学》,&nbsp;</strong>刘增杰和李坤</p>\r\n\r\n<p><strong>11.&nbsp;《Spring源码深度解析》,&nbsp;</strong>郝佳</p>', '2019-03-15 02:30:57.365094', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('757dacdafdc44f0c8cc5424b8914e4f8', 'Maven的配置和使用', '<p>1. 下载地址:&nbsp;<a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\">http://maven.apache.org/download.cgi</a></p>\r\n\r\n<p>2.&nbsp;配置系统环境</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;1&gt;MAVEN_HOME</p>\r\n\r\n<p style=\"margin-left:80px\">C:\\apache-maven-3.3.3</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;2&gt;PATH追加(注意, 如果原来末尾没有英文分号, 需要加上英文分号后追加)</p>\r\n\r\n<p style=\"margin-left:80px\">%MAVEN_HOME%\\bin</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;3&gt;CMD界面输入MVN -V后出现版本号, 则说明配置成功</p>\r\n\r\n<p>3.&nbsp;更改Maven的仓库默认存放地址</p>\r\n\r\n<p style=\"margin-left:40px\">修改C:\\apache-maven-3.3.3 下的 conf 文件夹下的 settings.xml文件, 更改localRepository配置节点:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;localRepository&gt;E:/workspace/maven/repo&lt;/localRepository&gt;</code></pre>\r\n\r\n<p>4.&nbsp;配置Maven的阿里云镜像中央仓库</p>\r\n\r\n<p style=\"margin-left:40px\">修改C:\\apache-maven-3.3.3下的conf文件夹下的 settings.xml文件</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;mirrors&gt;\r\n  &lt;mirror&gt;\r\n    &lt;id&gt;alimaven&lt;/id&gt;\r\n    &lt;name&gt;aliyun maven&lt;/name&gt;\r\n    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;\r\n    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        \r\n  &lt;/mirror&gt;\r\n&lt;/mirrors&gt;</code></pre>\r\n\r\n<p>5.&nbsp;修改所有Maven项目默认JDK版本</p>\r\n\r\n<p style=\"margin-left:40px\">修改C:\\apache-maven-3.3.3下的conf文件夹下的 settings.xml文件</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;profiles&gt;\r\n    &lt;profile&gt;\r\n        &lt;id&gt;jdk-1.8&lt;/id&gt;\r\n        &lt;activation&gt;\r\n            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\r\n            &lt;jdk&gt;1.8&lt;/jdk&gt;\r\n        &lt;/activation&gt;\r\n        &lt;properties&gt;  \r\n            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;  \r\n            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;  \r\n            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;  \r\n        &lt;/properties&gt;\r\n    &lt;/profile&gt;\r\n&lt;/profiles&gt;</code></pre>\r\n\r\n<p>6.&nbsp;修改某个maven项目的默认JDK版本, 在Maven项目的pom文件加入如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;plugin&gt;\r\n	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\r\n	&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\r\n	&lt;version&gt;3.5.1&lt;/version&gt;\r\n	&lt;configuration&gt;\r\n		&lt;source&gt;1.8&lt;/source&gt;\r\n		&lt;target&gt;1.8&lt;/target&gt;\r\n		&lt;showWarnings&gt;true&lt;/showWarnings&gt;\r\n	&lt;/configuration&gt;\r\n&lt;/plugin&gt;</code></pre>\r\n\r\n<p>7.&nbsp;下载Maven相关包</p>\r\n\r\n<p style=\"margin-left:40px\">在CMD中敲并回车执行: mvn help:system</p>\r\n\r\n<p>8. 在Myeclipse中使用Maven</p>\r\n\r\n<p style=\"margin-left:40px\">(1)打开myeclipse2014 选择 window -&gt; prefences -&gt; MyEclipse 下的-&gt; Maven4MyEclipse</p>\r\n\r\n<p style=\"margin-left:40px\">(2)1、修改 &quot; Maven4MyEclipse&quot; 下的Installations 点击 &rdquo; Add &ldquo; 选择目录 &rdquo; C:\\apache-maven-3.3.3&ldquo;&nbsp;<br />\r\nGlobal settings from installation directory( open file) 选择C:\\apache-maven-3.3.3\\conf\\settings.xml</p>\r\n\r\n<p style=\"margin-left:40px\">(3)修改&quot;Maven4MyEclipse&quot; 下的 User Settings &nbsp;下的 User Settings 属性&rdquo; C:\\apache-maven-3.3.3\\conf\\settings.xml&ldquo;, 保存确认.&nbsp;</p>', '2018-07-19 08:26:03.612918', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('768ec5ff0dc34083941b0e1149e9f482', 'Tomcat9需要配置环境变量', '<p>1. Tomcat8不需要配置, 而Tomcat9需要配置环境变量</p>\r\n\r\n<p>2. 配置如下</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:1000px\">\r\n	<tbody>\r\n		<tr>\r\n			<td>变量名</td>\r\n			<td>变量值(新增或追加)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>TOMCAT_HOME</td>\r\n			<td>D:\\Tomcat\\apache-tomcat-9.0.0.M1-windows-x64\\apache-tomcat-9.0.0.M1</td>\r\n		</tr>\r\n		<tr>\r\n			<td>PATH</td>\r\n			<td>;%TOMCAT_HOME%\\bin</td>\r\n		</tr>\r\n		<tr>\r\n			<td>CLASSPATH</td>\r\n			<td>;%TOMCAT_HOME%\\lib\\servlet-api.jar</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>', '2018-07-23 02:34:41.797868', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('781f6d89bfad49e99ca631a17f754db9', 'Java执行Bat命令(或其他命令)', '<p>&nbsp;下面代码中的&quot;Bat Finished!&nbsp;&quot;是为了标记Bat执行结束, 可以在Bat文件的最后加入&quot;echo Bat Finished!&nbsp;&quot;来标记Bat执行结束.&nbsp;&quot;Bat Success!&nbsp;&quot;是为了标记Bat执行成功, &quot;Bat Fail!&nbsp;&quot;标记Bat执行失败, 可以将Bat文件进行相应的echo输出达到这样的效果. 这样做的目的是为了让java知道Bat是否成功执行结束, 若程序无需知道是否执行结束, 则Process process = processBuilder.start();这一句代码之后的其他代码可以去掉.</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.ribeen.utils;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\n/**\r\n * 执行bat命令\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/9 14:59\r\n */\r\npublic class BatUtils {\r\n    /**\r\n     * 执行kettle命令\r\n     *\r\n     * @param batPath     bat文件路径, 如: E:/test/test.bat\r\n     * @param args     参数, 最多可以有9个参数, 从左到右代表1到9, 在Bat文件中用1%到9%表示参数\r\n     * @return boolean 执行成功或失败\r\n     */\r\n    public static boolean doBat(String batPath, String... args) {\r\n        boolean result = false;\r\n        String[] command;\r\n        if (args == null || args.length == 0) {\r\n            command = new String[]{batPath};\r\n        } else {\r\n            command = new String[args.length + 1];\r\n            command[0] = batPath;\r\n            System.arraycopy(args, 0, command, 1, args.length);\r\n        }\r\n        ProcessBuilder processBuilder = new ProcessBuilder(command);\r\n        processBuilder.redirectErrorStream(true);\r\n        try {\r\n            Process process = processBuilder.start();\r\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream(),\r\n                    StandardCharsets.UTF_8));\r\n            String line;\r\n            while ((line = bufferedReader.readLine()) != null) {\r\n                System.out.println(line);\r\n                // 如果命令执行结束\r\n                if (line.contains(\"Bat Finished! \")) {\r\n                    // 执行结束后再执行一行, 表示执行成功或者失败\r\n                    line = bufferedReader.readLine();\r\n                    System.out.println(line);\r\n                    if (line.contains(\"Bat Success! \")) {\r\n                        result = true;\r\n                    } else if (line.contains(\"Bat Fail! \")){\r\n                        // 若执行失败, 则默认result为false\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-24 01:58:13.619642', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('78df6ea17bcb47acb11a81f6bd1f7fc0', '附件上传下载', '<p>1. web.xml中需要加入如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;context-param&gt;\r\n  &lt;param-name&gt;webAppRootKey&lt;/param-name&gt;\r\n  &lt;param-value&gt;webPath&lt;/param-value&gt;\r\n&lt;/context-param&gt;</code></pre>\r\n\r\n<p>2. Java代码如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URLEncoder;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\n/**\r\n * 附件上传下载\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 上午11:20:35\r\n */\r\npublic class FileUtils {\r\n	/**\r\n	 * 附件上传\r\n	 * \r\n	 * @author Paul\r\n	 * @param file\r\n	 *            HTML表单上传的附件\r\n	 * @param subPath\r\n	 *            如: storage/excel\r\n	 * @return 附件最终路径\r\n	 */\r\n	public static String fileUpload(MultipartFile file, String subPath) {\r\n		// webPath在web.xml中配置, D:\\Java\\apache-tomcat-9.0.0\\webapps\\blog\\\r\n		String basePath = System.getProperty(\"webPath\");\r\n		// D:/Java/apache-tomcat-9.0.0/webapps/blog/storage/excel\r\n		String path = basePath.replaceAll(\"\\\\\\\\\", \"/\") + subPath;\r\n		// D:/Java/apache-tomcat-9.0.0/webapps/blog/storage/excel/test.xls\r\n		String finalPath = path + \"/\" + file.getOriginalFilename();\r\n		File dir = new File(path);\r\n		if (!dir.exists()) {\r\n			dir.mkdirs();\r\n		}\r\n		try {\r\n			file.transferTo(new File(finalPath));\r\n		} catch (IOException e) {\r\n			System.out.println(\"文件: \" + file.getOriginalFilename() + \"上传失败!\");\r\n			e.printStackTrace();\r\n		}\r\n		return finalPath;\r\n	}\r\n\r\n	/**\r\n	 * 附件下载\r\n	 * \r\n	 * @param request\r\n	 * @param response\r\n	 * @param filePath\r\n	 *            项目根目录下的文件路径, 如: storage/excel/test.xls\r\n	 * @param fileShowName\r\n	 *            下载文件所显示的文件名,需要带后缀名, 如: 测试.xls\r\n	 * @return\r\n	 */\r\n	public static boolean excelOutTemplate(HttpServletRequest request, HttpServletResponse response, String filePath, String fileShowName) {\r\n		// http://127.0.0.1:8080/blog\r\n		String localPath = request.getServletContext().getRealPath(\"/\");\r\n		// http://127.0.0.1:8080/blog/storage/excel/test.xls\r\n		String finalPath = localPath.endsWith(\"/\") ? (localPath + filePath) : (localPath + \"/\" + filePath);\r\n		File file = new File(finalPath);\r\n		if (file.exists()) {\r\n			// 防止中文乱码, 设置UTF-8编码\r\n			try {\r\n				response.addHeader(\"Content-Disposition\", \"attachment;filename=\" + URLEncoder.encode(fileShowName, \"UTF-8\"));\r\n			} catch (UnsupportedEncodingException e) {\r\n				e.printStackTrace();\r\n			}\r\n			InputStream in = null;\r\n			OutputStream out = null;\r\n			try {\r\n				in = new FileInputStream(finalPath);\r\n				out = response.getOutputStream();\r\n				int b;\r\n				while ((b = in.read()) != -1)\r\n					out.write(b);\r\n			} catch (IOException e) {\r\n				e.printStackTrace();\r\n			} finally {\r\n				try {\r\n					if (in != null)\r\n						in.close();\r\n					if (out != null)\r\n						out.close();\r\n				} catch (IOException e) {\r\n					e.printStackTrace();\r\n				}\r\n			}\r\n		} else {\r\n			System.out.println(\"服务器文件已经不存在了!\");\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 05:37:46.399030', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('790a7a38e5b54457ada9f414264add38', 'Eclipse的properties文件中文乱码', '<p><strong>Window-&gt;Perferences-&gt;General-&gt;ContentTypes, 在右侧选择Text-&gt;Java Properties File, 在Default&nbsp; encoding中填入UTF-8</strong></p>', '2018-09-02 22:51:13.366603', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('7d4611f0279245e5b114db9bf97ec2da', 'Redis简介', '<ol>\r\n	<li>Redis全称为: remote dictionary server, 是key-value缓存数据库, 其特点如下:&nbsp;\r\n	<ul>\r\n		<li>Redis支持数据的备份, 即master-slave模式的数据备份.&nbsp;</li>\r\n		<li>Redis支持数据的持久化, 可以将内存中的数据保存在磁盘中, 重启时可再次加载使用.&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li>Redis优势:&nbsp;\r\n	<ul>\r\n		<li>性能极高, Redis能读的速度是110000次/s, 写的速度是81000次/s.&nbsp;</li>\r\n		<li>丰富的特性, Redis还支持publish/subscribe, 通知, key过期等等特性.&nbsp;</li>\r\n		<li>丰富的数据类型, 支持Strings, Lists, Hashes, Sets及OrderedSets等数据类型.&nbsp;</li>\r\n		<li>原子性, 单个操作是原子性的, 多个操作也支持事务, 即原子性, 通过MULTI和EXEC指令包起来.&nbsp;</li>\r\n	</ul>\r\n	</li>\r\n	<li>学习网址:&nbsp;\r\n	<ul>\r\n		<li>Redis官网:&nbsp;<a href=\"https://redis.io/\" target=\"_blank\">https://redis.io</a></li>\r\n		<li>Redis在线测试:&nbsp;<a href=\"http://try.redis.io/\" target=\"_blank\">http://try.redis.io</a></li>\r\n		<li>菜鸟教程:&nbsp;<a href=\"http://www.runoob.com/redis\" target=\"_blank\">http://www.runoob.com/redis</a></li>\r\n	</ul>\r\n	</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>', '2018-07-14 23:17:47.738788', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('7e4f5698064e4b8aaa547e9a8b7cea5c', 'Java项目连接MySQL时报错: \"The last packet sent successfully to the server was 0 milliseconds ago.\"', '<p>1. 出错原因</p>\r\n\r\n<p>数据库回收了连接, 而系统的缓冲池不知道, 继续使用被回收的连接.&nbsp;</p>\r\n\r\n<p>2. 解决方法</p>\r\n\r\n<p style=\"margin-left:40px\">方法一. 将MySQL回收空闲连接的时间变长, MySQL默认回收时间是8小时, 可以在MySQL目录下的my.ini中增加下面配置, 将时间改为1天(单位是秒)</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\">[mysqld]\r\nwait_timeout=86400</code></pre>\r\n\r\n<p style=\"margin-left:40px\">方法二.&nbsp;可以通过配置, 让缓冲池去测试连接是否被回收, 如果被回收, 则不继续使用, DBCP添加如下配置</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\"># SQL查询,用来验证从连接池取出的连接\r\ndbcp.validationQuery=SELECT 1\r\n# 指明连接是否被空闲连接回收器(如果有)进行检验，如果检测失败，则连接将被从池中去除\r\ndbcp.testWhileIdle=true\r\n# 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位，一般比minEvictableIdleTimeMillis小\r\ndbcp.timeBetweenEvictionRunsMillis=300000\r\n# 在每次空闲连接回收器线程(如果有)运行时检查的连接数量，最好和maxActive一致\r\ndbcp.numTestsPerEvictionRun=50\r\n# 连接池中连接，在时间段内一直空闲，被逐出连接池的时间(1000*60*60)，以毫秒为单位\r\ndbcp.minEvictableIdleTimeMillis=3600000</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 06:53:48.763781', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('7f0c4ca1ec194c33963e32b06fac535b', '获取Request和Response', '<pre>\r\n<code class=\"language-java\">import javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport org.springframework.web.context.request.RequestContextHolder;\r\nimport org.springframework.web.context.request.ServletRequestAttributes;\r\n\r\n/**\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年3月8日 下午12:57:02\r\n */\r\npublic class HttpContextUtils {\r\n	/**\r\n	 * 获取Request\r\n	 */\r\n	public static HttpServletRequest getHttpServletRequest() {\r\n		if(RequestContextHolder.getRequestAttributes()==null){\r\n			return null;\r\n		}\r\n		return ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();\r\n	}\r\n	\r\n	/**\r\n	 * 获取Response\r\n	 */\r\n	public static HttpServletResponse getHttpServletResponse() {\r\n		if(RequestContextHolder.getRequestAttributes()==null){\r\n			return null;\r\n		}\r\n		return ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-13 07:23:49.249701', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('820395346ede4a41a5210fb6b0ea4c84', 'Win10关闭Windows Defender', '<p>1. 在开始菜单上单击鼠标右键，点击【命令提示符（管理员）】；</p>\r\n\r\n<p>2. 在命令提示符框中输入：</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /d 1 /t REG_DWORD /f</code></pre>\r\n\r\n<p>3. 重启Win10电脑，重启后就成卸载Windows Defender，设置中的&ldquo;Windows Defender&rdquo;里面的各种功能也处于灰禁状态了！</p>\r\n\r\n<p>4. 在CMD中输入gpedit.msc, 打开本地计算机策略, 找到计算机配置--管理模板--Windows组建-- Windows Defender 安全中心, 将其中的隐藏设置全都设置为启动.</p>\r\n\r\n<p>5. 在「任务管理器」&mdash;「启动」选项卡中的「Windows Defender notifiction icon」条目禁用掉, 重启后即可关闭右下角图标随开机启动.</p>\r\n\r\n<p>&nbsp;</p>', '2018-11-05 06:50:00.250084', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('84045eb9202045b592948ca0604f3b7e', 'Jenkins汉化', '<p>1. 个人建议:&nbsp;各种软件和官网尽量不汉化, 看不懂的去查去学, 毕竟翻译过来的可能会错误理解原意.&nbsp;</p>\r\n\r\n<p>2. 步骤</p>\r\n\r\n<p style=\"margin-left:40px\">(1)使用中文版的Google浏览器, 并把语言设置成了中文. 语言配置在设置页.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/Jenkins%E6%B1%89%E5%8C%96/01.png\" style=\"height:236px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(2)安装插件: Manage Jenkins --&gt;&nbsp;Manage Plugins 选中Avaliable这一栏, 在右侧搜索:&nbsp;Locale, 选择Install without restart安装</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/Jenkins%E6%B1%89%E5%8C%96/02.png\" style=\"height:322px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(3)出现success表示安装成功</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/Jenkins%E6%B1%89%E5%8C%96/03.png\" style=\"height:408px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">(4)安装插件: Manage Jenkins --&gt; Configure System, 找到Locale, 填写zh_CN, 并在Ignore browser...这一项打钩, 保存.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/Jenkins%E6%B1%89%E5%8C%96/04.png\" style=\"height:168px; width:800px\" /></p>', '2018-07-25 07:53:17.555862', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('847468598b47459f87a7227f22e8c785', '项目整合Quartz', '<p>1. 整合到SpringBoot项目中</p>\r\n\r\n<p style=\"margin-left:40px\">(1) Maven导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n	&lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2) 定时任务类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode.schedule;\r\n\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.scheduling.annotation.EnableScheduling;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * 定时任务\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018年9月8日 下午3:35:13\r\n */\r\n@Configuration // 声明类为系统配置类\r\n@EnableScheduling // 开启调度任务\r\n@Component // Spring扫描该类\r\npublic class ScheduleJobs {\r\n	/**\r\n	 * 定时任务, cron表达式可以硬编码也可以写在配置文件中\r\n	 *\r\n	 */\r\n	@Scheduled(cron = \"${spring.schedule.cron}\")\r\n	public void job() {\r\n		System.out.println(\"定时任务内容\");\r\n	}\r\n}</code></pre>\r\n\r\n<p>2. 整合到非Spring项目中</p>\r\n\r\n<p style=\"margin-left:40px\">(1) Maven导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;\r\n    &lt;artifactId&gt;quartz&lt;/artifactId&gt;\r\n    &lt;version&gt;2.3.0&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2) 定时任务类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.product.quartz;\r\n\r\nimport org.quartz.Job;\r\nimport org.quartz.JobExecutionContext;\r\n\r\n/**\r\n * Lucene的定时任务\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/4 15:40\r\n */\r\npublic class LuceneJob implements Job {\r\n    @Override\r\n    public void execute(JobExecutionContext context) {\r\n        System.out.println(\"执行定时任务! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3)&nbsp;定时任务监听</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.product.listener;\r\n\r\nimport com.product.quartz.LuceneJob;\r\nimport org.quartz.*;\r\nimport org.quartz.impl.StdSchedulerFactory;\r\n\r\nimport javax.servlet.ServletContextEvent;\r\nimport javax.servlet.ServletContextListener;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * Quartz定时任务监听\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/4 15:25\r\n */\r\npublic class QuartzListener implements ServletContextListener {\r\n    /**\r\n     * 所有的定时任务\r\n     */\r\n    private static Map&lt;String, Scheduler&gt; schedulers = new HashMap&lt;&gt;();\r\n\r\n    /**\r\n     * 关闭Web应用时，注销定时任务\r\n     */\r\n    @Override\r\n    public void contextDestroyed(ServletContextEvent arg0) {\r\n        Set&lt;Map.Entry&lt;String, Scheduler&gt;&gt; entries = schedulers.entrySet();\r\n        for (Map.Entry&lt;String, Scheduler&gt; entry : entries) {\r\n            String key = entry.getKey();\r\n            Scheduler scheduler = entry.getValue();\r\n            try {\r\n                scheduler.shutdown();\r\n                System.out.println(\"关闭定时任务: \" + key);\r\n            } catch (SchedulerException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开启Web应用时，开启定时任务\r\n     */\r\n    @Override\r\n    public void contextInitialized(ServletContextEvent arg0) {\r\n        // 开启Lucene定时任务\r\n        startSchedule(LuceneJob.class, \"lucene\", \"1-2 * * * * ?\", \"0\");\r\n    }\r\n\r\n    /**\r\n     * 开启定时任务\r\n     *\r\n     * @param clazz 定时任务类\r\n     * @param subSchedulerName 部分任务名\r\n     * @param corn corn表达式\r\n     * @return void\r\n     */\r\n    public static void startSchedule(Class&lt;? extends Job&gt; clazz, String subSchedulerName, String corn,\r\n                                     String jobId) {\r\n        try {\r\n            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();\r\n            // 定时任务\r\n            JobDetail jobDetail = JobBuilder.newJob(clazz)\r\n                    .withIdentity(\"job_\" + subSchedulerName + \"_\" + jobId, \"job_group_\"\r\n                            + subSchedulerName + \"_\" + jobId)\r\n                    .build();\r\n            Trigger trigger = TriggerBuilder.newTrigger()\r\n                    .withIdentity(\"trigger_\" + subSchedulerName + \"_\" + jobId, \"trigger_group_\"\r\n                            + subSchedulerName + \"_\" + jobId)\r\n                    .withSchedule(CronScheduleBuilder.cronSchedule(corn))\r\n                    .startNow()\r\n                    .build();\r\n            // 注册定时任务, 可以注册多个任务和触发器\r\n            scheduler.scheduleJob(jobDetail, trigger);\r\n            scheduler.start();\r\n            System.out.println(\"开启定时任务: scheduler_\" + subSchedulerName);\r\n            schedulers.put(\"scheduler_\" + subSchedulerName, scheduler);\r\n        } catch (SchedulerException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 关闭单个定时任务\r\n     *\r\n     * @param subSchedulerName 部分定时任务名称\r\n     * @return void\r\n     */\r\n    public static void shutdownSchedule(String subSchedulerName) {\r\n        try {\r\n            String schedulerName = \"scheduler_\" + subSchedulerName;\r\n            Scheduler scheduler = schedulers.get(schedulerName);\r\n            if (scheduler != null) {\r\n                schedulers.remove(schedulerName);\r\n                scheduler.shutdown();\r\n            }\r\n        } catch (SchedulerException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 增加定时任务(或添加子定时任务)\r\n     *\r\n     * @param subSchedulerName 部分任务名\r\n     * @param clazz 定时任务类\r\n     * @param corn corn表达式\r\n     * @param jobId 任务id\r\n     * @return void\r\n     */\r\n    public static void addJob(String subSchedulerName, Class&lt;? extends Job&gt; clazz, String corn, String jobId) {\r\n        String schedulerName = \"scheduler_\" + subSchedulerName;\r\n        Scheduler scheduler = schedulers.get(schedulerName);\r\n        if (scheduler == null) {\r\n            startSchedule(clazz, subSchedulerName, corn, jobId);\r\n        } else {\r\n            // 定时任务\r\n            JobDetail jobDetail = JobBuilder.newJob(clazz)\r\n                    .withIdentity(\"job_\" + subSchedulerName + \"_\" + jobId, \"job_group_\" +\r\n                            subSchedulerName + \"_\" + jobId)\r\n                    .build();\r\n            Trigger trigger = TriggerBuilder.newTrigger()\r\n                    .withIdentity(\"trigger_\" + subSchedulerName + \"_\" + jobId, \"trigger_group_\" +\r\n                            subSchedulerName + \"_\" + jobId)\r\n                    .withSchedule(CronScheduleBuilder.cronSchedule(corn))\r\n                    .startNow()\r\n                    .build();\r\n            try {\r\n                scheduler.scheduleJob(jobDetail, trigger);\r\n                System.out.println(\"添加子定时任务: job_\" + subSchedulerName + \"_\" + jobId);\r\n            } catch (SchedulerException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除子定时任务\r\n     *\r\n     * @param subSchedulerName 定时任务部分名称\r\n     * @param jobId            任务Id\r\n     * @return void\r\n     */\r\n    public static void deleteJob(String subSchedulerName, String jobId) {\r\n        String schedulerName = \"scheduler_\" + subSchedulerName;\r\n        Scheduler scheduler = schedulers.get(schedulerName);\r\n        if (scheduler != null) {\r\n            try {\r\n                scheduler.deleteJob(new JobKey(\"job_\" + subSchedulerName + \"_\" + jobId, \"job_group_\"\r\n                        + subSchedulerName + \"_\" + jobId));\r\n            } catch (SchedulerException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4)&nbsp;在web.xml中注册监听器</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;listener&gt;\r\n    &lt;listener-class&gt;com.product.listener.QuartzListener&lt;/listener-class&gt;\r\n&lt;/listener&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 03:38:50.765171', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('873e23f9fcda4188a767011223e07ef4', 'SpringBoot上传文件大小限制', '<p>在配置文件中添加如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">spring:\r\n  servlet:\r\n    multipart:\r\n      # 单个文件上传大小限制, 单位为KB, MB\r\n      max-file-size: 1000MB\r\n      # 多个文件上传总大小限制\r\n      max-request-size: 3000MB</code></pre>\r\n\r\n<p>如果是比较低版本的Spring Boot, 配置如下</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">spring:\r\n  http:\r\n    multipart:\r\n      maxFileSize: 10Mb\r\n      maxRequestSize: 100Mb</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 06:41:33.785035', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('87837d25a91943e3811476f53fcf6fc2', 'Eclipse快捷键', '<p>1. 类中跳到上/下一个方法: Ctrl + Shift + &uarr;/&darr;</p>\r\n\r\n<p>2. 跳到上/下一个标签页: Ctrl + PgUp/PgDn</p>\r\n\r\n<p>3. 页面最大化/还原: Ctrl + m</p>\r\n\r\n<p>4. 删除一行: Ctrl + d</p>\r\n\r\n<p>5. 光标不变, 上下滑动页面滚轴: Ctrl + &uarr;/&darr;</p>\r\n\r\n<p>6. 光标所在行向上/下移动一行: Alt + &uarr;/&darr;</p>\r\n\r\n<p>7.&nbsp;光标所在行向上/下复制一行: Ctrl + Alt + &uarr;/&darr;</p>\r\n\r\n<p>8. 跳到下一个错误/警告的代码处: Ctrl + .</p>\r\n\r\n<p>9. 显示当前类的实现或继承关系: 光标在类声明代码的上几行时按Ctrl + t</p>\r\n\r\n<p>10. 显示当前方法的重写关系: 光标在方法声明行时按Ctrl + t</p>\r\n\r\n<p>11. 折叠/展开方法: Ctrl + Shift + /(小键盘上的) 或者Ctrl + Shift + *</p>\r\n\r\n<p>12. 页面第一行/最后一行: Ctrl + Home/End</p>\r\n\r\n<p>13. 光标所在行的最前面或最后边:&nbsp;Home/End</p>\r\n\r\n<p>14. 光标跳到上/下一个单词: Ctrl + &larr;/&rarr;</p>\r\n\r\n<p>15. 选中光标所在位置到上/下一个单词: Ctrl + Shift + &larr;/&rarr;</p>\r\n\r\n<p>16.&nbsp;选中光标所在位置到行首/行尾: Shift + Home/End</p>\r\n\r\n<p>17.&nbsp;选中光标所在位置到页首/页尾: Ctrl + Shift + Home/End</p>\r\n\r\n<p>18. 代码提示: Alt + ?</p>\r\n\r\n<p>19. 注释光标所在行/选中行代码: Ctrl + ?</p>\r\n\r\n<p>20. 多行注释: 输入/**, 再按回车</p>\r\n\r\n<p>21. 保存: Ctrl + s</p>\r\n\r\n<p>22. 查看类或方法所使用的地方: 光标停在类名或方法名上, 按Ctrl + Shift + g</p>\r\n\r\n<p>23. 关闭一个选项卡: Ctrl + w</p>\r\n\r\n<p>24. 当前页面查询/替换: Ctrl + f</p>\r\n\r\n<p>25. 全局查询/替换: Ctrl + h</p>\r\n\r\n<p>26. 格式化代码: Ctrl + Shift + f</p>\r\n\r\n<p>27. 对Eclipse功能的全局搜索: Ctrl + 3</p>\r\n\r\n<p>28. 将选中的多行合并成一行: Ctrl + Alt + j</p>', '2018-11-20 08:36:05.152585', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('8a0176c1a9d642299910a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', '<p>01.&nbsp;Docker Hub官方网站(用于查找各种镜像): <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\r\n\r\n<p style=\"margin-left:40px\">docker-compose.yml文件各个参数的官方说明:&nbsp;<a href=\"https://docs.docker.com/compose/compose-file/\" target=\"_blank\">https://docs.docker.com/compose/compose-file/</a></p>\r\n\r\n<p>02. 注意: YML文件对格式要求非常严格, 差一个空格都会报错</p>\r\n\r\n<p>03. MySQL示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n mysql:\r\n  image: mysql:5.7\r\n  restart: always\r\n  container_name: mysql\r\n  environment:\r\n   MYSQL_ROOT_PASSWORD: root\r\n   TZ: \'Asia/Shanghai\'\r\n  command: [\r\n          \'--character-set-server=utf8mb4\',\r\n          \'--collation-server=utf8mb4_unicode_ci\',\r\n          \'--default-time-zone=+8:00\'\r\n          ]\r\n  ports:\r\n   - \"3306:3306\"\r\n  networks:\r\n   mysql:\r\n    ipv4_address: 172.20.0.2\r\n  volumes:\r\n   - type: volume\r\n     source: data\r\n     target: /var/lib/mysql\r\n   - type: volume\r\n     source: config\r\n     target: /etc/mysql/mysql.conf.d\r\n   - type: volume\r\n     source: logs\r\n     target: /usr/local/mysql/logs\r\n\r\nvolumes:\r\n data:\r\n config:\r\n logs:\r\n\r\nnetworks:\r\n mysql:\r\n  driver: bridge\r\n  name: mysql\r\n  ipam:\r\n   driver: default\r\n   config:\r\n   -\r\n    subnet: 172.20.0.0/24</code></pre>\r\n\r\n<p>04. Redis示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n redis:\r\n  image: redis:4.0.9\r\n  restart: always\r\n  container_name: redis\r\n  volumes:\r\n   - type: volume\r\n     source: config\r\n     target: /usr/local/etc/redis\r\n   - type: volume\r\n     source: data\r\n     target: /data\r\n  command: redis-server /usr/local/etc/redis/redis.conf\r\n  ports:\r\n   - \"6379:6379\"\r\n  networks:\r\n   redis:\r\n    ipv4_address: 172.20.0.2\r\n\r\nvolumes:\r\n config:\r\n data:\r\n\r\nnetworks:\r\n redis:\r\n  driver: bridge\r\n  name: redis\r\n  ipam:\r\n   driver: default\r\n   config:\r\n   -\r\n    subnet: 172.20.0.0/24\r\n</code></pre>\r\n\r\n<p>05. Tomcat示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n blog:\r\n  image: tomcat:8.5\r\n  restart: always\r\n  container_name: blog\r\n  ports:\r\n   - \"8083:8080\"\r\n  networks:\r\n   - mysql\r\n  volumes:\r\n   - type: volume\r\n     source: blog\r\n     target: /usr/local/tomcat/webapps\r\n\r\nvolumes:\r\n blog:\r\n  name: blog\r\n\r\nnetworks:\r\n  mysql:\r\n   external: true\r\n   name: mysql\r\n</code></pre>\r\n\r\n<p>06. Java示例(执行了java -jar /opt/blogback.jar命令, 方便启动容器后自动运行Java程序, 也可用于SpringBoot项目的部署)</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n blogback:\r\n  image: java:8\r\n  restart: always\r\n  container_name: blogback\r\n  ports:\r\n   - \"8082:8080\"\r\n  working_dir: /opt\r\n  command: java -jar /opt/blogback.jar\r\n  networks:\r\n   - mysql\r\n  volumes:\r\n   - type: volume\r\n     source: blogback\r\n     target: /opt\r\n\r\nvolumes:\r\n blogback:\r\n  name: blogback\r\n\r\nnetworks:\r\n mysql:\r\n  external: true\r\n  name: mysql\r\n</code></pre>\r\n\r\n<p>07. GitLab示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n gitlab:\r\n  image: gitlab/gitlab-ce:10.5.4-ce.0\r\n  restart: always\r\n  container_name: gitlab\r\n  ports:\r\n   - \"8085:80\"\r\n   - \"2222:22\"\r\n  hostname: \"gitlab.ywz.com\"\r\n  environment:\r\n   GITLAB_OMNIBUS_CONFIG: |\r\n    gitlab_rails[\'gitlab_shell_ssh_port\'] = 2222\r\n  volumes:\r\n   - type: volume\r\n     source: config\r\n     target: /etc/gitlab\r\n   - type: volume\r\n     source: logs\r\n     target: /var/log/gitlab\r\n   - type: volume\r\n     source: data\r\n     target: /var/opt/gitlab\r\n\r\nvolumes:\r\n config:\r\n  name: gitlab_config\r\n logs:\r\n  name: gitlab_logs\r\n data:\r\n  name: gitlab_data\r\n</code></pre>\r\n\r\n<p>08. Jenkins示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n jenkins:\r\n  image: jenkins:2.60.3\r\n  restart: always\r\n  container_name: jenkins\r\n  ports:\r\n   - \"8080:8080\"\r\n  volumes:\r\n   - type: bind\r\n     source: /home/paul/docker/myvolume/jenkins/home\r\n     target: /var/jenkins_home</code></pre>\r\n\r\n<p>09. Nexus示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n nexus:\r\n  image: sonatype/nexus3:3.8.0\r\n  restart: always\r\n  container_name: nexus\r\n  ports:\r\n   - \"8081:8081\"\r\n  volumes:\r\n   - type: volume\r\n     source: data\r\n     target: /nexus-data\r\n\r\nvolumes:\r\n data:</code></pre>\r\n\r\n<p>10. Nginx示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n nginx:\r\n  image: nginx:1.13\r\n  restart: always\r\n  container_name: nginx\r\n  ports:\r\n   - \"80:80\"\r\n  volumes:\r\n   - type: volume\r\n     source: config\r\n     target: /etc/nginx\r\n\r\nvolumes:\r\n config:\r\n</code></pre>\r\n\r\n<p>11. Python示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n python:\r\n  image: python:3.5\r\n  restart: always\r\n  container_name: python\r\n  tty: true\r\n  command: bash\r\n  volumes:\r\n   - type: volume\r\n     source: workspace\r\n     target: /home\r\n   - type: volume\r\n     source: lib\r\n     target: /usr/local/lib\r\n\r\nvolumes:\r\n workspace:\r\n  name: python_workspace\r\n lib:\r\n  name: python_lib\r\n</code></pre>\r\n\r\n<p>12. 多个Tomcat项目共用MySQL, Redis示例</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n jn:\r\n  image: tomcat:8.5\r\n  restart: always\r\n  container_name: tomcat_oa_jn\r\n  ports:\r\n   - \"8082:8080\"\r\n  networks:\r\n   - mysql_oa\r\n   - redis_oa\r\n  volumes:\r\n   - type: bind\r\n     source: /home/paul/docker/myvolume/tomcat_oa_jn/webapps\r\n     target: /usr/local/tomcat/webapps\r\n  depends_on:\r\n   - mysql_oa\r\n   - redis_oa\r\n\r\n xq:\r\n  image: tomcat:8.5\r\n  restart: always\r\n  container_name: tomcat_oa_xq\r\n  ports:\r\n   - \"8083:8080\"\r\n  networks:\r\n   - mysql_oa\r\n   - redis_oa\r\n  volumes:\r\n   - type: bind\r\n     source: /home/paul/docker/myvolume/tomcat_oa_xq/webapps\r\n     target: /usr/local/tomcat/webapps\r\n  depends_on:\r\n   - mysql_oa\r\n   - redis_oa\r\n\r\n test:\r\n  image: tomcat:8.5\r\n  restart: always\r\n  container_name: tomcat_oa_test\r\n  ports:\r\n   - \"8084:8080\"\r\n  networks:\r\n   - mysql_oa\r\n   - redis_oa\r\n  volumes:\r\n   - type: bind\r\n     source: /home/paul/docker/myvolume/tomcat_oa_test/webapps\r\n     target: /usr/local/tomcat/webapps\r\n  depends_on:\r\n   - mysql_oa\r\n   - redis_oa\r\n\r\n mysql_oa:\r\n  image: mysql:5.7\r\n  restart: always\r\n  container_name: mysql_oa\r\n  environment:\r\n   MYSQL_ROOT_PASSWORD: root\r\n  ports:\r\n   - \"3307:3306\"\r\n  networks:\r\n   mysql_oa:\r\n    ipv4_address: 172.20.0.2\r\n  volumes:\r\n   - type: volume\r\n     source: mysql_data\r\n     target: /var/lib/mysql\r\n   - type: volume\r\n     source: mysql_config\r\n     target: /etc/mysql/mysql.conf.d\r\n   - type: volume\r\n     source: mysql_logs\r\n     target: /usr/local/mysql/logs\r\n\r\n redis_oa:\r\n  image: redis:4.0.9\r\n  restart: always\r\n  container_name: redis_oa\r\n  command: redis-server /usr/local/etc/redis/redis.conf\r\n  ports:\r\n   - \"6379:6379\"\r\n  networks:\r\n   redis:\r\n    ipv4_address: 172.21.0.2\r\n  volumes:\r\n   - type: volume\r\n     source: redis_config\r\n     target: /usr/local/etc/redis\r\n   - type: volume\r\n     source: redis_data\r\n     target: /data\r\n\r\nvolumes:\r\n mysql_data:\r\n  name: mysql_oa_data\r\n mysql_config:\r\n  name: mysql_oa_config\r\n mysql_logs:\r\n  name: mysql_oa_logs\r\n redis_config:\r\n  name: redis_oa_config\r\n redis_data:\r\n  name: redis_oa_data\r\n\r\nnetworks:\r\n  mysql_oa:\r\n   driver: bridge\r\n   name: mysql_oa\r\n   ipam:\r\n    driver: default\r\n    config:\r\n    -\r\n     subnet: 172.20.0.0/24\r\n  redis_oa:\r\n   driver: bridge\r\n   name: redis_oa\r\n   ipam:\r\n    driver: default\r\n    config:\r\n    -\r\n     subnet: 172.21.0.0/24</code></pre>\r\n\r\n<p>&nbsp;</p>', '2019-07-06 06:47:16.148876', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('8a56c25d2a1e4c5d93849167f73be908', 'Java动态编程(动态生成.class文件)', '<p>(1) 导包</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.javassist&lt;/groupId&gt;\r\n    &lt;artifactId&gt;javassist&lt;/artifactId&gt;\r\n    &lt;version&gt;3.21.0-GA&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>(2) 使用示例</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.product.quartz;\r\n\r\nimport javassist.*;\r\nimport org.quartz.Job;\r\n\r\nimport java.io.IOException;\r\n\r\n/**\r\n * 动态生成定时任务所需要的类, 类存放在C:/test/com/product/quartz下\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/16 9:24\r\n */\r\npublic class DynamicJob {\r\n    public static final String QUARTZ_JOB = \"QuartzJob\";\r\n\r\n    public static final String DIRECTORY_NAME = \"C:/test\";\r\n//    public static final String DIRECTORY_NAME = LuceneUtils.class.getResource(\"\").getFile()\r\n//            .split(\"WEB-INF\")[0].substring(1) + \"redis\";\r\n\r\n    /**\r\n     * 动态生成类, 放在com.product.quartz包下\r\n     *\r\n     * @param subClassName         子类名, 最终拼接为: \"com.product.quartz.QuartzJob\" + subClassName\r\n     * @param executeMethodContent 方法体, 方法体内不支持泛型, 也就是说: Map&lt;String, String&gt;要写成Map\r\n     * @return void\r\n     */\r\n    public static Class&lt;? extends Job&gt; generateClass(String subClassName, String executeMethodContent) {\r\n    	executeMethodContent = executeMethodContent.replace(\"\\n\", \" \");\r\n        String finalClassName = \"com.product.quartz.\" + QUARTZ_JOB + subClassName;\r\n        ClassPool pool = ClassPool.getDefault();\r\n        pool.insertClassPath(new ClassClassPath(DynamicJob.class));\r\n        pool.importPackage(\"org.quartz\");\r\n        pool.importPackage(\"com.product.utils\");\r\n        pool.importPackage(\"java.util\");\r\n        pool.importPackage(\"com.alibaba.fastjson\");\r\n        pool.importPackage(\"javax.servlet\");\r\n        // 创建类\r\n        CtClass ct = pool.makeClass(finalClassName);\r\n        // 让类实现Job接口\r\n        ct.setInterfaces(new CtClass[]{pool.makeInterface(\"org.quartz.Job\")});\r\n        try {\r\n            //添加方法\r\n            CtMethod executeMethod = CtNewMethod.make(\"public void execute(JobExecutionContext context) {\" +\r\n                    executeMethodContent + \"System.out.println(\\\"定时任务(scheduler_\" + subClassName +\r\n                    \")执行结束! \\\");}\", ct);\r\n            ct.addMethod(executeMethod);\r\n            // 将生成的.class文件保存到磁盘\r\n            ct.writeFile(DIRECTORY_NAME);\r\n            Class clazz = ct.toClass();\r\n            Job job = (Job) clazz.newInstance();\r\n            return job.getClass();\r\n        } catch (CannotCompileException | IOException | InstantiationException | IllegalAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 03:49:24.594374', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('8c3ad349aaec45d1a841f2ec5215cd84', '查看Oracle当前连接数和允许的最大连接数', '<p>1. 查看当前数据库连接数</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select count(*) from v$process</code></pre>\r\n\r\n<p>2. 查看数据库允许最大连接数</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select value from v$parameter where name =\'processes\'</code></pre>\r\n\r\n<p>3. 修改数据库最大连接数(修改后需要重启才能生效)</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">alter system set processes = 300 scope = spfile; 修改最大连接数\r\n\r\nshutdown immediate; 关闭数据库\r\n\r\nstartup; 启动数据库</code></pre>\r\n\r\n<p>4. 查看当前session连接数(即登录用户数量)</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select count(*) from v$session</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 08:56:26.835786', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('8c523e90d66e4af5bfcf0b52e6b74d84', 'Oracle 导出、导入某用户所有数据（包括表、视图、存储过程...）', '<p>0. 前提: 在CMD命令下</p>\r\n\r\n<p>1. 导出</p>\r\n\r\n<p style=\"margin-left:40px\">1.1 命令:&nbsp;exp 用户名/密码@数据库&nbsp;owner=用户名&nbsp;file=文件存储路径</p>\r\n\r\n<p style=\"margin-left:40px\">1.2 示例:&nbsp;exp&nbsp;<a href=\"mailto:ZM/sql123@ORCL\" rel=\"nofollow\" target=\"_blank\">ZM/sql123@ORCL</a>&nbsp;owner=ZM file=F:\\abcd.dmp</p>\r\n\r\n<p>2. 导入</p>\r\n\r\n<p style=\"margin-left:40px\">2.1 命令:&nbsp;<a href=\"https://www.baidu.com/s?wd=imp&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd\" target=\"_blank\">imp</a>&nbsp;用户名<a href=\"mailto:cu/mycu@db\" rel=\"nofollow\" target=\"_blank\">/密码@数据库</a>&nbsp;fromuser=用户名 touser=用户名 file=D:\\cu.dmp ignore=y</p>\r\n\r\n<p style=\"margin-left:40px\">2.2 说明:&nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">fromuser:文件的指定用户</p>\r\n\r\n<p style=\"margin-left:80px\">&nbsp;touser：指定导入到当前登录的数据库某个用户 &nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">file:需要导入的数据文件 &nbsp;</p>\r\n\r\n<p style=\"margin-left:80px\">ignore:是否忽略创建错误</p>\r\n\r\n<p style=\"margin-left:40px\">2.2 示例:&nbsp;imp&nbsp;<a href=\"mailto:ZM/sql123@ORCL\" rel=\"nofollow\" target=\"_blank\">ZM/sql123@ORCL</a>&nbsp;fromuser=ZM touser=SZZM file=F:\\test.dmp ignore=y</p>', '2019-03-19 07:04:40.945678', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('8d080c1c7b5349658ab4769ca6bea9e9', 'Windows配置JDK环境变量', '<p>1. 位置</p>\r\n\r\n<p style=\"margin-left:40px\">我的电脑右键 --&gt; 属性 --&gt; 高级系统设置 --&gt; 环境变量</p>\r\n\r\n<p>2. 作用域</p>\r\n\r\n<p style=\"margin-left:40px\">环境变量窗口中有用户变量和系统变量, 两者的作用域不同, 前者作用域为当前登录用户, 后者作用域为整个计算机.&nbsp;</p>\r\n\r\n<p>3. 配置</p>\r\n\r\n<p style=\"margin-left:40px\">添加如下三个变量, 如果变量已经存在, 则在已有的变量值后面追加即可, 变量值的每一项内容之间要用英文分号隔开.&nbsp;</p>\r\n\r\n<table align=\"center\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n	<tbody>\r\n		<tr>\r\n			<td>变量名</td>\r\n			<td>变量值</td>\r\n		</tr>\r\n		<tr>\r\n			<td>JAVA_HOME</td>\r\n			<td>D:\\Java\\jdk1.8;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>PATH</td>\r\n			<td>%JAVA_HOME%\\bin;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>CLASSPATH</td>\r\n			<td>%JAVA_HOME%\\lib\\tools.jar;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>', '2018-07-16 05:56:49.470371', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('8ef8f543e310445895aea2a74c099447', 'Java报错: SEVERE: Unable to process Jar entry [......]for annotations java.io.EOFException', '<p>可能原因:</p>\r\n\r\n<p style=\"margin-left:40px\">1. jar包损坏, 需删掉jar包重新下载</p>\r\n\r\n<p style=\"margin-left:40px\">2. Tomcat版本, 遇到过的情况: 使用8.0.9版本Tomcat启动报这个错, 改成8.0.22版本就不报错了.</p>\r\n\r\n<p style=\"margin-left:40px\">3.&nbsp;一个Tomcat中部署了两个同样的项目，一个war，一个由该war解压的文件夹，删掉一个即可</p>', '2018-10-24 12:53:57.114676', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('989a93c1710b4e5baf365e0184c7b540', '将ID等请求参数当做请求URL', '<p>以ID为例, 代码如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">@RequestMapping(\"/info/{id}\")\r\npublic String info(@PathVariable(\"id\") String id) {\r\n	return id;\r\n}</code></pre>\r\n\r\n<p>例如ID为:&nbsp;og456asdf64af64ag68ag</p>\r\n\r\n<p>则请求URL为: /info/og456asdf64af64ag68ag</p>\r\n\r\n<p>方法中的参数id的值也为:&nbsp;og456asdf64af64ag68ag</p>', '2018-08-20 06:28:28.619498', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('98b68feeb4724c8e8c1151ebd312d779', 'Kettle零碎知识', '<p>1. Kettle中对于数据源和参数有作用域的定义, 有全局与局部两种</p>\r\n\r\n<p>2.&nbsp;创建一个转换:&nbsp;Ctrl + n<br />\r\n&nbsp; &nbsp; 创建一个作业:&nbsp;Ctrl + Alt + n</p>\r\n\r\n<p>3.&nbsp;使用MySQL连接的时, 有一个&ldquo;Use Result Streaming Cursor&rdquo;的选项, 选中的话, 每次只取一条数据, 效率很低.&nbsp;</p>\r\n\r\n<p>4. 如何查看数据源是否为全局数据源</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 直接打开Job或者Trans查看数据源, 是否为变成黑色粗体字来, 黑色即为全局.</p>\r\n\r\n<p style=\"margin-left:40px\">(2) 在C:/Administrator/.kettle文件夹下的shared.xml文件是否有对应的数据源名称, 如果有则表示是全局数据源名称.&nbsp;</p>\r\n\r\n<p>5. 设置为中文版</p>\r\n\r\n<p style=\"margin-left:40px\">&ldquo;菜单栏&rdquo;&mdash;&ldquo;编辑&rdquo;&mdash;&ldquo;选项&rdquo;&mdash;&ldquo;观感&rdquo;&mdash;&ldquo;缺省语言&rdquo;设置为&ldquo;Simplified Chinese&rdquo;&mdash;&ldquo;确定&rdquo;&mdash;&ldquo;重启Kettle&rdquo;</p>\r\n\r\n<p>6. 使用Kettle抽取数据时, 出现中文乱码</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 查看数据库的编码<br />\r\n(2) 打开数据库连接, 在选项中增加参数, 参数名称: characterEncoding, 参数值: utf8(或者gbk等, 需要数据库编码一致). 修改后可能不会马上生效, 需要右键数据库, 点击&quot;Clear DB Cache of dbname&quot;</p>\r\n\r\n<p style=\"margin-left:40px\">(3)&nbsp;表输入时要选择允许简易类型转换也肯能导致乱码</p>\r\n\r\n<p>7.&nbsp;表输入时要选择允许简易类型转换, 作用: 简易类型转换避免了不必要的数据类型转换, 并可导致显著的性能改进, 但是有可能导致乱码</p>\r\n\r\n<p>8. 发送邮箱时常用的SMTP地址</p>\r\n\r\n<p style=\"margin-left:40px\">(1) QQ邮箱（mail.qq.com）</p>\r\n\r\n<p style=\"margin-left:80px\">POP3服务器地址：pop.qq.com（端口：110）</p>\r\n\r\n<p style=\"margin-left:80px\">SMTP服务器地址：smtp.qq.com（端口：25）</p>\r\n\r\n<p style=\"margin-left:40px\">(2) 搜狐邮箱（sohu.com）</p>\r\n\r\n<p style=\"margin-left:80px\">POP3服务器地址:pop3.sohu.com（端口：110）</p>\r\n\r\n<p style=\"margin-left:80px\">SMTP服务器地址:smtp.sohu.com（端口：25）</p>\r\n\r\n<p style=\"margin-left:40px\">(3) HotMail邮箱（hotmail.com）</p>\r\n\r\n<p style=\"margin-left:80px\">POP3服务器地址：pop.live.com（端口：995）</p>\r\n\r\n<p style=\"margin-left:80px\">SMTP服务器地址：smtp.live.com（端口：587）</p>\r\n\r\n<p style=\"margin-left:40px\">(4) 移动139邮箱</p>\r\n\r\n<p style=\"margin-left:80px\">POP3服务器地址：POP.139.com（端口：110）</p>\r\n\r\n<p style=\"margin-left:80px\">SMTP服务器地址：SMTP.139.com(端口：25)</p>\r\n\r\n<p style=\"margin-left:40px\">(5) 景安网络邮箱</p>\r\n\r\n<p style=\"margin-left:80px\">POP3服务器地址：POP.zzidc.com（端口：110）</p>\r\n\r\n<p style=\"margin-left:80px\">SMTP服务器地址：SMTP.zzidc.com(端口：25)</p>\r\n\r\n<p>9.&nbsp;kettle常用功能(按执行顺序)</p>\r\n\r\n<p>&nbsp; &nbsp; (1) 输入<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1&gt; 从文本文件(如txt, xml, json等), Excel文件, 数据库等处获得数据<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2&gt; 例子: 表输入, 生成随机数<br />\r\n&nbsp;&nbsp; &nbsp;(2) 转换<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1&gt; 对数据进行各种形式转换<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2&gt; 例子: 字段选择, 计算器, 增加常量<br />\r\n&nbsp;&nbsp; &nbsp;(3) 流程<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1&gt; 不对数据进行操作, 只是控制数据流<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2&gt; 例子: 过滤步骤<br />\r\n&nbsp;&nbsp; &nbsp;(4) 连接<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1&gt; 将不同数据集连接到一起<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2&gt; 笛卡尔乘积<br />\r\n&nbsp;&nbsp; &nbsp;(5) 输出<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1&gt; 将数据通过文本文件, 表等形式输出<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2&gt; 例子: 表输出, 插入或更新</p>\r\n\r\n<p>10.&nbsp;kettel元数据</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;(1) 作用: 描述kettle要执行的任务<br />\r\n&nbsp;&nbsp; &nbsp;(2) 存储方式<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;1&gt; 资源库<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;a. 数据库资源库: 把kettle元数据串行化到数据库中<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;b. 文件资源库: 是kettle4.0以后版本里增加的资源库类型<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2&gt; XML文件<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;不使用资源库, 直接将kettle元数据保存为.ktr转换文件和.kjb作业文件</p>\r\n\r\n<p>11.&nbsp;kettle运行方式</p>\r\n\r\n<p style=\"margin-left:40px\">(1) 图形界面: Spoon</p>\r\n\r\n<p style=\"margin-left:80px\">1&gt; 本地执行: 运行Spoon.bat</p>\r\n\r\n<p style=\"margin-left:80px\">2&gt; 远程执行: 需要远程服务器执行Carte</p>\r\n\r\n<p style=\"margin-left:120px\">a. Carte: 是内嵌Jetty的 http server</p>\r\n\r\n<p style=\"margin-left:120px\">b. Carte执行命令: &nbsp;carte localhost 8080</p>\r\n\r\n<p style=\"margin-left:40px\">(2) 命令行: Pan和Kitchen</p>\r\n\r\n<p style=\"margin-left:80px\">1&gt; Pan命令行参数名列表</p>\r\n\r\n<p style=\"margin-left:120px\">/rep : 资源库名称<br />\r\n/user : 资源库用户名<br />\r\n/pass : 资源库密码<br />\r\n/trans : 要启动的转换名称<br />\r\n/dir : 目录(不要忘了前缀 /)<br />\r\n/file : 要启动的文件名(转换文件)<br />\r\n/level : 日志级别 (Error, Nothing, Minimal, Basic , Detailed, Debug, Rowlevel)<br />\r\n/logfile : 要写入的日志文件<br />\r\n/listdir : 列出资源库里的目录<br />\r\n/listtrans : 列出指定目录下的转换<br />\r\n/listrep : 列出可用资源库<br />\r\n/exprep : 将资源库里的所有对象导出到 XML 文件中<br />\r\n/norep : 不要将日志写到资源库中<br />\r\n/safemode : 安全模式下运行: 有额外的检查<br />\r\n/version : 显示转换的版本,校订和创建日期<br />\r\n/param : 设置参数，参数格式&lt;NAME&gt;=&lt;VALUE&gt;，例如-param:FOO=bar<br />\r\n/listparam: 列出转换里已经设置好的参数。<br />\r\n/maxloglines：内存中保存日志的最大日志行数<br />\r\n/maxlogtimeout：内存中保存日志的最长时间</p>\r\n\r\n<p style=\"margin-left:80px\">2&gt; Kitchen命令行参数名列表</p>\r\n\r\n<p style=\"margin-left:120px\">/rep : 资源库名称<br />\r\n/user : 资源库用户名<br />\r\n/pass : 资源库密码<br />\r\n/job : 要启动的作业名称<br />\r\n/dir : 目录(不要忘了前缀 /)<br />\r\n/file : 要启动的文件名(转换文件)<br />\r\n/level : 日志级别 (Error, Nothing, Minimal, Basic , Detailed, Debug, Rowlevel)<br />\r\n/logfile : 要写入的日志文件<br />\r\n/listdir : 列出资源库里的目录<br />\r\n/listjobs : 列出指定目录下的作业<br />\r\n/listrep : 列出可用资源库<br />\r\n/norep : 不要将日志写到资源库中<br />\r\n/version : 显示转换的版本,校订和创建日期<br />\r\n/param : 设置参数，参数格式&lt;NAME&gt;=&lt;VALUE&gt;，例如-param:FOO=bar<br />\r\n/listparam: 列出转换里已经设置好的参数<br />\r\n/export： 把作业依赖的所有资源导出到一个zip 文件里<br />\r\n/maxloglines：内存中保存日志的最大日志行数<br />\r\n/maxlogtimeout：内存中保存日志的最长时间</p>\r\n\r\n<p style=\"margin-left:80px\">3&gt; 参数格式</p>\r\n\r\n<p style=\"margin-left:120px\">a. /参数名:值(建议这种)</p>\r\n\r\n<p style=\"margin-left:120px\">b. -参数名=值</p>\r\n\r\n<p style=\"margin-left:80px\">4&gt;&nbsp;日志级别</p>\r\n\r\n<p style=\"margin-left:120px\">Error: 只记录错误信息<br />\r\nNothing: 不记录任何信息,执行效率最高<br />\r\nMinimal: 记录最少的信息<br />\r\nBasic: 记录基本信息<br />\r\nDetailed: 记录详细信息<br />\r\nDebug: 记录调试信息<br />\r\nRowlevel: 转换过程中的每一行都记录下来,日志最详细,执行效率最低</p>\r\n\r\n<p style=\"margin-left:80px\">5&gt; 命令行示例</p>\r\n\r\n<p style=\"margin-left:120px\">a.&nbsp;执行test.ktr 文件 日志保存在D:\\log.txt 中, 默认日志级别是Basic</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">Pan /file:D:\\AppProjects\\nxkh\\test.ktr /logfile:D:\\log.t</code></pre>\r\n\r\n<p style=\"margin-left:120px\">b.&nbsp;执行test.ktr 文件 日志保存在D:\\log.txt 中, 日志级别是Rowlevel</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">Pan /file:D:\\AppProjects\\nxkh\\test.ktr /logfile:D:\\log.txt /level:Rowlevel</code></pre>\r\n\r\n<p style=\"margin-left:120px\">c.&nbsp;导出一个 job 文件，以及该 job 文件依赖的转换及其他资源</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">Kitchen /file:c:/job1.kjb /export:c:/a.zip</code></pre>\r\n\r\n<p style=\"margin-left:120px\">d.&nbsp;直接执行一个导出的 zip 文件</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">Kitchen.bat /file:\"zip:file:///c:/a.zip!job1.kjb\"</code></pre>\r\n\r\n<p style=\"margin-left:40px\">Windows中如果无法识别命令, 可改成.\\kitchen.bat执行</p>\r\n\r\n<p style=\"margin-left:40px\">(3) API: Kettle Java API 嵌入到其他应用</p>', '2018-09-16 06:19:47.757314', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('9aa30e400cac4b9abaa36ab07420991f', 'Django安装数据库', '<p>下载路径:<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>\r\n\r\n<p>下载对应环境的mysqlclient文件, 如mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl</p>\r\n\r\n<p>安装命令:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">python3 -m pip install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 08:50:58.810090', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('9b4633628b5a49ae96502fc76e2fa71f', '自定义异常类', '<pre>\r\n<code class=\"language-java\">/**\r\n * 自定义异常\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:05:28\r\n */\r\npublic class RRException extends RuntimeException {\r\n	private static final long serialVersionUID = 1L;\r\n	\r\n    private String msg;\r\n    private int code = 500;\r\n    \r\n    public RRException(String msg) {\r\n		super(msg);\r\n		this.msg = msg;\r\n	}\r\n	\r\n	public RRException(String msg, Throwable e) {\r\n		super(msg, e);\r\n		this.msg = msg;\r\n	}\r\n	\r\n	public RRException(String msg, int code) {\r\n		super(msg);\r\n		this.msg = msg;\r\n		this.code = code;\r\n	}\r\n	\r\n	public RRException(String msg, int code, Throwable e) {\r\n		super(msg, e);\r\n		this.msg = msg;\r\n		this.code = code;\r\n	}\r\n\r\n	public String getMsg() {\r\n		return msg;\r\n	}\r\n\r\n	public void setMsg(String msg) {\r\n		this.msg = msg;\r\n	}\r\n\r\n	public int getCode() {\r\n		return code;\r\n	}\r\n\r\n	public void setCode(int code) {\r\n		this.code = code;\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 08:09:07.299921', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('9eed816f8fee436fb42b22832814d4f7', '阿里巴巴代码规范插件', '<p>1. 详细信息网址:&nbsp;<a href=\"http://mp.weixin.qq.com/s/IbibsXlWHlM59kfXJqRvZA\" target=\"_blank\">http://mp.weixin.qq.com/s/IbibsXlWHlM59kfXJqRvZA</a></p>\r\n\r\n<p>2. Eclipse安装插件</p>\r\n\r\n<p style=\"margin-left:40px\">Eclipse版插件支持4.2（Juno，JDK1.8+）及以上版本，我们提供自主的Update Site，通过 Help &gt;&gt; Install New Software 然后输入https://p3c.alibaba.com/plugin/eclipse/update 即可看到安装列表。大家可以通过 Help &gt;&gt; Check for Udates 进行插件新版检测。</p>\r\n\r\n<p>3. IDEA安装插件</p>\r\n\r\n<p style=\"margin-left:40px\">目前，我们已将IDEA版的插件，发布至IDEA官方仓库中(最低支持版本14.1.7，JDK1.7+)。你只需打开 Settings &gt;&gt; Plugins &gt;&gt; Browse repositories 输入 Alibaba 搜索，看到对应插件后即可安装。至于具体如何使用，请大家到官方Github仓库中进行查看。IDEA会自动检测插件新版，并提示出来，所以大家不用担心插件的更新问题</p>\r\n\r\n<p>4. GitHub:&nbsp;<a href=\"https://github.com/alibaba/p3c\" target=\"_blank\">https://github.com/alibaba/p3c</a></p>', '2018-12-17 06:27:47.170944', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('9f1c329dff8549e6890a22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', '<p>1. 打jar包</p>\r\n\r\n<p style=\"margin-left:40px\">1.1&nbsp;pom文件中设置打包方式为jar</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;groupId&gt;com.ribeen&lt;/groupId&gt;\r\n&lt;artifactId&gt;web-socket&lt;/artifactId&gt;\r\n&lt;version&gt;0.0.1&lt;/version&gt;\r\n&lt;packaging&gt;jar&lt;/packaging&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">1.2&nbsp;设置Artifacts</p>\r\n\r\n<p style=\"margin-left:40px\">如下图, 选中项目名(如下图的web-socket) ==&gt; 按F4 ==&gt; 在弹出的选项卡中选择Artifacts ==&gt; 点击上边的加号按钮 ==&gt; 选择JAR ==&gt; 选择From modules with dependencies ... ==&gt; 在弹出的窗口选择Spring Boot启动类 ==&gt; 选择JAR文件来源: copy to the output ... ==&gt; OK</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/IDEA%E7%BB%99Spring%20Boot%E6%89%93jar%E5%8C%85%E5%92%8Cwar%E5%8C%85/01.png\" style=\"height:353px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/IDEA%E7%BB%99Spring%20Boot%E6%89%93jar%E5%8C%85%E5%92%8Cwar%E5%8C%85/02.png\" style=\"height:478px; width:668px\" /></p>\r\n\r\n<p style=\"margin-left:40px\">1.3&nbsp;使用Maven打包</p>\r\n\r\n<p style=\"margin-left:40px\">选择左侧的Maven Projects ==&gt; 在项目(如: web-socket)下的Lifecycle中 ==&gt; 双击clean ==&gt; 双击package ==&gt; 在项目根路径下的target文件夹会生成jar包(如: web-socket-0.0.1.jar)</p>\r\n\r\n<p style=\"margin-left:40px\"><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/IDEA%E7%BB%99Spring%20Boot%E6%89%93jar%E5%8C%85%E5%92%8Cwar%E5%8C%85/03.png\" style=\"height:723px; width:658px\" /></p>\r\n\r\n<p>2. 打war包</p>\r\n\r\n<p style=\"margin-left:40px\">2.1&nbsp;pom文件中设置打包方式为war</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;groupId&gt;com.ribeen&lt;/groupId&gt;\r\n&lt;artifactId&gt;web-socket&lt;/artifactId&gt;\r\n&lt;version&gt;0.0.1&lt;/version&gt;\r\n&lt;packaging&gt;war&lt;/packaging&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.2 去掉内置Tomcat,&nbsp;将scope属性设置为provided表示:&nbsp;运行时使用这个jar包, 最终打包时将这个jar包放到WEB-INF/lib-provided这个文件夹中, 不去使用(其他要用的包放到WEB-INF/lib文件夹), 这是因为外面的Tomcat中已经有这个jar包了.</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;\r\n    &lt;scope&gt;provided&lt;/scope&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.3 如果项目中用到jsp, 则需要加下面三个jar包.&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;!-- 去掉内置tomcat后, 又要使用到jsp, 这时需要导入下面3个包 --&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;\r\n    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;\r\n    &lt;scope&gt;provided&lt;/scope&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\r\n    &lt;artifactId&gt;jstl&lt;/artifactId&gt;\r\n    &lt;version&gt;1.2&lt;/version&gt;\r\n    &lt;type&gt;jar&lt;/type&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\r\n    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;\r\n    &lt;version&gt;3.0-alpha-1&lt;/version&gt;\r\n    &lt;scope&gt;provided&lt;/scope&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.4 将启动类改成如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.ribeen;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.builder.SpringApplicationBuilder;\r\nimport org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\r\n\r\n/**\r\n * 用于启动Spring_boot项目\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 2018年9月7日 上午8:36:52\r\n */\r\n@SpringBootApplication\r\npublic class Application extends SpringBootServletInitializer {\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Application.class, args);\r\n	}\r\n\r\n	@Override\r\n	protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\r\n		return builder.sources(Application.class);\r\n	}\r\n}</code></pre>\r\n\r\n<p>启动类修改了这两个地方:</p>\r\n\r\n<p>(1) 继承了SpringBootServletInitializer类</p>\r\n\r\n<p>(2) 重写了configure方法</p>\r\n\r\n<p style=\"margin-left:40px\">2.5 与1.3一样使用Maven进行clean和install</p>', '2018-12-06 02:47:38.366574', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('9f5a94e9f5ba4b1dbfcfaf9e292c3b3f', 'VMware12安装VMwareTool', '<p>1. 在CD-ROM虚拟光驱中选择使用ISO镜像, 找到VMWARE TOOLS 安装文件, 如C:\\program\\VMware\\VMware Workstation\\Programs\\linux.iso<br />\r\n&nbsp; &nbsp; 当然这个ISO是你安装VMware workstation 的目录下的Linux.iso, 不是你的Linux OS 镜像文件. VMware Tools一般都在这个文件里.&nbsp;</p>\r\n\r\n<p>2. 以管理员身份进入Linux, root账号</p>\r\n\r\n<p>3. 退出到windows, 在虚拟机菜单栏中点击 虚拟机-&gt; 安装 VMWARE TOOLS 子菜单,会弹出对话框, 点击&quot;确认&quot; 安装</p>\r\n\r\n<p>4. 挂载光驱</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">mount -t iso9660 /dev/cdrom /mnt</code></pre>\r\n\r\n<p>5. copy 此文件到临时文件夹</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">cp /mnt/mVMwareTools-8.8.4-743747.tar.gz /tmp</code></pre>\r\n\r\n<p>6. 卸载CDROM</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">umount /dev/cdrom</code></pre>\r\n\r\n<p>7. 解压安装包</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">tar -zxvf /tmp/mVMwareTools-8.8.4-743747.tar.gz</code></pre>\r\n\r\n<p>8. 进入解压后的文件夹, 运行vmware-install.pl文件进行安装</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;1&gt;安装过程中他会一步一步的有问题回应, 此过程中, 你遇到显示[yes],[no],[yes][no]的直接输入yes, 然后回车. 其他的问题不管[]里面是什么, 直接回车就好了, 不要输入.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">&lt;2&gt;安装过程遇到如下提问:&nbsp;what is the location of the gcc program on your machine?</p>\r\n\r\n<p style=\"margin-left:80px\">不用输入, 直接回车, 然后输入no, 先跳过gcc的安装. 等安装完VMwareTool后, 执行如下命令, 一顿yes即可.&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">yum install gcc-c++</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 07:32:14.418574', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('a1bff6c2a0614f3ab0459555eb46f068', '判断是否是中文', '<pre>\r\n<code class=\"language-java\">/**\r\n * 判断是否是中文.\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:29:19\r\n */\r\npublic class CharUtils {\r\n	/**\r\n	 * \r\n	 * 判断中文汉字和符号是否是中文.\r\n	 * @param strName 字符串\r\n	 * @return 字符串是否是中文\r\n	 */\r\n	public static boolean isChinese(String strName) {\r\n		char[] ch = strName.toCharArray();\r\n		for (int i = 0; i &lt; ch.length; i++) {\r\n			char c = ch[i];\r\n			if (isChinese(c)) {\r\n				return true;\r\n			}\r\n		}\r\n		return false;\r\n	}\r\n\r\n	/**\r\n	 * \r\n	 * 根据Unicode编码判断中文汉字和符号是否是中文.\r\n	 * @param c 字符\r\n	 * @return 字符是否是中文\r\n	 */\r\n	private static boolean isChinese(char c) {\r\n		Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);\r\n		if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS\r\n				|| ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS\r\n				|| ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\r\n				|| ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B\r\n				|| ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION\r\n				|| ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS\r\n				|| ub == Character.UnicodeBlock.GENERAL_PUNCTUATION) {\r\n			return true;\r\n		}\r\n		return false;\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-09 07:13:23.040077', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('a67166d8b2984185a6b0e2f96690ced7', '使用Tomcat时, 请求参数带大括号, 返回400', '<p>1. 原因</p>\r\n\r\n<p style=\"margin-left:40px\">Tomcat的新版本中增加了一个新特性, 就是严格按照RFC3986规范进行访问解析, Url中只允许包含英文字母(a-zA-Z), 数字(0-9), 以及-_.~4个特殊字符以及所有保留字符! * &rsquo; ( ) ; : @ &amp; = + $ , / ? # [ ]这些. 不包括{}.&nbsp;</p>\r\n\r\n<p>2. 解决方案</p>\r\n\r\n<p style=\"margin-left:40px\">方案一. 使用其他支持大括号的Tomcat版本, 如:&nbsp;tomcat-8.0.9</p>\r\n\r\n<p style=\"margin-left:40px\">方案二.&nbsp;使用encodeURIComponent或encodeURI对包含{}的URL进行编码.&nbsp;</p>', '2018-09-13 03:17:19.084283', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('a81259d2adc8481aadf5ee0349af33d4', 'Ubuntu安装JDK', '<p>Ubuntu 安装JDK的两种方式:<br />\r\n一:通过apt安装.</p>\r\n\r\n<p>二:通过官网下载安装包安装.</p>\r\n\r\n<p>这里推荐第1种,因为可以通过 apt-get upgrade 方式方便获得jdk的升级</p>\r\n\r\n<p>一.&nbsp;通过apt安装(jdk有很多版本, 这里介绍2中: openjdk和oracle的JDK)</p>\r\n\r\n<p>&nbsp;1. openjdk</p>\r\n\r\n<p style=\"margin-left:40px\">(1)查找合适的openjdk版本:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">apt-cache search openjdk</code></pre>\r\n\r\n<p style=\"margin-left:40px\">输入以上命令后会列出很多版本, 选择自己需要的即可:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">default-jdk-doc - Standard Java or Java compatible Development Kit (documentation) \r\n…(省略部分显示结果) \r\nopenjdk-6-source - OpenJDK Development Kit (JDK) source files \r\nopenjdk-7-jre-dcevm - Alternative VM for OpenJDK 7 with enhanced class redefinition \r\nopenjdk-7-jre-lib - OpenJDK Java runtime (architecture independent libraries) \r\nopenjdk-7-jre-zero - Alternative JVM for OpenJDK, using Zero/Shark \r\nopenjdk-8-dbg - Java runtime based on OpenJDK (debugging symbols) \r\nopenjdk-8-demo - Java runtime based on OpenJDK (demos and examples) \r\nopenjdk-8-doc - OpenJDK Development Kit (JDK) documentation \r\nopenjdk-8-jdk - OpenJDK Development Kit (JDK) \r\nopenjdk-8-jre - OpenJDK Java runtime, using Hotspot JIT \r\nopenjdk-8-jre-headless - OpenJDK Java runtime, using Hotspot JIT (headless) \r\nopenjdk-8-jre-jamvm - Alternative JVM for OpenJDK, using JamVM \r\nopenjdk-8-jre-zero - Alternative JVM for OpenJDK, using Zero/Shark \r\nopenjdk-8-source - OpenJDK Development Kit (JDK) source files \r\nuwsgi-app-integration-plugins - plugins for integration of uWSGI and application \r\nuwsgi-plugin-jvm-openjdk-7 - Java plugin for uWSGI (OpenJDK 7)</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2)&nbsp;安装</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt-get install openjdk-8-jdk</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3) 配置环境变量, 编辑如下文件:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">vim ~/.bashrc</code></pre>\r\n\r\n<p style=\"margin-left:80px\">在最后一行加:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\r\nexport PATH=$JAVA_HOME/bin:$PATH\r\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4)&nbsp;&nbsp;测试jdk是否安装成功:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">java -version</code></pre>\r\n\r\n<p style=\"margin-left:80px\">显示如下结果, 则说明安装成功:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">openjdk version “1.8.0_91” \r\nOpenJDK Runtime Environment (build 1.8.0_91-8u91-b14-0ubuntu4~15.10.1-b14) \r\nOpenJDK Server VM (build 25.91-b14, mixed mode)</code></pre>\r\n\r\n<p>2.oracle的JDK<br />\r\n&nbsp; &nbsp; &nbsp; (1).添加ppa</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt install software-properties-common\r\nsudo add-apt-repository ppa:webupd8team/java\r\nsudo apt-get update</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2).安装oracle-java-installer</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt-get install oracle-java8-installer</code></pre>\r\n\r\n<p style=\"margin-left:40px\">安装器会提示你同意 oracle 的服务条款,选择 ok, 然后选择yes 即可</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; (3).设置系统默认jdk</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo update-java-alternatives -s java-8-oracle</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4).如果即安装了jdk7,又安装了jdk8,要实现两者的切换,可以:</p>\r\n\r\n<p style=\"margin-left:80px\">jdk8 切换到jdk7</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo update-java-alternatives -s java-7-oracle</code></pre>\r\n\r\n<p style=\"margin-left:80px\">jdk7 切换到jdk8</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo update-java-alternatives -s java-8-oracle</code></pre>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; (5).测试jdk是否安装成功:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">java -version</code></pre>\r\n\r\n<p>二.直接下载jdk压缩包方式安装<br />\r\n&nbsp; &nbsp; &nbsp; 　分为下面5个步骤</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1.官网下载JDK</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2.解压缩,放到指定目录</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3.配置环境变量</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4.设置系统默认JDK</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;5. 测试JDK</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; 1.官网下载JDK　　　<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;地址: http://www.oracle.com/technetwork/articles/javase/index-jsp-138363.html, 选择相应的 .gz包下载&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; 2. 解压缩,放到指定目录(以jdk-7u60-linux-x64.gz为例)<br />\r\n&nbsp; &nbsp; &nbsp; 　　创建目录:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo mkdir /usr/lib/jvm</code></pre>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 解压缩到该目录:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo tar -zxvf jdk-7u60-linux-x64.gz -C /usr/lib/jvm</code></pre>\r\n\r\n<p>&nbsp;3.修改环境变量:　　</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo vim ~/.bashrc</code></pre>\r\n\r\n<p>文件的末尾追加下面内容:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">#set oracle jdk environment\r\nexport JAVA_HOME=/usr/lib/jvm/jdk1.7.0_60  ## 这里要注意目录要换成自己解压的jdk 目录\r\nexport JRE_HOME=${JAVA_HOME}/jre  \r\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \r\nexport PATH=${JAVA_HOME}/bin:$PATH</code></pre>\r\n\r\n<p>使环境变量马上生效:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">source ~/.bashrc</code></pre>\r\n\r\n<p>&nbsp;4.设置系统默认jdk 版本</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_60/bin/java 300  \r\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_60/bin/javac 300  \r\nsudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.7.0_60/bin/jar 300   \r\nsudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.7.0_60/bin/javah 300   \r\nsudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.7.0_60/bin/javap 300</code></pre>\r\n\r\n<p>&nbsp; &nbsp; 然后执行:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo update-alternatives --config java</code></pre>\r\n\r\n<p>若是初次安装jdk,会有下面的提示 :&nbsp; &nbsp; &nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">There is only one alternative in link group java (providing /usr/bin/java): \r\n          /usr/lib/jvm/jdk1.7.0_60/bin/java</code></pre>\r\n\r\n<p>5.测试jdk</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">java -version</code></pre>\r\n\r\n<p>若有如下结果, 则说明jdk 安装成功:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">java version \"1.7.0_60\"\r\nJava(TM) SE Runtime Environment (build 1.7.0_60-b19)\r\nJava HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)</code></pre>\r\n\r\n<p>6. 可能出现的错误信息:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">bash: ./java: cannot execute binary file</code></pre>\r\n\r\n<p>出现这个错误的原因可能是在32位的操作系统上安装了64位的jdk,&nbsp;查看你安装的Ubuntu是32位还是64位系统:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo uname -m</code></pre>\r\n\r\n<p>i686表示是32位,&nbsp;x86_64表示是64位</p>', '2018-12-05 05:52:33.714601', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('aa40284a750044caa39fe8c41b6fbaf1', 'Oracle排序并分组后取每一组第一条数据', '<p>根据b字段排序后再根据a字段分组, 然后取出每个分组的第一条数据</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">SELECT *       \r\nFROM (SELECT ROW_NUMBER() OVER(PARTITION BY a ORDER BY b DESC) rn,       \r\n      test.*       \r\n      FROM test)       \r\nWHERE rn = 1</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 06:47:13.538480', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('abf3b27595274720be85ecd3d4ffdab1', 'Spring Boot 使用lombok简化', '<p>1. 简化了哪些</p>\r\n\r\n<p style=\"margin-left:40px\">(1)&nbsp;@Data: 可以不用写set, set, 构造器, equals, toString, hashCode等方法, 在IDEA中按Ctrl + F12可以看到隐藏的这些方法</p>\r\n\r\n<p style=\"margin-left:40px\">(1)&nbsp;@Slf4j: 不用写如下代码: private &nbsp;final Logger log = LoggerFactory.getLogger(LoggerTest.class);</p>\r\n\r\n<p>2. 在IDEA中需要装插件: Settings中的Plugins下搜索lombok</p>\r\n\r\n<p>3. Maven导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\r\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>4. 在application.yml文件中配置日志级别</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\"># 公共配置\r\nlogging:\r\n  level:\r\n    # 指定日志等级\r\n    root: debug</code></pre>\r\n\r\n<p>5. 使用</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">@Slf4j\r\n@RestController\r\npublic class TestController {\r\n \r\n    @RequestMapping(\"/log\")\r\n    public String testLog(){\r\n        log.info(\"#########  info  #########\");\r\n        log.debug(\"#########  debug  #########\");\r\n        log.error(\"#########  error  #########\");\r\n        return null;\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2019-04-23 09:38:19.722285', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('aecae1e0441e47f1892b84ca03229fe2', '下划线与驼峰相互转换', '<pre>\r\n<code class=\"language-java\">package com.product.utils;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * 下划线与驼峰相互转换\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/4 14:21\r\n */\r\npublic class HumpUtils {\r\n    private static final char UNDERLINE = \'_\';\r\n    \r\n    /**\r\n     * 数组由下划线转换为驼峰\r\n     *\r\n     * @param arr 带有下划线的数组\r\n     * @return java.util.Map&lt;java.lang.String,V&gt;\r\n     */\r\n    public static String[] arrUnderlineToHump(String[] arr) {\r\n        if (arr == null) {\r\n            return null;\r\n        }\r\n        String[] newArr = new String[arr.length];\r\n        for (int i = 0; i &lt; arr.length; i++) {\r\n            newArr[i] = toHump(arr[i]);\r\n        }\r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * 数组由驼峰转换为下划线\r\n     *\r\n     * @param arr 带有下划线的数组\r\n     * @return java.util.Map&lt;java.lang.String,V&gt;\r\n     */\r\n    public static String[] arrHumpToUnderline(String[] arr) {\r\n        if (arr == null) {\r\n            return null;\r\n        }\r\n        String[] newArr = new String[arr.length];\r\n        for (int i = 0; i &lt; arr.length; i++) {\r\n            newArr[i] = toUnderline(arr[i]);\r\n        }\r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * 将Map中的key由下划线转换为驼峰\r\n     *\r\n     * @param map 带有下划线的map\r\n     * @return java.util.Map&lt;java.lang.String,V&gt;\r\n     */\r\n    public static &lt;V&gt; Map&lt;String, V&gt; mapKeyUnderlineToHump(Map&lt;String, V&gt; map) {\r\n        if (map == null) {\r\n            return null;\r\n        }\r\n        Map&lt;String, V&gt; newMap = new HashMap&lt;&gt;(map.size());\r\n        for (Map.Entry&lt;String, V&gt; entry : map.entrySet()) {\r\n            String key = entry.getKey();\r\n            String newKey = toHump(key);\r\n            newMap.put(newKey, entry.getValue());\r\n        }\r\n        return newMap;\r\n    }\r\n\r\n    /**\r\n     * 将Map中的key由驼峰转换为下划线\r\n     *\r\n     * @param map 带有驼峰的map\r\n     * @return java.util.Map&lt;java.lang.String,V&gt;\r\n     */\r\n    public static &lt;V&gt; Map&lt;String, V&gt; mapKeyHumpToUnderline(Map&lt;String, V&gt; map) {\r\n        if (map == null) {\r\n            return null;\r\n        }\r\n        Map&lt;String, V&gt; newMap = new HashMap&lt;&gt;(map.size());\r\n        for (Map.Entry&lt;String, V&gt; entry : map.entrySet()) {\r\n            String key = entry.getKey();\r\n            String newKey = toUnderline(key);\r\n            newMap.put(newKey, entry.getValue());\r\n        }\r\n        return newMap;\r\n    }\r\n\r\n    /**\r\n     * 下划线转驼峰\r\n     *\r\n     * @param colName 字符串\r\n     * @return java.lang.String\r\n     */\r\n    public static String toHump(String colName) {\r\n        if (colName == null) {\r\n            return null;\r\n        }\r\n        StringBuilder sb = new StringBuilder();\r\n        String[] str = colName.toLowerCase().split(String.valueOf(UNDERLINE));\r\n        for (String s : str) {\r\n            if (s.length() == 1) {\r\n                sb.append(s.toUpperCase());\r\n                continue;\r\n            }\r\n            if (s.length() &gt; 1) {\r\n                sb.append(s.substring(0, 1).toUpperCase());\r\n                sb.append(s.substring(1));\r\n            }\r\n        }\r\n        String result = sb.toString();\r\n        return result.substring(0, 1).toLowerCase() + result.substring(1);\r\n    }\r\n\r\n    /**\r\n     * 驼峰转下划线\r\n     *\r\n     * @param colName 字符串\r\n     * @return java.lang.String\r\n     */\r\n    private static String toUnderline(String colName) {\r\n        if (colName == null) {\r\n            return null;\r\n        }\r\n        String result = colName.replaceAll(\"[A-Z]\", String.valueOf(UNDERLINE) + \"$0\");\r\n        return result.toLowerCase();\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-24 08:32:52.510774', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('b041a292df8f45008b299fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', '<p>1. 通过apt命令安装</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo apt update\r\nsudo apt install nginx</code></pre>\r\n\r\n<p>2. 配置防火墙</p>\r\n\r\n<p>&nbsp; &nbsp;01.&nbsp;显示所有ufw应用的配置:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ufw app list</code></pre>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; 得到一个配置的输出列表:&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;&nbsp;Available applications:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Nginx Full<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Nginx HTTP<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Nginx HTTPS<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OpenSSH</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;&nbsp;有三个Nginx的配置:&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; Nginx Full: 这个配置打开 80端口和443端口<br />\r\n&nbsp; &nbsp; &nbsp; Nginx HTTP: 这个配置只打开80 (普通, 未加密通信)<br />\r\n&nbsp; &nbsp; &nbsp; Nginx HTTPS: 这个配置只打开 443 (TLS/SSL 加密通信 )</p>\r\n\r\n<p>&nbsp; &nbsp;02. 打开80端口:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ufw allow \'Nginx HTTP\'</code></pre>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;&nbsp;验证修改状态: (若未启动ufw, 可使用命令: sudo ufw enable)</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ufw status</code></pre>\r\n\r\n<p>&nbsp; &nbsp; &nbsp;&nbsp;我们可以看到HTTP是被打开的:&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; Status: active</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; To &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Action &nbsp; &nbsp; &nbsp;From<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ------ &nbsp; &nbsp; &nbsp;----<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OpenSSH &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ALLOW &nbsp; &nbsp; &nbsp; Anywhere &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Nginx HTTP &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ALLOW &nbsp; &nbsp; &nbsp; Anywhere &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OpenSSH (v6) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ALLOW &nbsp; &nbsp; &nbsp; Anywhere (v6) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Nginx HTTP (v6) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ALLOW &nbsp; &nbsp; &nbsp; Anywhere (v6)</p>\r\n\r\n<p>3. 启动Nginx:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">nginx</code></pre>\r\n\r\n<p>如果敲地址后看到如下欢迎页面, 则说明Nginx启动成功:&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode.com/blogs/Ubuntu16.04%E4%B8%8A%E5%AE%89%E8%A3%85%E5%B9%B6%E5%90%AF%E5%8A%A8Nginx/01.png\" style=\"height:683px; width:800px\" /></p>\r\n\r\n<p>停止Nginx:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">nginx -s stop</code></pre>\r\n\r\n<p>4. 也可以使用systemctl控制Nginx</p>\r\n\r\n<p>&nbsp; &nbsp;01.&nbsp;启动Nginx:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo systemctl start nginx</code></pre>\r\n\r\n<p>&nbsp; &nbsp;02.&nbsp;停止Nginx:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo systemctl stop nginx</code></pre>\r\n\r\n<p>&nbsp; &nbsp;03.&nbsp;重启Nginx:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo systemctl restart nginx</code></pre>\r\n\r\n<p>&nbsp; &nbsp;04.&nbsp;修改配置文件后, 平滑加载配置命令(不会断开用户访问):&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo systemctl reload nginx</code></pre>\r\n\r\n<p>&nbsp; &nbsp;05. Nginx默认是随着系统启动的时候自动运行, 如果你不想开机启动, 那么你可以禁止Nginx开机启动:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo systemctl disable nginx</code></pre>\r\n\r\n<p>&nbsp; &nbsp;06.&nbsp;重新配置Nginx开机自动启动:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo systemctl enable nginx</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-25 07:48:28.140315', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('b041b6f6ebfb4ae48e799efe84709c01', 'pom.xml文件中的scope标签设为provided', '<p>在父子继承的pom中, 若某个依赖的scope设为provided, 则子pom不会继承父pom的这个依赖</p>', '2019-03-20 13:45:21.152325', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('b0e2059c7be54038916e7a2edd87d05d', 'Win10手动添加开机启动项', '<p>1.&nbsp;regedit打开注册表</p>\r\n\r\n<p>2. 找到这一层级:&nbsp;hkey_local_machine\\software\\wow6432node\\microsoft\\windows\\currentversion\\run</p>\r\n\r\n<p>3. 添加一项, 值为启动程序的路径</p>\r\n\r\n<p>4. 重启电脑</p>', '2018-09-02 22:17:49.430365', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('b2e2be65ec1342ca8c1eee4dc9bab95d', 'Windows的CMD从C盘跳转到其他磁盘', '<pre>\r\n<code class=\"language-bash\">Microsoft Windows [版本 10.0.17134.165]\r\n(c) 2018 Microsoft Corporation。保留所有权利。\r\n\r\nC:\\Users\\18902&gt;cd /D D:\\java\\workspace\\all\r\n\r\nD:\\java\\workspace\\all&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 08:06:42.482436', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('b3106376d26c4fa58158e0de4633ab1a', '自定义HTML页面的ioc图标', '<p>1. 在线制作ioc图标: <a href=\"http://www.bitbug.net/\" target=\"_blank\">http://www.bitbug.net/</a></p>\r\n\r\n<p>2.&nbsp;在相应的HTML页面添加如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;link rel=\"shortcut icon\" href=\"/favicon.ico\"/&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-23 02:28:02.276655', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('b99153b4aecc4f1cad82e48c12a1e5ce', '单例模式(Singleton Pattern)', '<p>1. 饿汉单例模式(线程安全, 但不能实现延迟加载, 不管将来用不用始终占据内存)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">class EagerSingleton {   \r\n    private static final EagerSingleton instance = new EagerSingleton();   \r\n    private EagerSingleton() { }   \r\n\r\n    public static EagerSingleton getInstance() {  \r\n        return instance;   \r\n    }     \r\n}</code></pre>\r\n\r\n<p>2. 懒汉单例模式(可延时加载, 但线程安全控制烦琐, 而且性能受影响)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">class LazySingleton {   \r\n    private volatile static LazySingleton instance = null;   \r\n\r\n    private LazySingleton() { }   \r\n\r\n    public static LazySingleton getInstance() {   \r\n        // 第一重判断  \r\n        if (instance == null) {  \r\n            // 锁定代码块  \r\n            synchronized (LazySingleton.class) {  \r\n                // 第二重判断  \r\n                if (instance == null) {  \r\n                    instance = new LazySingleton(); // 创建单例实例  \r\n                }  \r\n            }  \r\n        }  \r\n        return instance;   \r\n    }  \r\n}</code></pre>\r\n\r\n<p>3.&nbsp;IoDH单例模式(Initialization on Demand Holder)(同时具有饿汉与懒汉的优点, 缺点是与编程语言本身的特性相关, 很多面向对象语言不支持)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">class Singleton {  \r\n    private Singleton() {  \r\n    }  \r\n\r\n    private static class HolderClass {  \r\n            private final static Singleton instance = new Singleton();  \r\n    }  \r\n\r\n    public static Singleton getInstance() {  \r\n        return HolderClass.instance;  \r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-11-16 00:33:34.495655', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('b9c2fa10722d4e86915a3b222ee6adc7', 'Nginx如何处理手机端和PC端跳转不同页面', '<p>如果是手机端和pc端需要跳转不同的页面, 则需要在nginx.conf中的location / {}中加入如下代码:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-nginx\">if ($http_user_agent ~* \'(Android|webOS|iPhone|iPod|BlackBerry)\') {\r\n    rewrite ^.+ http://127.0.0.1:8080/mobile/$uri;\r\n}</code></pre>\r\n\r\n<p>其中mobile为手机端的路径标识, 可以自定义修改.&nbsp;</p>', '2018-07-12 01:46:22.074558', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('ba266149590e4f8ca9ac8958c0ce5efa', '策略模式(Strategy Pattern)', '<p>1. 应用场景</p>\r\n\r\n<p>策略模式, 按字面意思理解, 就是做相同的事情(调相同的方法), 但是使用的策略不同(方法实现不同, 即算法不同).</p>\r\n\r\n<p>2. 示例代码</p>\r\n\r\n<p style=\"margin-left:40px\">2.1 运动接口</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 运动\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/11/2 16:37\r\n */\r\npublic interface Sport {\r\n    /**\r\n     * 做运动\r\n     *\r\n     * @return void\r\n     */\r\n    public void doSport();\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.2 运动接口的实现: 跑步, 散步, 爬山</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 跑步\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/11/2 16:40\r\n */\r\npublic class RunSport implements Sport{\r\n    @Override\r\n    public void doSport() {\r\n        System.out.println(\"跑步! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 散步\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/11/2 16:41\r\n */\r\npublic class WalkSport implements Sport{\r\n    @Override\r\n    public void doSport() {\r\n        System.out.println(\"散步! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 爬山\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/11/2 16:42\r\n */\r\npublic class ClimbSport implements Sport{\r\n    @Override\r\n    public void doSport() {\r\n        System.out.println(\"爬山! \");\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.3 做运动的人, 在实例化时指定具体做什么运动</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 人\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/11/2 16:55\r\n */\r\npublic class Man {\r\n    private Sport sport;\r\n\r\n    /**\r\n     * 初始构造, 选择策略\r\n     */\r\n    public Man(String sportName) {\r\n        try {\r\n            this.sport = (Sport) Class.forName(\"com.paulandcode.\" + sportName).newInstance();\r\n        } catch (InstantiationException | ClassNotFoundException | IllegalAccessException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 做运动\r\n     *\r\n     * @return void\r\n     */\r\n    public void sport() {\r\n        sport.doSport();\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.4 测试.&nbsp;可以将RunSport,&nbsp;WalkSport,&nbsp;ClimbSport这些字符串写在配置文件中, 不同的业务,&nbsp; 只改配置文件即可.&nbsp;也可以写在web的请求参数中, 当传不同的参数, 使用不同的策略.&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 测试\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/31 8:39\r\n */\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        new Man(\"RunSport\").sport();\r\n        new Man(\"WalkSport\").sport();\r\n        new Man(\"ClimbSport\").sport();\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>输出:</p>\r\n\r\n<pre>\r\n<code class=\"language-basic\">跑步! \r\n散步! \r\n爬山! </code></pre>\r\n\r\n<p>3. 优点</p>\r\n\r\n<p style=\"margin-left:40px\">3.1 可以自由切换策略(算法).</p>\r\n\r\n<p style=\"margin-left:40px\">3.2 避免多重条件判断(if...else if...).</p>\r\n\r\n<p style=\"margin-left:40px\">3.3 扩展性良好, 如果想增加策略, 只需新增加一个类即可, 无需更改已有代码. (符合开闭原则&lt;OCP&gt;)</p>\r\n\r\n<p>4. 缺点</p>\r\n\r\n<p style=\"margin-left:40px\">4.1&nbsp;策略类会增多, 一个策略就是一个类, 随着策略类的增多, 代码会显得臃肿.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">4.2&nbsp;所有策略类都需要对外暴露.&nbsp;</p>', '2018-11-16 00:37:22.039082', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('be38f487687a4aa88368f03822c99163', 'Navicat无法连接Oracle', '<p>1. Navicat连接Oracle 12c时报错:&nbsp;ORA-28040 没有匹配的认证协议</p>\r\n\r\n<p style=\"margin-left:40px\">需要在D:\\Oracle\\product\\12.2.0\\dbhome_1\\network\\admin下的sqlnet.ora文件最后一行添加如下代码:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">SQLNET.ALLOWED_LOGON_VERSION=8</code></pre>\r\n\r\n<p>2. 登陆是报错: ORA-01017 用户名/口令无效;&nbsp;登录被拒绝(修改密码)</p>\r\n\r\n<p style=\"margin-left:40px\">(1) cmd窗口中用sqlplus无密码登陆:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sqlplus / as sysdba</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2) 查看所有用户名</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select username from dba_users;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3)&nbsp;修改密码</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">alter user myusername identified by mypassword;</code></pre>\r\n\r\n<p>3. 登陆是报错: ORA-01017 用户名/口令无效;&nbsp;登录被拒绝(新建账号)</p>\r\n\r\n<p style=\"margin-left:40px\">(1) cmd窗口中用sqlplus无密码登陆:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sqlplus / as sysdba</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2) 新建账号:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">create user myusername identified by mypassword;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3) 添加权限:</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\"># 分开授予各种权限\r\ngrant create session,create view,create sequence,unlimited tablespace, select any table,update any table, delete any table, create any table, drop any table, alter any table to myusername;\r\n\r\n# 直接授予dba权限\r\ngrant dba to myusername;</code></pre>\r\n\r\n<p>4. 在Oracle12C中创建用户提示: ORA-65096 公用用户名或角色无效</p>\r\n\r\n<p style=\"margin-left:40px\">Oracle12C要求用户名需要以c##开头</p>\r\n\r\n<p>5. Oracle11G及之后版本的新功能, 默认密码过期限制是180天(即6个月), 过期后会提示错误:&nbsp;ORA-28001: 口令已经失效, 可以按照上面的先将密码修改, 然后执行如下语句, 将过期时间改为无限制</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-11-21 08:24:49.826080', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('bea32ea8c9d447ce972791cdc95116bc', 'Java后台获得客户端IP', '<pre>\r\n<code class=\"language-java\">import com.alibaba.druid.util.StringUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\n/**\r\n * 获取客户端IP地址\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年3月8日 下午12:57:02\r\n */\r\npublic class IPUtils {\r\n	private static Logger logger = LoggerFactory.getLogger(IPUtils.class);\r\n\r\n	/**\r\n	 * 获取客户端IP地址\r\n	 * \r\n	 * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址\r\n	 * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址\r\n	 */\r\n	public static String getIpAddr(HttpServletRequest request) {\r\n    	String ip = null;\r\n        try {\r\n            ip = request.getHeader(\"x-forwarded-for\");\r\n            if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n                ip = request.getHeader(\"Proxy-Client-IP\");\r\n            }\r\n            if (StringUtils.isEmpty(ip) || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\r\n                ip = request.getHeader(\"WL-Proxy-Client-IP\");\r\n            }\r\n            if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n                ip = request.getHeader(\"HTTP_CLIENT_IP\");\r\n            }\r\n            if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n                ip = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\r\n            }\r\n            if (StringUtils.isEmpty(ip) || \"unknown\".equalsIgnoreCase(ip)) {\r\n                ip = request.getRemoteAddr();\r\n            }\r\n        } catch (Exception e) {\r\n        	logger.error(\"IPUtils ERROR \", e);\r\n        }\r\n        return ip;\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-13 07:10:50.657262', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('bf4da0e68964411da7a93a3766853ad2', '代理模式(Proxy Pattern)', '<p>1. 应用场景</p>\r\n\r\n<p>无法直接从第三方获取资源或者获取资源需要很长时间, 于是从代理商那里直接获取资源. 拿VPN举例, 用户无法直接从外国服务器访问外国网站或者访问特别慢, 但是从VPN服务器那里可以直接访问外国网站, 当然, 网站的真正来源还是外国服务器. 若第三方提供资源需要一段时间, 可以提前获取资源并存起来, 下次需要时, 直接拿就行.</p>\r\n\r\n<p>2. 示例代码</p>\r\n\r\n<p style=\"margin-left:40px\">2.1 汽车接口(公共接口)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 汽车\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/15/2018 4:03 PM\r\n */\r\npublic interface Car {\r\n    /**\r\n     * 买汽车\r\n     */\r\n    void buyCar();\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.2 汽车工厂(第三方)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 汽车工厂\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/15/2018 4:04 PM\r\n */\r\npublic class CarFactory implements Car {\r\n    /**\r\n     * 汽车\r\n     */\r\n    private String car;\r\n\r\n    /**\r\n     * 只限同一包下使用, 防止其他地方调用\r\n     * \r\n     * @param car 汽车\r\n     */\r\n    CarFactory(String car) {\r\n        this.car = car;\r\n        produceCar(car);\r\n    }\r\n\r\n    @Override\r\n    public void buyCar() {\r\n        System.out.println(\"商店从汽车工厂买到\" + car);\r\n    }\r\n\r\n    /**\r\n     * 生产汽车\r\n     *\r\n     * @param car 汽车\r\n     */\r\n    private void produceCar(String car) {\r\n        System.out.println(\"汽车工厂正在生产\" + car + \"...\");\r\n        try {\r\n            Thread.sleep(3000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.3 汽车商店(代理商)</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 汽车商店\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @since 11/15/2018 4:05 PM\r\n */\r\npublic class CarShop implements Car {\r\n    /**\r\n     * 为汽车商店提供汽车的工厂\r\n     */\r\n    private CarFactory carFactory;\r\n\r\n    /**\r\n     * 汽车\r\n     */\r\n    private String car;\r\n\r\n    /**\r\n     * 实例化汽车时, 指定需要哪辆汽车\r\n     *\r\n     * @param car 汽车\r\n     */\r\n    public CarShop(String car) {\r\n        this.car = car;\r\n    }\r\n\r\n    @Override\r\n    public void buyCar() {\r\n        System.out.println(\"客户要从汽车商店购买\" + car);\r\n        if(carFactory == null){\r\n            System.out.println(\"商店已联系工厂生产汽车! \");\r\n            carFactory = new CarFactory(car);\r\n        }\r\n        // 从汽车工厂购买汽车\r\n        carFactory.buyCar();\r\n\r\n        System.out.println(\"客户从汽车商店买到\" + car);\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p style=\"margin-left:40px\">2.4 测试</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.paulandcode;\r\n\r\n/**\r\n * 测试\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018/10/31 8:39\r\n */\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        CarShop carShop = new CarShop(\"兰博基尼\");\r\n        System.out.println(\"第一次购买汽车\");\r\n        carShop.buyCar();\r\n        System.out.println(\"第二次购买汽车\");\r\n        carShop.buyCar();\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>输出:</p>\r\n\r\n<pre>\r\n<code class=\"language-basic\">第一次购买汽车\r\n客户要从汽车商店购买兰博基尼\r\n商店已联系工厂生产汽车! \r\n汽车工厂正在生产兰博基尼...\r\n商店从汽车工厂买到兰博基尼\r\n客户从汽车商店买到兰博基尼\r\n第二次购买汽车\r\n客户要从汽车商店购买兰博基尼\r\n商店从汽车工厂买到兰博基尼\r\n客户从汽车商店买到兰博基尼</code></pre>\r\n\r\n<p>3. 优点</p>\r\n\r\n<p style=\"margin-left:40px\">3.1&nbsp;职责清晰</p>\r\n\r\n<p style=\"margin-left:40px\">3.2&nbsp;高扩展性</p>\r\n\r\n<p style=\"margin-left:40px\">3.3&nbsp;智能化</p>\r\n\r\n<p>4. 缺点</p>\r\n\r\n<p style=\"margin-left:40px\">4.1&nbsp;由于在客户端和真实主题之间增加了代理对象, 因此有些类型的代理模式可能会造成请求的处理速度变慢.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">4.2&nbsp;实现代理模式需要额外的工作, 有些代理模式的实现非常复杂.&nbsp;</p>', '2018-11-16 00:39:12.511828', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('c103c3844d95407185368a580ab076dd', 'MySQL悲观锁', '<p>悲观锁介绍（百科）：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;悲观锁，正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;使用场景举例：以MySQL InnoDB为例</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;商品goods表中有一个字段status，status为1代表商品未被下单，status为2代表商品已经被下单，那么我们对某个商品下单时必须确保该商品status为1。假设商品的id为1。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;1如果不采用锁，那么操作方法如下：</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">//1.查询出商品信息\r\nselect status from t_goods where id=1;\r\n\r\n//2.根据商品信息生成订单\r\ninsert into t_orders (id,goods_id) values (null,1);\r\n\r\n//3.修改商品status为2\r\nupdate t_goods set status=2;</code></pre>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;上面这种场景在高并发访问的情况下很可能会出现问题。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;前面已经提到，只有当goods status为1时才能对该商品下单，上面第一步操作中，查询出来的商品status为1。但是当我们执行第三步Update操作的时候，有可能出现其他人先一步对商品下单把goods status修改为2了，但是我们并不知道数据已经被修改了，这样就可能造成同一个商品被下单2次，使得数据不一致。所以说这种方式是不安全的。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;2使用悲观锁来实现：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;在上面的场景中，商品信息从查询出来到修改，中间有一个处理订单的过程，使用悲观锁的原理就是，当我们在查询出goods信息后就把当前的数据锁定，直到我们修改完毕后再解锁。那么在这个过程中，因为goods被锁定了，就不会出现有第三者来对其进行修改了。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;注：要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;我们可以使用命令设置MySQL为非autocommit模式：</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">set autocommit=0;</code></pre>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;设置完autocommit后，我们就可以执行我们的正常业务了。具体如下：</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">//0.开始事务\r\nbegin;/begin work;/start transaction; (三者选一就可以)\r\n\r\n//1.查询出商品信息\r\nselect status from t_goods where id=1 for update;\r\n\r\n//2.根据商品信息生成订单\r\ninsert into t_orders (id,goods_id) values (null,1);\r\n\r\n//3.修改商品status为2\r\nupdate t_goods set status=2;\r\n\r\n//4.提交事务\r\ncommit;/commit work;</code></pre>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;上面的第一步我们执行了一次查询操作：select status from t_goods where id=1 for update; 与普通查询不一样的是，我们使用了select&hellip;for update的方式，这样就通过数据库实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;注：需要注意的是，在事务中，只有SELECT ... FOR UPDATE(排他锁)或LOCK IN SHARE MODE(共享锁)同一条数据时会等待其它事务结束后才执行，一般SELECT ... 则不受此影响。拿上面的实例来说，当我执行select status from t_goods where id=1 for update;后。我在另外的事务中如果再次执行select status from t_goods where id=1 for update;则第二个事务会一直等待第一个事务的提交，此时第二个查询处于阻塞的状态，但是如果我是在第二个事务中执行select status from t_goods where id=1;则能正常查询出数据，不会受第一个事务的影响。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;补充：MySQL select&hellip;for update的Row Lock与Table Lock</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;上面我们提到，使用select&hellip;for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认Table Lock ，所以只有「明确」地指定主键，MySQL 才会执行Row lock (只锁住被选取的数据) ，否则MySQL 将会执行Table Lock (将整个数据表单给锁住)。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;举例说明：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;数据库表t_goods，包括id,status,name三个字段，id为主键，数据库中记录如下:</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  1 |      1 | 道具 |  \r\n|  2 |      1 | 装备 |  \r\n+----+--------+------+  \r\n2 rows in set  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; 注：为了测试数据库锁，我使用两个transaction来模拟不同的事务操作，分别用transaction1、transaction2来表示。&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;例1: (明确指定主键，并且有此数据，row lock)</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;transaction1：查询出结果，但是把该条数据锁定了</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where id=1 for update;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  1 |      1 | 道具 |  \r\n+----+--------+------+  \r\n1 row in set  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：查询被阻塞(一直在等待状态, 直到transaction1事务提交)</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where id=1 for update;  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：如果transaction1长时间未提交，则会报错</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where id=1 for update;  \r\nERROR 1205 : Lock wait timeout exceeded; try restarting transaction  </code></pre>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;例2: (明确指定主键，若查无此数据，无lock)</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;transaction1：查询结果为空</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where id=3 for update;  \r\nEmpty set  \r\n</code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：查询结果为空，查询无阻塞，说明transaction1没有对数据执行锁定</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where id=3 for update;  \r\nEmpty set</code></pre>\r\n\r\n<p>&nbsp; &nbsp; 例3: (无主键，table lock)</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;transaction1：查询name=道具 的数据，查询正常</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where name=\'道具\' for update;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  1 |      1 | 道具 |  \r\n+----+--------+------+  \r\n1 row in set  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：查询name=装备 的数据，查询阻塞，说明transaction1把表给锁住了</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where name=\'装备\' for update;  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：若transaction1长时间未提交，则查询返回为空</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where name=\'装备\' for update;  \r\nQuery OK, -1 rows affected  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; 例4: (主键不明确，table lock)</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;transaction1：查询正常</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; begin;  \r\nQuery OK, 0 rows affected  \r\nmysql&gt; select * from t_goods where id&gt;0 for update;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  1 |      1 | 道具 |  \r\n|  2 |      1 | 装备 |  \r\n+----+--------+------+  \r\n2 rows in set</code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：查询被阻塞，说明console1把表给锁住了</p>\r\n\r\n<pre>\r\n<code class=\"language-scheme\">mysql&gt; select * from t_goods where id&gt;1 for update; </code></pre>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;例5: (主键不明确，table lock)</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;transaction1：</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; begin;  \r\nQuery OK, 0 rows affected  \r\nmysql&gt; select * from t_goods where id&lt;&gt;1 for update;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  2 |      1 | 装备 |  \r\n+----+--------+------+  \r\n1 row in set</code></pre>\r\n\r\n<p>&nbsp;&nbsp; &nbsp; transaction2：查询被阻塞，说明transaction1把表给锁住了</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where id&lt;&gt;2 for update;</code></pre>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; transaction1：提交事务</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; commit;\r\nQuery OK, 0 rows affected  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：transaction1事务提交后，transaction2查询结果正常</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where id&lt;&gt;2 for update;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  1 |      1 | 道具 |  \r\n+----+--------+------+  \r\n1 row in set  </code></pre>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;以上就是关于数据库主键对MySQL锁级别的影响实例，需要注意的是，除了主键外，使用索引也会影响数据库的锁定级别</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;举例：</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;我们修改t_goods表，给status字段创建一个索引</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;修改id为2的数据的status为2，此时表中数据为：</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  1 |      1 | 道具 |  \r\n|  2 |      2 | 装备 |  \r\n+----+--------+------+  \r\n2 rows in set  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; 例6: (明确指定索引，并且有此数据，row lock)</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;transaction1：</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where status=1 for update;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  1 |      1 | 道具 |  \r\n+----+--------+------+  \r\n1 row in set  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：查询status=1的数据时阻塞，超时后返回为空，说明数据被transaction1锁定了</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where status=1 for update;  \r\nQuery OK, -1 rows affected  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：查询status=2的数据，能正常查询，说明transaction1只锁住了行，未锁表</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where status=2 for update;  \r\n+----+--------+------+  \r\n| id | status | name |  \r\n+----+--------+------+  \r\n|  2 |      2 | 装备 |  \r\n+----+--------+------+  \r\n1 row in set  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; 例7: (明确指定索引，若查无此数据，无lock)</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;transaction1：查询status=3的数据，返回空数据</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where status=3 for update;  \r\nEmpty set  </code></pre>\r\n\r\n<p>&nbsp; &nbsp; transaction2：查询status=3的数据，返回空数据</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">mysql&gt; select * from t_goods where status=3 for update;  \r\nEmpty set  </code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-06 06:04:31.489460', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('c54208e462a84f81a09434b9708e0736', 'HttpClient工具类(通过Java后台进行Http访问)', '<p>1. Maven导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;  \r\n    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;  \r\n    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;  \r\n    &lt;version&gt;4.3.1&lt;/version&gt;  \r\n&lt;/dependency&gt;  \r\n&lt;dependency&gt;  \r\n    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;  \r\n    &lt;artifactId&gt;httpcore&lt;/artifactId&gt;  \r\n    &lt;version&gt;4.3.1&lt;/version&gt;  \r\n&lt;/dependency&gt;  \r\n&lt;dependency&gt;  \r\n    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;  \r\n    &lt;artifactId&gt;httpmime&lt;/artifactId&gt;  \r\n    &lt;version&gt;4.3.1&lt;/version&gt;  \r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>2. Java代码</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.security.KeyManagementException;\r\nimport java.security.KeyStore;\r\nimport java.security.KeyStoreException;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.cert.CertificateException;\r\nimport java.security.cert.X509Certificate;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport javax.net.ssl.SSLContext;\r\n\r\nimport org.apache.http.HttpEntity;\r\nimport org.apache.http.NameValuePair;\r\nimport org.apache.http.ParseException;\r\nimport org.apache.http.client.ClientProtocolException;\r\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\r\nimport org.apache.http.client.methods.CloseableHttpResponse;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.conn.ssl.SSLConnectionSocketFactory;\r\nimport org.apache.http.conn.ssl.SSLContextBuilder;\r\nimport org.apache.http.conn.ssl.SSLContexts;\r\nimport org.apache.http.conn.ssl.TrustSelfSignedStrategy;\r\nimport org.apache.http.conn.ssl.TrustStrategy;\r\nimport org.apache.http.entity.mime.HttpMultipartMode;\r\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\r\nimport org.apache.http.entity.mime.content.FileBody;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.message.BasicNameValuePair;\r\nimport org.apache.http.util.CharsetUtils;\r\nimport org.apache.http.util.EntityUtils;\r\n\r\n/**\r\n * HttpClient工具类\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午2:35:09\r\n */\r\npublic class HttpClientUtils {\r\n	/**\r\n	 * HttpClient连接SSL，需要导入证书的方法 若SSL需要导入信任的证书，使用该方法\r\n	 * \r\n	 * @param url\r\n	 */\r\n	public static void ssl(String url) {\r\n		CloseableHttpClient httpclient = null;\r\n		try {\r\n			KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n			FileInputStream instream = new FileInputStream(new File(\"E:\\\\tomcat.keystore\"));\r\n			try {\r\n				// 加载keyStore d:\\\\tomcat.keystore\r\n				trustStore.load(instream, \"123456\".toCharArray());\r\n			} catch (CertificateException e) {\r\n				e.printStackTrace();\r\n			} finally {\r\n				try {\r\n					instream.close();\r\n				} catch (Exception ignore) {\r\n				}\r\n			}\r\n			// 相信自己的CA和所有自签名的证书\r\n			SSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(trustStore, new TrustSelfSignedStrategy())\r\n					.build();\r\n			// 只允许使用TLSv1协议\r\n			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslcontext, new String[] { \"TLSv1\" },\r\n					null, SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\r\n			httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();\r\n			// 创建http请求(get方式)\r\n			HttpGet httpget = new HttpGet(url);\r\n			System.out.println(\"executing request\" + httpget.getRequestLine());\r\n			CloseableHttpResponse response = httpclient.execute(httpget);\r\n			try {\r\n				HttpEntity entity = response.getEntity();\r\n				System.out.println(\"----------------------------------------\");\r\n				System.out.println(response.getStatusLine());\r\n				if (entity != null) {\r\n					System.out.println(\"Response content length: \" + entity.getContentLength());\r\n					System.out.println(EntityUtils.toString(entity));\r\n					EntityUtils.consume(entity);\r\n				}\r\n			} finally {\r\n				response.close();\r\n			}\r\n		} catch (ParseException e) {\r\n			e.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} catch (KeyManagementException e) {\r\n			e.printStackTrace();\r\n		} catch (NoSuchAlgorithmException e) {\r\n			e.printStackTrace();\r\n		} catch (KeyStoreException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			if (httpclient != null) {\r\n				try {\r\n					httpclient.close();\r\n				} catch (IOException e) {\r\n					e.printStackTrace();\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 不需要导入证书，SSL信任所有证书，使用该方法\r\n	 * \r\n	 * @return\r\n	 */\r\n	public static CloseableHttpClient createSSLClientDefault() {\r\n		try {\r\n			SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy() {\r\n				// 信任所有证书\r\n				public boolean isTrusted(X509Certificate[] chain, String authType) throws CertificateException {\r\n					return true;\r\n				}\r\n			}).build();\r\n			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext);\r\n			return HttpClients.custom().setSSLSocketFactory(sslsf).build();\r\n\r\n		} catch (KeyManagementException e) {\r\n\r\n			e.printStackTrace();\r\n\r\n		} catch (NoSuchAlgorithmException e) {\r\n\r\n			e.printStackTrace();\r\n\r\n		} catch (KeyStoreException e) {\r\n\r\n			e.printStackTrace();\r\n\r\n		}\r\n		return HttpClients.createDefault();\r\n\r\n	}\r\n\r\n	/**\r\n	 * HttpClient连接SSL，不需要导入证书 信任所有证书，跳过证书验证\r\n	 * \r\n	 * @param url\r\n	 */\r\n\r\n	public static void ssl2(String url) {\r\n		CloseableHttpClient httpclient = null;\r\n		try {\r\n\r\n			httpclient = createSSLClientDefault();\r\n			// 创建http请求(get方式)\r\n			HttpGet httpget = new HttpGet(url);\r\n			System.out.println(\"executing request\" + httpget.getRequestLine());\r\n			CloseableHttpResponse response = httpclient.execute(httpget);\r\n			try {\r\n				HttpEntity entity = response.getEntity();\r\n				System.out.println(\"----------------------------------------\");\r\n				System.out.println(response.getStatusLine());\r\n				if (entity != null) {\r\n					System.out.println(\"Response content length: \" + entity.getContentLength());\r\n					System.out.println(EntityUtils.toString(entity));\r\n					EntityUtils.consume(entity);\r\n				}\r\n			} finally {\r\n				response.close();\r\n			}\r\n		} catch (ParseException e) {\r\n			e.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			if (httpclient != null) {\r\n				try {\r\n					httpclient.close();\r\n				} catch (IOException e) {\r\n					e.printStackTrace();\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 发送 get请求\r\n	 */\r\n	public static void get(String url) {\r\n		CloseableHttpClient httpclient = HttpClients.createDefault();\r\n		try {\r\n			// 创建httpget.\r\n			HttpGet httpget = new HttpGet(url);\r\n			System.out.println(\"executing request \" + httpget.getURI());\r\n			// 执行get请求.\r\n			CloseableHttpResponse response = httpclient.execute(httpget);\r\n			try {\r\n				// 获取响应实体\r\n				HttpEntity entity = response.getEntity();\r\n				System.out.println(\"--------------------------------------\");\r\n				// 打印响应状态\r\n				System.out.println(response.getStatusLine());\r\n				if (entity != null) {\r\n					// 打印响应内容长度\r\n					System.out.println(\"Response content length: \" + entity.getContentLength());\r\n					// 打印响应内容\r\n					System.out.println(\"Response content: \" + EntityUtils.toString(entity));\r\n				}\r\n				System.out.println(\"------------------------------------\");\r\n			} finally {\r\n				response.close();\r\n			}\r\n		} catch (ClientProtocolException e) {\r\n			e.printStackTrace();\r\n		} catch (ParseException e) {\r\n			e.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			// 关闭连接,释放资源\r\n			try {\r\n				httpclient.close();\r\n			} catch (IOException e) {\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 发送 post请求 访问本地应用并根据传递参数不同返回不同结果\r\n	 */\r\n	public static void post(String url) {\r\n		// 创建默认的httpClient实例.\r\n		CloseableHttpClient httpclient = HttpClients.createDefault();\r\n		// 创建httppost\r\n		HttpPost httppost = new HttpPost(url);\r\n		// 创建参数队列\r\n		List&lt;NameValuePair&gt; formparams = new ArrayList&lt;NameValuePair&gt;();\r\n		formparams.add(new BasicNameValuePair(\"inputVal\", \"13301330133\"));\r\n\r\n		UrlEncodedFormEntity uefEntity;\r\n		try {\r\n			uefEntity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\r\n			httppost.setEntity(uefEntity);\r\n			System.out.println(\"executing request \" + httppost.getURI());\r\n			CloseableHttpResponse response = httpclient.execute(httppost);\r\n			try {\r\n				HttpEntity entity = response.getEntity();\r\n				if (entity != null) {\r\n					System.out.println(\"--------------------------------------\");\r\n					System.out.println(\"Response content: \" + EntityUtils.toString(entity, \"UTF-8\"));\r\n					System.out.println(\"--------------------------------------\");\r\n				}\r\n			} finally {\r\n				response.close();\r\n			}\r\n		} catch (ClientProtocolException e) {\r\n			e.printStackTrace();\r\n		} catch (UnsupportedEncodingException e1) {\r\n			e1.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			// 关闭连接,释放资源\r\n			try {\r\n				httpclient.close();\r\n			} catch (IOException e) {\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * post方式提交表单（模拟用户登录请求）\r\n	 */\r\n	public static void postForm(String url) {\r\n		// 创建默认的httpClient实例.\r\n		CloseableHttpClient httpclient = HttpClients.createDefault();\r\n		// 创建httppost\r\n		HttpPost httppost = new HttpPost(url);\r\n		// 创建参数队列\r\n		List&lt;NameValuePair&gt; formparams = new ArrayList&lt;NameValuePair&gt;();\r\n		formparams.add(new BasicNameValuePair(\"j_username\", \"13301330133\"));\r\n		formparams.add(new BasicNameValuePair(\"j_password\", \"330133\"));\r\n		UrlEncodedFormEntity uefEntity;\r\n		try {\r\n			uefEntity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\r\n			httppost.setEntity(uefEntity);\r\n			System.out.println(\"executing request \" + httppost.getURI());\r\n			CloseableHttpResponse response = httpclient.execute(httppost);\r\n			try {\r\n				HttpEntity entity = response.getEntity();\r\n				if (entity != null) {\r\n					System.out.println(\"--------------------------------------\");\r\n					System.out.println(\"Response content: \" + EntityUtils.toString(entity, \"UTF-8\"));\r\n					System.out.println(\"--------------------------------------\");\r\n				}\r\n			} finally {\r\n				response.close();\r\n			}\r\n		} catch (ClientProtocolException e) {\r\n			e.printStackTrace();\r\n		} catch (UnsupportedEncodingException e1) {\r\n			e1.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			// 关闭连接,释放资源\r\n			try {\r\n				httpclient.close();\r\n			} catch (IOException e) {\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 上传文件\r\n	 */\r\n	public static void upload(String url) {\r\n		CloseableHttpClient httpclient = HttpClients.createDefault();\r\n		try {\r\n			HttpPost httppost = new HttpPost(url);\r\n			FileBody bin = new FileBody(new File(\"C:\\\\Users\\\\zhangwenchao\\\\Desktop\\\\jinzhongzi.jpg\"));\r\n			// StringBody name = new StringBody(\"这个一测试\",\r\n			// ContentType.TEXT_PLAIN);\r\n			HttpEntity reqEntity = MultipartEntityBuilder.create().setMode(HttpMultipartMode.BROWSER_COMPATIBLE)\r\n					.addPart(\"uploadFile\", bin).setCharset(CharsetUtils.get(\"UTF-8\")).build();\r\n			httppost.setEntity(reqEntity);\r\n			System.out.println(\"executing request: \" + httppost.getRequestLine());\r\n			CloseableHttpResponse response = httpclient.execute(httppost);\r\n\r\n			// httppost = new\r\n			// HttpPost(response.getLastHeader(\"location\").getValue());\r\n			// response = httpclient.execute(httppost);\r\n			try {\r\n				System.out.println(\"----------------------------------------\");\r\n				System.out.println(response.getStatusLine());\r\n				HttpEntity resEntity = response.getEntity();\r\n				if (resEntity != null) {\r\n					// 响应长度\r\n					System.out.println(\"Response content length: \" + resEntity.getContentLength());\r\n					// 打印响应内容\r\n					System.out.println(\"Response content: \" + EntityUtils.toString(resEntity));\r\n				}\r\n				// 销毁\r\n				EntityUtils.consume(resEntity);\r\n			} finally {\r\n				response.close();\r\n			}\r\n		} catch (ClientProtocolException e) {\r\n			e.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			try {\r\n				httpclient.close();\r\n			} catch (IOException e) {\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * 文件下载\r\n	 */\r\n	public static void download(String url) {\r\n		// 生成一个httpclient对象\r\n		CloseableHttpClient httpclient = HttpClients.createDefault();\r\n		try {\r\n			HttpGet httpget = new HttpGet(url);\r\n			CloseableHttpResponse response = httpclient.execute(httpget);\r\n			HttpEntity resEntity = response.getEntity();\r\n			if (resEntity != null) {\r\n				// 响应长度\r\n				System.out.println(\"Response content length: \" + resEntity.getContentLength());\r\n				InputStream in = resEntity.getContent();\r\n				String fileName = url.substring(url.lastIndexOf(\"/\"));\r\n				File file = new File(\"E:\\\\\" + fileName);\r\n				try {\r\n					FileOutputStream fout = new FileOutputStream(file);\r\n					int l = -1;\r\n					byte[] tmp = new byte[1024];\r\n					while ((l = in.read(tmp)) != -1) {\r\n						fout.write(tmp, 0, l);\r\n						// 注意这里如果用OutputStream.write(buff)的话，图片会失真，大家可以试试\r\n					}\r\n					fout.flush();\r\n					fout.close();\r\n				} finally {\r\n					// 关闭低层流。\r\n					in.close();\r\n				}\r\n			}\r\n		} catch (ClientProtocolException e) {\r\n			e.printStackTrace();\r\n		} catch (IOException e) {\r\n			e.printStackTrace();\r\n		} finally {\r\n			try {\r\n				httpclient.close();\r\n			} catch (IOException e) {\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 01:36:34.313392', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('c96b399e31b94571997c791252b2e4d7', 'Django备份和恢复数据库', '<p>1. 备份某一个APP<br />\r\npython manage.py dumpdata app_name --format=json &gt; app.json</p>\r\n\r\n<p>2. 备份整个db<br />\r\npython3 manage.py dumpdata --format=json &gt; /home/django/bak/blogs/bak_20180714.json</p>\r\n\r\n<p>3. 恢复<br />\r\npython manage.py loaddata app.json</p>', '2018-07-19 08:52:26.614836', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('c96d43f4d68e401f807782dd85ecfb28', 'Map的LinkedCaseInsensitiveMap和CaseInsensitiveMap', '<p>这两个map都是key不区分大小写的, 即key会自动转换为全小写</p>\r\n\r\n<p>CaseInsensitiveMap是无序的,&nbsp;LinkedCaseInsensitiveMap是有序的</p>', '2018-10-24 09:48:44.773153', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('ca27648bc68a447eb9453016bccc30f0', 'Python程序执行机制', '<p><img alt=\"\" src=\"https://paulandcode.com/blogs/Python%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/01.png\" style=\"height:777px; width:1000px\" /></p>', '2018-07-25 07:45:23.919153', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('cad959b60c604051a67a45e9d9b80d24', 'Cookie工具类', '<pre>\r\n<code class=\"language-java\">import java.io.UnsupportedEncodingException;  \r\nimport java.net.URLDecoder;  \r\nimport java.net.URLEncoder;  \r\nimport javax.servlet.http.Cookie;  \r\nimport javax.servlet.http.HttpServletRequest;  \r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\n/**\r\n * Cookie工具类\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:15:52\r\n */\r\npublic class CookieUtils {\r\n	 /** \r\n     * 得到Cookie的值, 不编码 \r\n     *  \r\n     * @param request \r\n     * @param cookieName \r\n     * @return \r\n     */  \r\n    public static String getCookieValue(HttpServletRequest request, String cookieName) {  \r\n        return getCookieValue(request, cookieName, false);  \r\n    }  \r\n  \r\n    /** \r\n     * 得到Cookie的值\r\n     *  \r\n     * @param request \r\n     * @param cookieName \r\n     * @return \r\n     */  \r\n    public static String getCookieValue(HttpServletRequest request, String cookieName, boolean isDecoder) {  \r\n        Cookie[] cookieList = request.getCookies();  \r\n        if (cookieList == null || cookieName == null) {  \r\n            return null;  \r\n        }  \r\n        String retValue = null;  \r\n        try {  \r\n            for (int i = 0; i &lt; cookieList.length; i++) {  \r\n                if (cookieList[i].getName().equals(cookieName)) {  \r\n                    if (isDecoder) {  \r\n                        retValue = URLDecoder.decode(cookieList[i].getValue(), \"UTF-8\");  \r\n                    } else {  \r\n                        retValue = cookieList[i].getValue();  \r\n                    }  \r\n                    break;  \r\n                }  \r\n            }  \r\n        } catch (UnsupportedEncodingException e) {  \r\n            e.printStackTrace();  \r\n        }  \r\n        return retValue;  \r\n    }  \r\n  \r\n    /** \r\n     * 得到Cookie的值\r\n     *  \r\n     * @param request \r\n     * @param cookieName \r\n     * @return \r\n     */  \r\n    public static String getCookieValue(HttpServletRequest request, String cookieName, String encodeString) {  \r\n        Cookie[] cookieList = request.getCookies();  \r\n        if (cookieList == null || cookieName == null) {  \r\n            return null;  \r\n        }  \r\n        String retValue = null;  \r\n        try {  \r\n            for (int i = 0; i &lt; cookieList.length; i++) {  \r\n                if (cookieList[i].getName().equals(cookieName)) {  \r\n                    retValue = URLDecoder.decode(cookieList[i].getValue(), encodeString);  \r\n                    break;  \r\n                }  \r\n            }  \r\n        } catch (UnsupportedEncodingException e) {  \r\n             e.printStackTrace();  \r\n        }  \r\n        return retValue;  \r\n    }  \r\n  \r\n    /**\r\n     *   \r\n     * 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码.\r\n     * @param request\r\n     * @param response\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     */\r\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,  \r\n            String cookieValue) {  \r\n        setCookie(request, response, cookieName, cookieValue, -1);  \r\n    }  \r\n  \r\n    /**\r\n     *   \r\n     * 设置Cookie的值 在指定时间内生效,但不编码.\r\n     * @param request\r\n     * @param response\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param cookieMaxage cookie生效的最大秒数 \r\n     */\r\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,  \r\n            String cookieValue, int cookieMaxage) {  \r\n        setCookie(request, response, cookieName, cookieValue, cookieMaxage, false);  \r\n    }  \r\n  \r\n    /**\r\n     *   \r\n     * 设置Cookie的值 不设置生效时间,但编码.\r\n     * @param request\r\n     * @param response\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param isEncode\r\n     */\r\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,  \r\n            String cookieValue, boolean isEncode) {  \r\n        setCookie(request, response, cookieName, cookieValue, -1, isEncode);  \r\n    }  \r\n  \r\n    /**\r\n     *   \r\n     * 设置Cookie的值 在指定时间内生效, 编码参数.\r\n     * @param request\r\n     * @param response\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param cookieMaxage cookie生效的最大秒数 \r\n     * @param isEncode 是否编码\r\n     */\r\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,  \r\n            String cookieValue, int cookieMaxage, boolean isEncode) {  \r\n        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);  \r\n    }  \r\n  \r\n    /** \r\n     * 设置Cookie的值 在指定时间内生效, 编码参数(指定编码) \r\n     */  \r\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,  \r\n            String cookieValue, int cookieMaxage, String encodeString) {  \r\n        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);  \r\n    }  \r\n  \r\n    /**\r\n     *   \r\n     * 删除Cookie.\r\n     * @param request\r\n     * @param response\r\n     * @param cookieName\r\n     */\r\n    public static void deleteCookie(HttpServletRequest request, HttpServletResponse response,  \r\n            String cookieName) {  \r\n        doSetCookie(request, response, cookieName, \"\", -1, false);  \r\n    }  \r\n  \r\n    /** \r\n     * 设置Cookie的值，并使其在指定时间内生效 \r\n     *  \r\n     * @param cookieMaxage cookie生效的最大秒数 \r\n     */  \r\n    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,  \r\n            String cookieName, String cookieValue, int cookieMaxage, boolean isEncode) {  \r\n        try {  \r\n            if (cookieValue == null) {  \r\n                cookieValue = \"\";  \r\n            } else if (isEncode) {  \r\n                cookieValue = URLEncoder.encode(cookieValue, \"utf-8\");  \r\n            }  \r\n            Cookie cookie = new Cookie(cookieName, cookieValue);  \r\n            if (cookieMaxage &gt; 0)  \r\n                cookie.setMaxAge(cookieMaxage);  \r\n            if (null != request) {// 设置域名的cookie  \r\n                String domainName = getDomainName(request);  \r\n                System.out.println(domainName);  \r\n                if (!\"localhost\".equals(domainName)) {  \r\n                    //cookie.setDomain(domainName);  \r\n                }  \r\n            }  \r\n            cookie.setPath(\"/\");  \r\n            response.addCookie(cookie);  \r\n        } catch (Exception e) {  \r\n             e.printStackTrace();  \r\n        }  \r\n    }  \r\n  \r\n    /** \r\n     * 设置Cookie的值，并使其在指定时间内生效 \r\n     *  \r\n     * @param cookieMaxage cookie生效的最大秒数 \r\n     */  \r\n    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,  \r\n            String cookieName, String cookieValue, int cookieMaxage, String encodeString) {  \r\n        try {  \r\n            if (cookieValue == null) {  \r\n                cookieValue = \"\";  \r\n            } else {  \r\n                cookieValue = URLEncoder.encode(cookieValue, encodeString);  \r\n            }  \r\n            Cookie cookie = new Cookie(cookieName, cookieValue);  \r\n            if (cookieMaxage &gt; 0)  \r\n                cookie.setMaxAge(cookieMaxage);  \r\n            if (null != request) {// 设置域名的cookie  \r\n                String domainName = getDomainName(request);  \r\n                System.out.println(domainName);  \r\n                if (!\"localhost\".equals(domainName)) {  \r\n                    //本地测试的时候不要写.实际发布时在打开  \r\n                    //cookie.setDomain(domainName);  \r\n                }  \r\n            }  \r\n            cookie.setPath(\"/\");  \r\n            response.addCookie(cookie);  \r\n        } catch (Exception e) {  \r\n             e.printStackTrace();  \r\n        }  \r\n    }  \r\n  \r\n    /** \r\n     * 得到cookie的域名 \r\n     */  \r\n    private static final String getDomainName(HttpServletRequest request) {  \r\n        String domainName = null;  \r\n  \r\n        String serverName = request.getRequestURL().toString();  \r\n        if (serverName == null || serverName.equals(\"\")) {  \r\n            domainName = \"\";  \r\n        } else {  \r\n            final int end = serverName.lastIndexOf(\"/\");  \r\n            serverName = serverName.substring(0, end);  \r\n            final String[] domains = serverName.split(\"\\\\.\");  \r\n            int len = domains.length;  \r\n            if (len &gt; 3) {  \r\n                // www.xxx.com.cn  \r\n                domainName = \".\" + domains[len - 3] + \".\" + domains[len - 2] + \".\" + domains[len - 1];  \r\n            } else if (len &lt;= 3 &amp;&amp; len &gt; 1) {  \r\n                // xxx.com or xxx.cn  \r\n                domainName = \".\" + domains[len - 2] + \".\" + domains[len - 1];  \r\n            } else {  \r\n                domainName = serverName;  \r\n            }  \r\n        }  \r\n  \r\n        if (domainName != null &amp;&amp; domainName.indexOf(\":\") &gt; 0) {  \r\n            String[] ary = domainName.split(\"\\\\:\");  \r\n            domainName = ary[0];  \r\n        }  \r\n        return domainName;  \r\n    } \r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 01:26:44.941485', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('cf5aeb9de71d452e81e05c5b6a94ffb1', 'Eclipse的Servers中无法发布Tomcat项目', '<p>1. 关闭Eclipse</p>\r\n\r\n<p>2. 打开Eclipse软件的工作目录(workspace)下的.metadata\\.plugins\\org.eclipse.core.runtime\\.settings文件夹.&nbsp;</p>\r\n\r\n<p>3. 删除org.eclipse.wst.server.core.prefs和org.eclipse.jst.server.tomcat.core.prefs这两个文件.&nbsp;</p>\r\n\r\n<p>4. 重新启动Eclipse.&nbsp;</p>', '2018-07-23 02:39:38.866761', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('cf97c2fdf42e4269b8f1c2c48783e172', 'Linux防火墙常用命令', '<p>1. 通用命令: 查看防火墙版本</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">iptables -version</code></pre>\r\n\r\n<p>2.&nbsp;RHEL6</p>\r\n\r\n<p style=\"margin-left:40px\">(1)查看防火墙状态(如果得到一系列的信息, 说明防火墙处于开启状态)</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">/etc/init.d/iptables status</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2)开启/关闭防火墙, 重启后生效</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">chkconfig iptables on\r\nchkconfig iptables off</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3)开启/关闭/重启防火墙, 即时生效, 但重启系统后防火墙会恢复到之前的开启或关闭状态</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">service iptables stop\r\nservice iptables start\r\nservice iptables restart</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4)允许访问80端口</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">iptables -I INPUT -i eth0 -p tcp --dport 80 -j ACCEPT\r\niptables  -I OUTPUT -o eth0 -p tcp --sport 80 -j ACCEPT\r\n/etc/rc.d/init.d/iptables save</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(5)阻止访问80端口</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">iptables -I INPUT -i eth0 -p tcp --dport 80 -j DROP\r\niptables -I OUTPUT -o eth0 -p tcp --sport 80 -j DROP\r\n/etc/rc.d/init.d/iptables save</code></pre>\r\n\r\n<p>3.&nbsp;RHEL7</p>\r\n\r\n<p style=\"margin-left:40px\">(1)启动/关闭防火墙服务</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">systemctl start firewalld.service\r\nsystemctl stop firewalld.service\r\nsystemctl restart firewalld.service</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(2)显示防火墙服务状态</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">systemctl status firewalld.service</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3)设置开机启动/禁用防护墙服务</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">systemctl enable firewalld.service\r\nsystemctl disable firewalld.service</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4)查看防火墙服务是否开机启动</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">systemctl is-enabled firewalld.service;echo $?</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(5)查看已启动的服务列表</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">systemctl list-unit-files | grep enabled</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(6)查看防火墙允许的端口号</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">firewall-cmd --zone=public --list-ports</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(7)允许访问80端</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo firewall-cmd --zone=public --add-port=80/tcp --permanent\r\nsudo firewall-cmd --reload</code></pre>\r\n\r\n<p style=\"margin-left:40px\">若不使用&ldquo;--permanent&rdquo;, 则防火墙规则在重启后会失效.</p>\r\n\r\n<p style=\"margin-left:40px\">(8)阻止访问80端口</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo firewall-cmd --zone=public --remove-port=80/tcp --permanent\r\nsudo firewall-cmd --reload</code></pre>\r\n\r\n<p style=\"margin-left:40px\">若不使用&ldquo;--permanent&rdquo;, 则防火墙规则在重启后会失效.</p>\r\n\r\n<p>4. Ubuntu</p>\r\n\r\n<p style=\"margin-left:40px\">(1).&nbsp;由于Linux原始的防火墙工具iptables过于繁琐, 所以Ubuntu默认提供了一个基于iptable之上的防火墙工具ufw. Ubuntu已默认安装ufw.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">(2). 安装防火墙</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">apt install ufw</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(3). 查看版本</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ufw version</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(4). 打开/关闭防火墙</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ufw enable\r\nufw disable</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(5).&nbsp;外来访问默认允许/拒绝</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ufw default allow/deny</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(6).&nbsp;显示防火墙状态</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ufw status</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(7). 允许/禁用某服务对应的端口号(ufw从/etc/services中找到对应service的端口, 进行过滤)</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ufw allow [service]\r\nsudo ufw deny [service]</code></pre>\r\n\r\n<p>例如:&nbsp;sudo ufw allow ssh表明: 允许所有的外部IP访问本机的22/tcp(ssh)端口</p>\r\n\r\n<p style=\"margin-left:40px\">(8). 允许/禁用某端口号(例: 22包括tcp和udp, 22/tcp只是tcp端口, 22/udp只是udp端口)</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ufw allow 22\r\nsudo ufw deny 22</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(9).&nbsp;允许/禁用某特定IP</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ufw allow from 122.168.254.254 to any\r\nufw deny from 122.168.254.254 to any</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(10).&nbsp;允许/禁用某特定IP的某个端口的访问</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">ufw allow from 122.168.254.254 to any port 80\r\nufw deny from 122.168.254.254 to any port 80</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(11). 删除某个已定义的规则</p>\r\n\r\n<p style=\"margin-left:80px\">&lt;1&gt;显示规则号, 输入如下命令</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ufw status numbered</code></pre>\r\n\r\n<p style=\"margin-left:80px\">会显示防火墙的已有规则并编号</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">Status: active\r\n     To                         Action      From\r\n     --                         ------      ----\r\n[ 1] Nginx HTTP                 ALLOW IN    Anywhere                  \r\n[ 2] OpenSSH                    ALLOW IN    Anywhere                  \r\n[ 3] Nginx HTTP (v6)            ALLOW IN    Anywhere (v6)             \r\n[ 4] OpenSSH (v6)               ALLOW IN    Anywhere (v6)</code></pre>\r\n\r\n<p style=\"margin-left:80px\">&lt;2&gt;根据编号删除某个规则, 如删除上面Nginx(v6)的规则</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo ufw delete 3</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(12)/var/lib/ufw/user.rules这个文件中是我们设置的一些防火墙规则, 有时我们可以直接修改这个文件, 不用使用命令来设定. 修改后记得ufw reload后重启ufw使得新规则生效.</p>', '2018-07-19 06:02:51.178018', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d0aea702485f4c0c972f58fca49dc68e', '异常拦截处理', '<pre>\r\n<code class=\"language-java\">import javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.apache.shiro.authz.AuthorizationException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.dao.DuplicateKeyException;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.servlet.HandlerExceptionResolver;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\n\r\n/**\r\n * 异常拦截处理\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:15:52\r\n */\r\n@Component\r\npublic class RRExceptionHandler implements HandlerExceptionResolver {\r\n	private Logger logger = LoggerFactory.getLogger(getClass());\r\n	\r\n	@Override\r\n	public ModelAndView resolveException(HttpServletRequest request,\r\n			HttpServletResponse response, Object handler, Exception ex) {\r\n		R r = new R();\r\n		try {\r\n			response.setContentType(\"application/json;charset=utf-8\");\r\n			response.setCharacterEncoding(\"utf-8\");\r\n\r\n			\r\n			if (ex instanceof RRException) {\r\n				r.put(\"code\", ((RRException) ex).getCode());\r\n				r.put(\"msg\", ((RRException) ex).getMessage());\r\n				r.put(\"tip\", ((RRException) ex).getMessage());\r\n			}else if(ex instanceof DuplicateKeyException){\r\n				r = R.error(\"数据库中已存在该记录\");\r\n			}else if(ex instanceof AuthorizationException){\r\n				r = R.error(\"没有权限，请联系管理员授权\").put(\"tip\", \"没有权限，请联系管理员授权\").put(\"content\", null);\r\n			}else{\r\n				r = R.error();\r\n			}\r\n			\r\n			//记录异常日志\r\n			logger.error(ex.getMessage(), ex);\r\n			\r\n			String json = JSON.toJSONString(r);\r\n			response.getWriter().print(json);\r\n		} catch (Exception e) {\r\n			logger.error(\"RRExceptionHandler 异常处理失败\", e);\r\n			e.printStackTrace();\r\n		}\r\n		return new ModelAndView();\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 01:11:53.006559', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d1e0c90f8a3342f68774cd7f9ead060f', 'code combat私服搭建', '<p>１．docker-compose文件</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.5\"\r\n\r\nservices:\r\n blog:\r\n  image: operepo/ope-codecombat\r\n  restart: always\r\n  container_name: codecombat\r\n  ports:\r\n   - \"8086:3000\"</code></pre>\r\n\r\n<p>２．访问地址: 127.0.0.1:8086</p>\r\n\r\n<p>3. 解锁订阅</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">sudo docker exec -it codecombat /bin/bash\r\n\r\nmongo\r\n\r\nuse coco\r\n\r\ndb.users.update({\'name\':\'假的吧\'},{$set:{\'earned.gems\':100, permissions:[\"godmode\",\"admin\"]}},true,false);\r\n\r\nexit\r\n\r\nexit</code></pre>\r\n\r\n<p>里面的ｎａｍｅ是用户名</p>', '2019-07-15 01:06:28.946769', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d45c7bf61b92461cae4607f2af6774f9', 'Spring Boot项目更改Tomcat默认端口号和context-path和命令行启动时指定端口号', '<p>1. 指定默认端口号和项目根路径</p>\r\n\r\n<p>在application.yml文件中添加如下配置</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">server:\r\n  # 指定端口号\r\n  port: 8080\r\n  # 指定context path\r\n  servlet:\r\n    context-path: /web-socket</code></pre>\r\n\r\n<p>2.&nbsp;命令行启动时指定端口号</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">java -jar test.jar --server.port=8000</code></pre>\r\n\r\n<p>&nbsp;</p>', '2019-10-24 09:16:45.548699', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d4bdd60637934d2ea51adb23637cda2f', 'Linux上的MySQL设置区分大小写', '<p>在/etc/mysql/mysql.conf.d/mysqld.cnf中最后一行加入如下代码:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">lower_case_table_names=1</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-13 08:27:01.891170', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d5129020b19f4e63a502ac65bc111f19', 'ORA-01810: 格式代码出现两次', '<p>1. 错误原因</p>\r\n\r\n<p>Oracle中格式化时间时出错(分钟不能用java中的mm), 出错Sql代码:</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">TO_DATE(\'2011-09-24 00:00:00\',\'YYYY-MM-DD HH:mm:ss\')</code></pre>\r\n\r\n<p>2. 正确的Sql如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">TO_CHAR(\'2011-09-01 00:00:00\',\'YYYY-MM-DD HH24:MI:SS\')</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-21 06:17:05.182281', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d5763e9ead754d848e8bc54ecb459e28', '使用Maven搭建多模块项目', '<p>1.&nbsp;jeesite4项目文件夹下有五个文件, 他们通过Maven构成了项目的四个模块, 文件结构如下(去掉其他不相关文件):</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/jeesite4%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9%3A%20%E4%BD%BF%E7%94%A8Maven%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%3B/01.png\" style=\"height:339px; width:300px\" /></p>\r\n\r\n<p>其中root为根, 根下包含了四个模块, common(公共模块), modules/core(核心模块), parent(父模块), web(web业务模块)</p>\r\n\r\n<p>导入项目时, 只需要导入root中的pom.xml即可将项目所有模块导入</p>\r\n\r\n<p>2. root中pom.xml部分代码如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;groupId&gt;com.jeesite&lt;/groupId&gt;\r\n&lt;artifactId&gt;jeesite-root&lt;/artifactId&gt;\r\n&lt;version&gt;4.1.3-SNAPSHOT&lt;/version&gt;\r\n&lt;packaging&gt;pom&lt;/packaging&gt;\r\n\r\n&lt;modules&gt;\r\n    &lt;module&gt;../parent&lt;/module&gt;\r\n    &lt;module&gt;../common&lt;/module&gt;\r\n    &lt;module&gt;../modules/core&lt;/module&gt;\r\n    &lt;module&gt;../web&lt;/module&gt;\r\n&lt;/modules&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(1) 打包方式为: pom</p>\r\n\r\n<p style=\"margin-left:40px\">(2) modules标签中声名了该项目的四个模块(指定模块文件夹的相对路径)</p>\r\n\r\n<p>3.&nbsp;parent中pom.xml部分代码如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;parent&gt;\r\n	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n	&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\r\n	&lt;version&gt;2.0.6.RELEASE&lt;/version&gt;\r\n&lt;/parent&gt;\r\n\r\n&lt;groupId&gt;com.jeesite&lt;/groupId&gt;\r\n&lt;artifactId&gt;jeesite-parent&lt;/artifactId&gt;\r\n&lt;version&gt;4.1.3-SNAPSHOT&lt;/version&gt;\r\n&lt;packaging&gt;pom&lt;/packaging&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(1) parent标签指定该模块继承自spring boot(Maven中的继承与Java中的继承类似, 作用是复用)</p>\r\n\r\n<p style=\"margin-left:40px\">(2) 打包方式为: pom</p>\r\n\r\n<p>4. common中pom.xml部分代码如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;parent&gt;\r\n	&lt;groupId&gt;com.jeesite&lt;/groupId&gt;\r\n	&lt;artifactId&gt;jeesite-parent&lt;/artifactId&gt;\r\n	&lt;version&gt;4.1.3-SNAPSHOT&lt;/version&gt;\r\n	&lt;relativePath&gt;../parent/pom.xml&lt;/relativePath&gt;\r\n&lt;/parent&gt;\r\n\r\n&lt;artifactId&gt;jeesite-common&lt;/artifactId&gt;\r\n&lt;packaging&gt;jar&lt;/packaging&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">(1) relativePath指定父项目, 若不写, 默认为&quot;../pom.xml&quot;, 若在指定处找不到父项目, 则从本地仓库中寻找, 还找不到则从远程仓库中寻找.&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">(2) 打包方式为jar</p>\r\n\r\n<p>5.&nbsp;module/core中pom.xml部分代码如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;parent&gt;\r\n	&lt;groupId&gt;com.jeesite&lt;/groupId&gt;\r\n	&lt;artifactId&gt;jeesite-parent&lt;/artifactId&gt;\r\n	&lt;version&gt;4.1.3-SNAPSHOT&lt;/version&gt;\r\n	&lt;relativePath&gt;../../parent/pom.xml&lt;/relativePath&gt;\r\n&lt;/parent&gt;\r\n\r\n&lt;artifactId&gt;jeesite-module-core&lt;/artifactId&gt;\r\n&lt;packaging&gt;jar&lt;/packaging&gt;</code></pre>\r\n\r\n<p>6.&nbsp;web中pom.xml部分代码如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;parent&gt;\r\n	&lt;groupId&gt;com.jeesite&lt;/groupId&gt;\r\n	&lt;artifactId&gt;jeesite-parent&lt;/artifactId&gt;\r\n	&lt;version&gt;4.1.3-SNAPSHOT&lt;/version&gt;\r\n	&lt;relativePath&gt;../parent/pom.xml&lt;/relativePath&gt;\r\n&lt;/parent&gt;\r\n\r\n&lt;artifactId&gt;jeesite-web&lt;/artifactId&gt;\r\n&lt;packaging&gt;war&lt;/packaging&gt;</code></pre>\r\n\r\n<p style=\"margin-left:40px\">这里打包方式为war</p>', '2019-03-18 07:34:11.973816', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d60e6333106e442b9934113185c41561', 'IDEA用Tomcat部署时war和war exploded的区别', '<p>1.&nbsp;war模式这种可以称之为是发布模式, 就是先打成war包, 再发布.&nbsp;</p>\r\n\r\n<p>2.&nbsp;war exploded模式是直接把文件夹, jsp页面, classes等等移到Tomcat部署文件夹里面, 进行加载部署. 因此这种方式支持热部署, 一般在开发时也是用这种方式.&nbsp;</p>\r\n\r\n<p>3.&nbsp;平时开发, 使用热部署的话, 应该对Tomcat进行相应的设置, 这样的话修改的页面, Java代码等才可以及时的显示出来, 热部署配置方式如下:&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp;&nbsp;<img alt=\"\" src=\"https://paulandcode.com/blogs/IDEA%E7%94%A8Tomcat%E9%83%A8%E7%BD%B2%E6%97%B6war%E5%92%8Cwar%20exploded%E7%9A%84%E5%8C%BA%E5%88%AB/01.png\" style=\"height:569px; width:800px\" /></p>', '2018-07-25 07:58:02.658364', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d813f0dd89604a31b2cc2ad210e40ad4', 'Windows查找端口号被占用', '<p>1. cmd输入:</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">netstat -aon|findstr \"8080\"</code></pre>\r\n\r\n<p>得到:<br />\r\n&nbsp; &nbsp;&nbsp; &nbsp;TCP &nbsp; &nbsp;127.0.0.1:8080 &nbsp; &nbsp; &nbsp; &nbsp; 127.0.0.1:51806 &nbsp; &nbsp; &nbsp; &nbsp;FIN_WAIT_2 &nbsp; &nbsp; &nbsp;3420<br />\r\n2. cmd输入:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">tasklist|findstr \"3420\"</code></pre>\r\n\r\n<p>得到:<br />\r\n&nbsp;&nbsp; &nbsp;javaw.exe &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3420 Console &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1 &nbsp; &nbsp;298,416 K</p>', '2018-07-23 03:26:54.745431', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d82d7a31c939407a8673260d6439f7dc', 'Dockerfile实现在centos7-jdk8容器中安装应用(以libreoffice为例)', '<p>1.&nbsp;Dockerfile文件</p>\r\n\r\n<pre>\r\n<code class=\"language-docker\">FROM bpatterson/centos7-jdk8\r\n\r\nRUN yum update -y\r\n\r\nRUN yum install -y libreoffice-headless libreoffice-writer libreoffice-calc libreoffice- libreoffice-impress libreoffice-langpack-zh-Hans libreoffice-langpack-zh-Hant libreoffice-langpack-ja ImageMagick curl\r\n\r\nRUN yum clean all\r\n\r\nWORKDIR /</code></pre>\r\n\r\n<p>2. 在Dockerfile文件所在目录下执行如下命令生成镜像</p>\r\n\r\n<pre>\r\n<code class=\"language-docker\">docker build -t libreoffice:1.0 .</code></pre>\r\n\r\n<p>3. 镜像生成后就可以通过compose文件或者直接使用命令启动容器了</p>\r\n\r\n<pre>\r\n<code class=\"language-yaml\">version: \"3.3\"\r\n\r\nservices:\r\n libreoffice:\r\n  image: libreoffice:1.0\r\n  restart: always\r\n  tty: true\r\n  command: /bin/bash\r\n  container_name: libreoffice\r\n  ports:\r\n   - \"8192:8080\"\r\n  volumes:\r\n   - type: bind\r\n     source: /home/libreoffice/data\r\n     target: /home/libreoffice/data</code></pre>\r\n\r\n<p>4. 启动容器后运行容器内应用</p>\r\n\r\n<pre>\r\n<code class=\"language-docker\">docker exec -t libreoffice libreoffice --headless --convert-to pdf /home/libreoffice/data/source/test.xls --outdir /home/libreoffice/data/target</code></pre>\r\n\r\n<p>5.&nbsp;libreoffice功能</p>\r\n\r\n<p style=\"margin-left:40px\">实现附件格式转换, 如: xls文件转换为doc文件, doc文件转换为pdf文件等等.</p>', '2018-07-16 08:41:18.982885', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('d94d1bf91dc8426fb64e29ac2440f9b6', 'MySQL中my.cnf的配置及说明', '<pre>\r\n<code class=\"language-apacheconf\">[client]\r\nport = 3306\r\nsocket = /tmp/mysql.sock\r\n[mysqld]\r\nport = 3306\r\nsocket = /tmp/mysql.sock\r\nbasedir = /usr/local/mysql\r\ndatadir = /data/mysql\r\npid-file = /data/mysql/mysql.pid\r\nuser = mysql\r\nbind-address = 0.0.0.0\r\nserver-id = 1 #表示是本机的序号为1,一般来讲就是master的意思\r\nskip-name-resolve\r\n# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，\r\n# 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求\r\n#skip-networking\r\nback_log = 600\r\n# MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，\r\n# 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。\r\n# 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，\r\n# 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。\r\n# 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。\r\n# 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。\r\nmax_connections = 1000\r\n# MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过\'conn%\'通配符查看当前状态的连接数量，以定夺该值的大小。\r\nmax_connect_errors = 6000\r\n# 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。\r\nopen_files_limit = 65535\r\n# MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，\r\n# 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。\r\ntable_open_cache = 128\r\n# MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64\r\n# 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；\r\n# 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上\r\nmax_allowed_packet = 4M\r\n# 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。\r\n# 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。\r\nbinlog_cache_size = 1M\r\n# 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K\r\nmax_heap_table_size = 8M\r\n# 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变\r\ntmp_table_size = 16M\r\n# MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。\r\n# 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。\r\n# 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果\r\nread_buffer_size = 2M\r\n# MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。\r\n# 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能\r\nread_rnd_buffer_size = 8M\r\n# MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，\r\n# MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大\r\nsort_buffer_size = 8M\r\n# MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。\r\n# 如果不能，可以尝试增加sort_buffer_size变量的大小\r\njoin_buffer_size = 8M\r\n# 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享\r\nthread_cache_size = 8\r\n# 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，\r\n# 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，\r\n# 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)\r\n# 根据物理内存设置规则如下：\r\n# 1G  —&gt; 8\r\n# 2G  —&gt; 16\r\n# 3G  —&gt; 32\r\n# 大于3G  —&gt; 64\r\nquery_cache_size = 8M\r\n#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，\r\n# 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。\r\n# 通过检查状态值\'Qcache_%\'，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，\r\n# 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，\r\n# 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲\r\nquery_cache_limit = 2M\r\n#指定单个查询能够使用的缓冲区大小，默认1M\r\nkey_buffer_size = 4M\r\n#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，\r\n# 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，\r\n# 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，\r\n# 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE \'key_read%\'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低\r\nft_min_word_len = 4\r\n# 分词词汇最小长度，默认4\r\ntransaction_isolation = REPEATABLE-READ\r\n# MySQL支持4种事务隔离级别，他们分别是：\r\n# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.\r\n# 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED\r\nlog_bin = mysql-bin\r\nbinlog_format = mixed\r\nexpire_logs_days = 30 #超过30天的binlog删除\r\nlog_error = /data/mysql/mysql-error.log #错误日志路径\r\nslow_query_log = 1\r\nlong_query_time = 1 #慢查询时间 超过1秒则为慢查询\r\nslow_query_log_file = /data/mysql/mysql-slow.log\r\nperformance_schema = 0\r\nexplicit_defaults_for_timestamp\r\n#lower_case_table_names = 1 #不区分大小写\r\nskip-external-locking #MySQL选项以避免外部锁定。该选项默认开启\r\ndefault-storage-engine = InnoDB #默认存储引擎\r\ninnodb_file_per_table = 1\r\n# InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间\r\n# 独立表空间优点：\r\n# 1．每个表都有自已独立的表空间。\r\n# 2．每个表的数据和索引都会存在自已的表空间中。\r\n# 3．可以实现单表在不同的数据库中移动。\r\n# 4．空间可以回收（除drop table操作处，表空不能自已回收）\r\n# 缺点：\r\n# 单表增加过大，如超过100G\r\n# 结论：\r\n# 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files\r\ninnodb_open_files = 500\r\n# 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300\r\ninnodb_buffer_pool_size = 64M\r\n# InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.\r\n# 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.\r\n# 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%\r\n# 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.\r\n# 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,\r\n# 所以不要设置的太高.\r\ninnodb_write_io_threads = 4\r\ninnodb_read_io_threads = 4\r\n# innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4\r\n# 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64\r\ninnodb_thread_concurrency = 0\r\n# 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量\r\ninnodb_purge_threads = 1\r\n# InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。\r\n# 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单\r\n# 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1\r\ninnodb_flush_log_at_trx_commit = 2\r\n# 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。\r\n# 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1\r\n# 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。\r\n# 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。\r\n# 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘\r\n# 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。\r\n# 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。\r\n# 总结\r\n# 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能\r\ninnodb_log_buffer_size = 2M\r\n# 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间\r\ninnodb_log_file_size = 32M\r\n# 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间\r\ninnodb_log_files_in_group = 3\r\n# 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3\r\ninnodb_max_dirty_pages_pct = 90\r\n# innodb主线程刷新缓存池中的数据，使脏数据比例小于90%\r\ninnodb_lock_wait_timeout = 120 \r\n# InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒\r\nbulk_insert_buffer_size = 8M\r\n# 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。\r\nmyisam_sort_buffer_size = 8M\r\n# MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区\r\nmyisam_max_sort_file_size = 10G\r\n# 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出\r\nmyisam_repair_threads = 1\r\n# 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内) \r\ninteractive_timeout = 28800\r\n# 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）\r\nwait_timeout = 28800\r\n# 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，\r\n# 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）\r\n# MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，\r\n# 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，\r\n# 最终肯定会达到MySQL Server的连接上限数，这会报\'too many connections\'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。\r\n# 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，\r\n# 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。\r\n[mysqldump]\r\nquick\r\nmax_allowed_packet = 16M #服务器发送和接受的最大包长度\r\n[myisamchk]\r\nkey_buffer_size = 8M\r\nsort_buffer_size = 8M\r\nread_buffer = 4M\r\nwrite_buffer = 4M</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 06:24:22.451076', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('daaf797e5ec74a42a4c0a3f951f3ef9c', 'IDEA常用快捷键', '<p>001. 代码提示:Ctrl+/ &nbsp;默认为Ctrl+Space</p>\r\n\r\n<p>002. 移动到有错误的代码:F2</p>\r\n\r\n<p>003. 快速修复代码:Alt+Enter</p>\r\n\r\n<p>004. 重构菜单:Ctrl+Shift+Alt+T</p>\r\n\r\n<p>005. 生成for循环,System.out,main方法等模板:fori/sout/psvm+Tab</p>\r\n\r\n<p>006. 新建类、方法等任何文件,生成构造器,toString,getter/setter,重写父类方法等:Alt+Insert</p>\r\n\r\n<p>007. 移动到最近代码前/后:Ctrl+Left/Right</p>\r\n\r\n<p>008. 选中跳跃范围内的代码:Ctrl+Shift+Left/Right</p>\r\n\r\n<p>009. 复制某行:Ctrl+d(复制并粘贴该行) 然后Ctrl+x(剪切该行)</p>\r\n\r\n<p>010. 展开/折叠所有代码:Ctrl+Shift+(+/-), 不按Shift即展开/折叠某个方法</p>\r\n\r\n<p>011. 定义0-9标签:Ctrl+Shift+Num(再次按这组快捷键则是删除书签),然后通过Ctrl+Num跳转</p>\r\n\r\n<p>012. 搜索任何类,文件,变量,方法,等等(但不能搜索文本): Shift + Shift</p>\r\n\r\n<p>013. 当前窗口中搜索文本:Ctrl+F</p>\r\n\r\n<p>014. 查看当前类中所有方法(可包含继承自父类的):Ctrl+F12</p>\r\n\r\n<p>015. 打开类层次窗口:Ctrl+H</p>\r\n\r\n<p>016. 导包:F2(移动到有错误的代码)然后Alt+Enter(快速修复代码)</p>\r\n\r\n<p>017. 格式化代码:Ctrl+Alt+L</p>\r\n\r\n<p>018. 去掉没用的import:Ctrl+Alt+O</p>\r\n\r\n<p>019. 补全末尾的分号:Ctrl+Shift+Enter</p>\r\n\r\n<p>020. 切换窗口:Alt+Num,常用的有1-项目结构,3-搜索结果,4/5-运行/调试界面</p>\r\n\r\n<p>021. 切换标签页:Ctrl+Tab</p>\r\n\r\n<p>022. 关闭小窗口:Shift+Esc</p>\r\n\r\n<p>023. 运行/调试启动:Alt+Shift+F10/F9, 若不按Alt则直接运行当前下拉框选中的配置.&nbsp;</p>\r\n\r\n<p>024. 调试:F7/(Shift+ F8)/F8/F9/(Alt+F8)分别对应Step into,Step out,Step over,Continue,查看选中代码的值</p>\r\n\r\n<p>025. 热部署:Ctrl+F9 但是,修改类名,方法名,成员变量名的无法热部署</p>\r\n\r\n<p>026. 将项目中除.gitignore中忽略的所有文件添加到本地Git仓库汇中:Ctrl+Alt+A</p>\r\n\r\n<p>027. Ctrl/Alt + Shift + &uarr;/&darr;: 上下移动当前行代码(Ctrl可以移动代码块, Alt只移动一行或选中行代码)</p>\r\n\r\n<p>028. Ctrl + d: 复制当前行代码到下一行</p>\r\n\r\n<p>029. Ctrl + Shift: 注释选中代码</p>\r\n\r\n<p>030. 进入或跳出所调用的页面: Ctrl + Alt + 左右方向键</p>\r\n\r\n<p>031. 切换页面: Alt + 左右方向键</p>\r\n\r\n<p>032.&nbsp;关闭当前页面: Ctrl + F4</p>\r\n\r\n<p>033. 方法间切换: Alt + 上下方向键</p>\r\n\r\n<p>034.&nbsp;重命名文件, 方法, 属性等: Shift + F6</p>\r\n\r\n<p>035.&nbsp;提取当前选择为变量: Ctrl + Alt + V&nbsp; &nbsp;(V代表variable)</p>\r\n\r\n<p>036.&nbsp;提取当前选择为常量: Ctrl + Alt + C&nbsp; &nbsp;(C代表constant)</p>\r\n\r\n<p>037.&nbsp;提取当前选择为属性: Ctrl + Alt + F&nbsp; &nbsp;(F代表field)</p>\r\n\r\n<p>038.&nbsp;提取当前选择为方法: Ctrl + Alt + M&nbsp; &nbsp;(M代表method)</p>\r\n\r\n<p>039.&nbsp;提取当前选择为方法参数: Ctrl + Alt + P&nbsp; &nbsp;(P代表parameter)</p>\r\n\r\n<p>040.&nbsp;提取当前选择至if, try等结构中: Ctrl + Alt + T&nbsp; &nbsp;(T代表try)</p>\r\n\r\n<p>041. 在左侧Project选中的目录树查找文本: Ctrl + Shift + F</p>\r\n\r\n<p>042. 全项目查找Java文件: Ctrl + N</p>\r\n\r\n<p>043.&nbsp;全项目查找任何文件: Ctrl + Shift + N</p>\r\n\r\n<p>044. 在光标所在行创建书签: F11</p>\r\n\r\n<p>045. 查看所有书签: Shift + F11</p>\r\n\r\n<p>046. 查看当前类的所有成员变量和方法: Ctrl + F12</p>', '2019-03-22 09:26:38.674511', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('db6b319ea27a4a0f8882b046dad6c228', 'Apache ActiveMQ', '<p style=\"margin-left:0pt; margin-right:0pt\"><span style=\"font-size:22pt\"><span style=\"font-family:Arial\"><strong><strong><span style=\"font-size:22.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">1. 消息中间件</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:40px; margin-right:0pt\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(1) 消息中间件实现的功能</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; margin-right:0pt\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">1&gt; 发送和接收是异步的</span>, 发送者无需等待.</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; margin-right:0pt\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">2&gt; 发送者和接受者两者的生命周期解耦合</span>, 无需同时运行.</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; margin-right:0pt\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">3&gt; 可以一对多通信</span>, 一个发送者可以有多个接收者.</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(2) 消息的三个主要部分</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">1&gt; 消息头</span>(<span style=\"font-family:宋体\">必有</span><span style=\"font-family:Calibri\">)</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">2&gt; 消息属性</span>(<span style=\"font-family:宋体\">可选</span><span style=\"font-family:Calibri\">)</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">3&gt; 消息体</span>(<span style=\"font-family:宋体\">可选</span><span style=\"font-family:Calibri\">)</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(3) 消息的五种正文格式</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">1&gt; StreamMessage</span></span> <span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">Java<span style=\"font-family:宋体\">原始的数据流</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">2&gt; MapMessage</span></span> <span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">键值对</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">3&gt; TextMessage</span></span> <span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">字符串</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">4&gt; ObjectMessage </span></span> <span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">一个序列化的</span>Java<span style=\"font-family:宋体\">对象</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">5&gt; BytesMessage </span></span> <span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">字节数组</span></span></span></span></span></p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-size:22pt\"><span style=\"font-family:Arial\"><strong><strong><span style=\"font-size:22.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">2. 简介</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong>(1) Apache ActiveMQ<span style=\"font-family:宋体\">是</span><span style=\"font-family:Calibri\">Apache</span><span style=\"font-family:宋体\">软件基金会所研发的开源的消息中间件</span><span style=\"font-family:Calibri\">: </span><span style=\"font-family:宋体\">由于</span><span style=\"font-family:Calibri\">ActiveMQ</span><span style=\"font-family:宋体\">是一个纯</span><span style=\"font-family:Calibri\">Java</span><span style=\"font-family:宋体\">程序</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">因此只需要操作系统支持</span><span style=\"font-family:Calibri\">Java</span><span style=\"font-family:宋体\">虚拟机</span><span style=\"font-family:Calibri\">, ActiveMQ</span><span style=\"font-family:宋体\">便可执行</span><span style=\"font-family:Calibri\">. </span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(2) 它是一个完全支持</span>JMS1.1<span style=\"font-family:宋体\">和</span><span style=\"font-family:Calibri\">J2EE 1.4</span><span style=\"font-family:宋体\">规范的</span><span style=\"font-family:Calibri\">JMS Provider</span><span style=\"font-family:宋体\">实现</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">尽管</span><span style=\"font-family:Calibri\">JMS</span><span style=\"font-family:宋体\">规范出台已经是很久的事情了</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">但是</span><span style=\"font-family:Calibri\">JMS</span><span style=\"font-family:宋体\">在当今的</span><span style=\"font-family:Calibri\">J2EE</span><span style=\"font-family:宋体\">应用中间仍然扮演着特殊的地位</span><span style=\"font-family:Calibri\">. </span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-size:22pt\"><span style=\"font-family:Arial\"><strong><strong><span style=\"font-size:22.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">3. 启动</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(1) 环境</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">1&gt; 版本</span>: 5.15.5</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">2&gt; 操作系统</span>: Windows</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">3&gt; JDK: 1.8+</span></span></span></span></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(2) 下载地址</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><a href=\"http://activemq.apache.org/activemq-5155-release.html\">http://activemq.apache.org/activemq-5155-release.html</a></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(3) 目录说明</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">下载</span>apache-activemq-5.15.5-bin.zip<span style=\"font-family:宋体\">并解压后</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">目录结构如下</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Apache%20ActiveMQ/01.png\" style=\"height:393px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(4) 启动</span>ActiveMQ</strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">1&gt; 点击</span>apache-activemq-5.15.5\\bin\\win64<span style=\"font-family:宋体\">文件夹下的</span><span style=\"font-family:Calibri\">activemq.bat</span><span style=\"font-family:宋体\">命令启动</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">2&gt; 如果看到如下信息</span>, <span style=\"font-family:宋体\">则说明启动成功</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Apache%20ActiveMQ/02.png\" style=\"height:480px; width:800px\" /></p>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">3&gt; 如果看到如下异常信息</span>, <span style=\"font-family:宋体\">则说明端口号被占用</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\"><img alt=\"\" src=\"https://paulandcode.com/blogs/Apache%20ActiveMQ/03.png\" style=\"height:80px; width:800px\" /></span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">4&gt; 修改默认</span>TCP<span style=\"font-family:宋体\">端口可以打开</span><span style=\"font-family:Calibri\">apache-activemq-5.15.5\\conf</span><span style=\"font-family:宋体\">文件夹下的</span><span style=\"font-family:Calibri\">activemq.xml</span><span style=\"font-family:宋体\">文件</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">在第</span><span style=\"font-family:Calibri\">113</span><span style=\"font-family:宋体\">行</span><span style=\"font-family:Calibri\">:</span></span></span></span></span></p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;transportConnector name=\"openwire\" uri=\"tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600\"/&gt;</code></pre>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">5&gt; 修改默认</span>Web<span style=\"font-family:宋体\">服务端口号可以打开</span><span style=\"font-family:Calibri\">apache-activemq-5.15.5\\conf</span><span style=\"font-family:宋体\">文件夹下的</span><span style=\"font-family:Calibri\">jetty.xml</span><span style=\"font-family:宋体\">文件</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">在第</span><span style=\"font-family:Calibri\">110</span><span style=\"font-family:宋体\">行</span><span style=\"font-family:Calibri\">: </span></span></span></span></span></p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;property name=\"port\" value=\"8161\"/&gt;</code></pre>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">6&gt; 访问</span>http://127.0.0.1:8161/admin<span style=\"font-family:宋体\">进入后台控制</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">此时需要输账号和密码</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">默认为</span><span style=\"font-family:Calibri\">admin/admin, </span><span style=\"font-family:宋体\">如需修改</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">可以修改</span><span style=\"font-family:Calibri\">apache-activemq-5.15.5\\conf</span><span style=\"font-family:宋体\">目录下的</span><span style=\"font-family:Calibri\">jetty-realm.properties</span><span style=\"font-family:宋体\">文件</span></span></span></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">7&gt; 导航栏说明</span></span></span></span></span></p>\r\n\r\n<ul style=\"margin-left:80px\">\r\n	<li style=\"text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">Queues: <span style=\"font-family:宋体\">队列式消息</span><span style=\"font-family:Calibri\">(</span><span style=\"font-family:宋体\">点对点</span><span style=\"font-family:Calibri\">)</span></span></span></span></span></li>\r\n	<li style=\"text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">Topics: <span style=\"font-family:宋体\">主题式消息</span><span style=\"font-family:Calibri\">(</span><span style=\"font-family:宋体\">发布</span><span style=\"font-family:Calibri\">/</span><span style=\"font-family:宋体\">订阅</span><span style=\"font-family:Calibri\">)</span></span></span></span></span></li>\r\n	<li style=\"text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">Subscribers: <span style=\"font-family:宋体\">消息订阅监控查询</span></span></span></span></span></li>\r\n	<li style=\"text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">Connections: <span style=\"font-family:宋体\">链接数</span><span style=\"font-family:Calibri\">, </span><span style=\"font-family:宋体\">可查看</span><span style=\"font-family:Calibri\">xmpp, ssl, stomp, openwire, ws</span><span style=\"font-family:宋体\">和网络链接</span></span></span></span></span></li>\r\n	<li style=\"text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">network: <span style=\"font-family:宋体\">网络链接数监控</span></span></span></span></span></li>\r\n	<li style=\"text-align:left\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\">send: <span style=\"font-family:宋体\">可以发送消息数据</span></span></span></span></span></li>\r\n</ul>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-size:22pt\"><span style=\"font-family:Arial\"><strong><strong><span style=\"font-size:22.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">4. 代码</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:40px; text-align:justify\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(1) 队列式消息(点对点)</span></strong></span></span></strong></strong></span></span></p>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">1&gt; 发送消息</span></span></span></span></span></p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package test;\r\n\r\nimport javax.jms.Connection;\r\nimport javax.jms.ConnectionFactory;\r\nimport javax.jms.DeliveryMode;\r\nimport javax.jms.Destination;\r\nimport javax.jms.MessageProducer;\r\nimport javax.jms.Session;\r\nimport javax.jms.TextMessage;\r\n\r\nimport org.apache.activemq.ActiveMQConnectionFactory;\r\n\r\npublic class Sender {\r\n\r\n	public static void main(String[] args) {\r\n		try {\r\n			// 第一步：建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端口为\"tcp://localhost:61616\"\r\n			ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_USER,\r\n					ActiveMQConnectionFactory.DEFAULT_PASSWORD, \"tcp://127.0.0.1:61616\");\r\n\r\n			// 第二步：通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。\r\n			Connection connection = connectionFactory.createConnection();\r\n			connection.start();\r\n\r\n			// 第三步：通过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。\r\n			Session session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);\r\n\r\n			// 第四步：通过Session创建Destination对象，指的是一个客户端用来指定生产消息目标和消费消息来源的对象，在PTP模式中，Destination被称作Queue即队列. \r\n			// 在Pub/Sub模式，Destination被称作Topic即主题。在程序中可以使用多个Queue和Topic。\r\n			Destination destination = session.createQueue(\"first\");\r\n\r\n			// 第五步：我们需要通过Session对象创建消息的发送和接收对象（生产者和消费者）MessageProducer/MessageConsumer。\r\n			MessageProducer producer = session.createProducer(null);\r\n\r\n			// 第六步：我们可以使用MessageProducer的setDeliveryMode方法为其设置持久化特性和非持久化特性（DeliveryMode）。\r\n			producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\r\n\r\n			// 第七步：最后我们使用JMS规范的TextMessage形式创建数据（通过Session对象），并用MessageProducer的send方法发送数据。\r\n			// 同理客户端使用receive方法进行接收数据。最后不要忘记关闭Connection连接。\r\n\r\n			for (int i = 0; i &lt; 10; i++) {\r\n				TextMessage msg = session.createTextMessage(\"我是消息内容\" + i);\r\n				// 第一个参数目标地址\r\n				// 第二个参数 具体的数据信息\r\n				// 第三个参数 传送数据的模式\r\n				// 第四个参数 优先级\r\n				// 第五个参数 消息的过期时间\r\n				producer.send(destination, msg, DeliveryMode.NON_PERSISTENT, 0, 1000L);\r\n				System.out.println(\"发送消息：\" + msg.getText());\r\n				Thread.sleep(1000);\r\n			}\r\n\r\n			if (connection != null) {\r\n				connection.close();\r\n			}\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n		}\r\n	}\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:80px; text-align:justify\"><span style=\"font-size:14pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:14.0000pt\"><span style=\"font-family:宋体\"><span style=\"font-family:宋体\">2&gt; 接收消息</span></span></span></span></span></p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package test;\r\n\r\nimport javax.jms.Connection;\r\nimport javax.jms.ConnectionFactory;\r\nimport javax.jms.Destination;\r\nimport javax.jms.MessageConsumer;\r\nimport javax.jms.Session;\r\nimport javax.jms.TextMessage;\r\n\r\nimport org.apache.activemq.ActiveMQConnectionFactory;\r\n\r\npublic class Receiver {\r\n\r\n	public static void main(String[] args) {\r\n		try {\r\n			// 第一步：建立ConnectionFactory工厂对象，需要填入用户名、密码、以及要连接的地址，均使用默认即可，默认端口为\"tcp://localhost:61616\"\r\n			ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ActiveMQConnectionFactory.DEFAULT_USER,\r\n					ActiveMQConnectionFactory.DEFAULT_PASSWORD, \"tcp://localhost:61616\");\r\n\r\n			// 第二步：通过ConnectionFactory工厂对象我们创建一个Connection连接，并且调用Connection的start方法开启连接，Connection默认是关闭的。\r\n			Connection connection = connectionFactory.createConnection();\r\n			connection.start();\r\n\r\n			// 第三步：通过Connection对象创建Session会话（上下文环境对象），用于接收消息，参数配置1为是否启用是事务，参数配置2为签收模式，一般我们设置自动签收。\r\n			Session session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);\r\n\r\n			// 第四步：通过Session创建Destination对象，指的是一个客户端用来指定生产消息目标和消费消息来源的对象，\r\n			// 在PTP模式中，Destination被称作Queue即队列；在Pub/Sub模式，Destination被称作Topic即主题。在程序中可以使用多个Queue和Topic。\r\n			Destination destination = session.createQueue(\"first\");\r\n			// 第五步：通过Session创建MessageConsumer\r\n			MessageConsumer consumer = session.createConsumer(destination);\r\n\r\n			while (true) {\r\n				TextMessage msg = (TextMessage) consumer.receive();\r\n				if (msg == null)\r\n					break;\r\n				System.out.println(\"收到的内容：\" + msg.getText());\r\n			}\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n		}\r\n	}\r\n}</code></pre>\r\n\r\n<p style=\"margin-left:40px\"><span style=\"font-size:16pt\"><span style=\"font-family:Calibri\"><strong><strong><span style=\"font-size:16.0000pt\"><span style=\"font-family:宋体\"><strong><span style=\"font-family:宋体\">(2) 主题式消息(发布/订阅)</span></strong></span></span></strong></strong></span></span></p>', '2018-08-28 23:40:43.154135', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('dbd7527971444477bc0fe7ef277e1dd6', 'Ant配置环境变量', '<p>1. ANT_HOME &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;C:/apache-ant-1.8.1</p>\r\n\r\n<p>2. path &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; %ANT_HOME%/bin</p>\r\n\r\n<p>3. classpath &nbsp; &nbsp; &nbsp;%ANT_HOME%/lib</p>\r\n\r\n<p>4.&nbsp;版本验证:&nbsp;&nbsp; &nbsp;ant -version</p>', '2018-09-02 22:20:34.768694', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('def79b38f40d4d4c87f7c80947e37f8c', 'Tomcat启动报错: Unsupported major.minor version 52.0', '<p>1. 错误原因</p>\r\n\r\n<p style=\"margin-left:40px\">不支持JDK1.8, 在编译时使用的时JDK1.8, 而运行时使用的JDK版本低于1.8</p>\r\n\r\n<p>2. 解决方案</p>\r\n\r\n<p style=\"margin-left:40px\">指定Tomcat运行时JDK版本(若不指定, 会使用默认版本)</p>\r\n\r\n<p style=\"margin-left:40px\">在Tomcat安装目录下的bin目录找到setclasspath.bat这个文件, 编辑文件, 在第一行加入如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-basic\">set JAVA_HOME=D:\\Program Files\\Java\\jdk8\\jdk1.8.0_51\r\nset JRE_HOME=D:\\Program Files\\Java\\jdk8\\jre8</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-11-20 08:47:45.169761', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('e3385c6b8a1c4e9bb2c7cbaf23a7218b', '虚拟机上的Tomcat无法被主机访问的问题', '<p>防火墙原因<br />\r\n允许访问8080端口:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent\r\nsudo firewall-cmd --reload</code></pre>\r\n\r\n<p>如果不使用&ldquo;--permanent&rdquo;标记, 把么防火墙规则在重启后会失效.&nbsp;</p>', '2018-07-19 03:24:17.597903', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('e3401dc7f3434c6080ad39cc9b6fc88c', 'Linux重启后Tomcat自动启动', '<p>只需更改一个文件后重启即可</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">vim /etc/rc.local</code></pre>\r\n\r\n<p>在文件结尾加入如下代码</p>\r\n\r\n<pre>\r\n<code class=\"language-apacheconf\">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\r\nexport PATH=$JAVA_HOME/bin:$PATH\r\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\r\nexport CATALINA_HOME=/home/paul/apache-tomcat-9.0.0.M26\r\n# tomcat自启动\r\n/home/paul/apache-tomcat-9.0.0.M26/bin/startup.sh</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-19 03:21:02.699849', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('e3bb274a988a427ca981b1438afa789b', '根据附件名获得附件类型', '<p>1. Maven导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n  &lt;groupId&gt;commons-io&lt;/groupId&gt;\r\n  &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\r\n  &lt;version&gt;2.6&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>&nbsp;2. 工具类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import org.apache.commons.io.FilenameUtils;\r\n\r\n/**\r\n * 附件类型工具类\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 上午10:57:28\r\n */\r\npublic class FileTypeUtils {\r\n	/**\r\n	 * 根据附件名获得附件类型\r\n	 * \r\n	 * @param fileName\r\n	 * @return\r\n	 */\r\n	public static String getFileType(String fileName) {\r\n		if (fileName != null &amp;&amp; !\"\".equals(fileName)) {\r\n			String extension = FilenameUtils.getExtension(fileName);\r\n			if (\"jng\".equalsIgnoreCase(extension) || \"jpg\".equalsIgnoreCase(extension)\r\n					|| \"png\".equalsIgnoreCase(extension) || \"gif\".equalsIgnoreCase(extension)\r\n					|| \"jpeg\".equalsIgnoreCase(extension) || \"bmp\".equalsIgnoreCase(extension)) {\r\n				return \"IMG\";\r\n			} else if (\"txt\".equalsIgnoreCase(extension)) {\r\n				return \"TXT\";\r\n			} else if (\"doc\".equalsIgnoreCase(extension) || \"docx\".equalsIgnoreCase(extension)) {\r\n				return \"DOC\";\r\n			} else if (\"pdf\".equalsIgnoreCase(extension)) {\r\n				return \"PDF\";\r\n			} else if (\"xls\".equalsIgnoreCase(extension) || \"xlsx\".equalsIgnoreCase(extension)) {\r\n				return \"XLS\";\r\n			} else if (\"ppt\".equalsIgnoreCase(extension) || \"pptx\".equalsIgnoreCase(extension)) {\r\n				return \"PPT\";\r\n			} else if (\"zip\".equalsIgnoreCase(extension)) {\r\n				return \"ZIP\";\r\n			} else if (\"mp3\".equalsIgnoreCase(extension)) {\r\n				return \"MP3\";\r\n			} else if (\"mp4\".equalsIgnoreCase(extension) || \"flv\".equalsIgnoreCase(extension)\r\n					|| \"avi\".equalsIgnoreCase(extension)) {\r\n				return \"AVI\";\r\n			} else if (\"HTML\".equalsIgnoreCase(extension)) {\r\n				return \"HTM\";\r\n			} else if (\"VSD\".equalsIgnoreCase(extension)) {\r\n				return \"VSD\";\r\n			} else {\r\n				return \"OTHER\";\r\n			}\r\n		}\r\n		return \"\";\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 03:04:33.223360', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('e79c1c0226cd4d789fb9bf77a24e2e4f', '判断设备类型(PC, 手机等), 浏览器类型(IE, Google等)', '<p>1. Maven导包如下</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n  &lt;groupId&gt;eu.bitwalker&lt;/groupId&gt;\r\n  &lt;artifactId&gt;UserAgentUtils&lt;/artifactId&gt;\r\n  &lt;version&gt;1.21&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>2.工具类如下</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import javax.servlet.http.HttpServletRequest;\r\n\r\nimport eu.bitwalker.useragentutils.Browser;\r\nimport eu.bitwalker.useragentutils.DeviceType;\r\nimport eu.bitwalker.useragentutils.UserAgent;\r\n\r\n/**\r\n * 用户代理字符串识别工具\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年5月18日 下午13:27:13\r\n */\r\npublic class UserAgentUtils {\r\n	/**\r\n	 * 获取用户代理对象\r\n	 * \r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static UserAgent getUserAgent(HttpServletRequest request) {\r\n		return UserAgent.parseUserAgentString(request.getHeader(\"User-Agent\"));\r\n	}\r\n\r\n	/**\r\n	 * 获取设备类型\r\n	 * \r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static DeviceType getDeviceType(HttpServletRequest request) {\r\n		return getUserAgent(request).getOperatingSystem().getDeviceType();\r\n	}\r\n\r\n	/**\r\n	 * 是否是PC\r\n	 * \r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static boolean isComputer(HttpServletRequest request) {\r\n		return DeviceType.COMPUTER.equals(getDeviceType(request));\r\n	}\r\n\r\n	/**\r\n	 * 是否是手机\r\n	 * \r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static boolean isMobile(HttpServletRequest request) {\r\n		return DeviceType.MOBILE.equals(getDeviceType(request));\r\n	}\r\n\r\n	/**\r\n	 * 是否是平板\r\n	 * \r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static boolean isTablet(HttpServletRequest request) {\r\n		return DeviceType.TABLET.equals(getDeviceType(request));\r\n	}\r\n\r\n    /**\r\n	 * 是否是手机和平板\r\n     *\r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static boolean isMobileOrTablet(HttpServletRequest request){\r\n		DeviceType deviceType = getDeviceType(request);\r\n		return DeviceType.MOBILE.equals(deviceType) || DeviceType.TABLET.equals(deviceType);\r\n	}\r\n\r\n	/**\r\n	 * 获取浏览类型\r\n	 * \r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static Browser getBrowser(HttpServletRequest request) {\r\n		return getUserAgent(request).getBrowser();\r\n	}\r\n\r\n	/**\r\n	 * 是否是IE版本且小于等于IE8\r\n	 * \r\n	 * @param request\r\n	 * @return\r\n	 */\r\n	public static boolean isLteIE8(HttpServletRequest request) {\r\n		Browser browser = getBrowser(request);\r\n		return Browser.IE5.equals(browser) || Browser.IE6.equals(browser) || Browser.IE7.equals(browser)\r\n				|| Browser.IE8.equals(browser);\r\n	}\r\n}</code></pre>\r\n\r\n<p>3. 进行拦截并根据需要进行处理</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">import javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.springframework.web.servlet.HandlerInterceptor;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport com.paulandcode.utils.UserAgentUtils;\r\n\r\n/**\r\n * 根据需要进行拦截, 并做不同处理\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年5月18日 下午13:27:13\r\n */\r\npublic class MobileInterceptor implements HandlerInterceptor {\r\n	@Override\r\n	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\r\n			throws Exception {\r\n		return true;\r\n	}\r\n\r\n	@Override\r\n	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\r\n			ModelAndView modelAndView) throws Exception {\r\n		if (modelAndView != null) {\r\n			// 如果是手机或平板访问的话，则跳转到手机视图页面。\r\n			if (UserAgentUtils.isMobileOrTablet(request)\r\n					&amp;&amp; !StringUtils.startsWithIgnoreCase(modelAndView.getViewName(), \"redirect:\")) {\r\n				modelAndView.setViewName(\"mobile/\" + modelAndView.getViewName());\r\n			}\r\n		}\r\n	}\r\n\r\n	@Override\r\n	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)\r\n			throws Exception {\r\n	}\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 02:07:15.280400', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('e88dc9b4952f47e8824fe43b4eb2fddc', 'Maven将多项目合并成一个war包', '<p>1. 背景</p>\r\n\r\n<p>&nbsp; &nbsp; 在一个大项目中, 可能会有多个小项目, 这些项目可能有公共的JS, CSS, JSP, HTML等前端文件, 可能有公共的配置文件, 也可能有公共的Java后端文件.&nbsp;如果每个项目都包含这些公共代码, 整个项目会显得很臃肿, 所以考虑能否将公共的文件只写一份.&nbsp;恰巧, Maven可以解决这个问题.&nbsp;</p>\r\n\r\n<p>2. 项目结构</p>\r\n\r\n<p>&nbsp; &nbsp; 01. 整个项目结构如下: (test项目为父项目, 其他项目为子项目)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" src=\"https://paulandcode.com/blogs/Maven%E5%B0%86%E5%A4%9A%E9%A1%B9%E7%9B%AE%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AAwar%E5%8C%85/01.png\" style=\"height:149px; width:211px\" /></p>\r\n\r\n<p>&nbsp; &nbsp; 03. test_base项目结构如下: (test_base项目存放共有文件, com.paulandcode.test包下有TestCase类, WEB-INF下有test.html文件, test_base目录下有pom.xml)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" src=\"https://paulandcode.com/blogs/Maven%E5%B0%86%E5%A4%9A%E9%A1%B9%E7%9B%AE%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AAwar%E5%8C%85/02.png\" style=\"height:562px; width:548px\" /></p>\r\n\r\n<p>&nbsp; &nbsp; 04. test_one项目结构如下:&nbsp;(test_one项目存放项目1特有的文件. com.paulandcode.test包下有TestCase类, WEB-INF下有test1.html文件, test_one目录下有pom.xml)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" src=\"https://paulandcode.com/blogs/Maven%E5%B0%86%E5%A4%9A%E9%A1%B9%E7%9B%AE%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AAwar%E5%8C%85/03.png\" style=\"height:561px; width:469px\" /></p>\r\n\r\n<p>&nbsp; &nbsp; 05. test_two项目结构如下:&nbsp;(test_two项目存放项目2特有的文件. com.paulandcode.test包下没有TestCase类, WEB-INF下没有test.html文件, test_two目录下有pom.xml)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" src=\"https://paulandcode.com/blogs/Maven%E5%B0%86%E5%A4%9A%E9%A1%B9%E7%9B%AE%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AAwar%E5%8C%85/04.png\" style=\"height:516px; width:477px\" /></p>\r\n\r\n<p>3. pom文件</p>\r\n\r\n<p>&nbsp; &nbsp; 01. test文件夹下的pom文件如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n		 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n		 xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n		 	http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\r\n\r\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\r\n  &lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n  &lt;artifactId&gt;test&lt;/artifactId&gt;\r\n  &lt;version&gt;1.0&lt;/version&gt;\r\n  &lt;!-- 打包方式为: pom --&gt;\r\n  &lt;packaging&gt;pom&lt;/packaging&gt;\r\n  \r\n  &lt;!-- 声明父项目下的三个子项目 --&gt;\r\n  &lt;modules&gt;\r\n    &lt;module&gt;test_base&lt;/module&gt;\r\n    &lt;module&gt;test_one&lt;/module&gt;\r\n    &lt;module&gt;test_two&lt;/module&gt;\r\n  &lt;/modules&gt;\r\n&lt;/project&gt;</code></pre>\r\n\r\n<p>&nbsp; &nbsp; 02. test_base文件夹下的pom文件如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n		 	http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\r\n\r\n	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\r\n	&lt;artifactId&gt;test_base&lt;/artifactId&gt;\r\n	&lt;!-- 打包方式为: war --&gt;\r\n	&lt;packaging&gt;war&lt;/packaging&gt;\r\n	&lt;description&gt;test_base&lt;/description&gt;\r\n	&lt;!-- 声明其父项目的pom文件 --&gt;\r\n	&lt;parent&gt;\r\n		&lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n		&lt;artifactId&gt;test&lt;/artifactId&gt;\r\n		&lt;version&gt;1.0&lt;/version&gt;\r\n		&lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;\r\n	&lt;/parent&gt;\r\n\r\n	&lt;!-- test_base项目的依赖包 --&gt;\r\n	&lt;dependencies&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\r\n			&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\r\n			&lt;version&gt;3.5&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n	&lt;/dependencies&gt;\r\n\r\n	&lt;build&gt;\r\n		&lt;plugins&gt;\r\n			&lt;!-- 该插件可以给test_base项目打jar包 --&gt;\r\n			&lt;plugin&gt;\r\n				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\r\n				&lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\r\n				&lt;version&gt;3.0.2&lt;/version&gt;\r\n				&lt;executions&gt;\r\n					&lt;execution&gt;\r\n						&lt;id&gt;make-a-jar&lt;/id&gt;\r\n						&lt;phase&gt;package&lt;/phase&gt;\r\n						&lt;goals&gt;\r\n							&lt;goal&gt;jar&lt;/goal&gt;\r\n						&lt;/goals&gt;\r\n						&lt;configuration&gt;\r\n							&lt;!-- 分类器, 使得打好的jar包名称为: oa_base-1.0-local.jar --&gt;\r\n							&lt;classifier&gt;local&lt;/classifier&gt;\r\n						&lt;/configuration&gt;\r\n					&lt;/execution&gt;\r\n				&lt;/executions&gt;\r\n			&lt;/plugin&gt;\r\n		&lt;/plugins&gt;\r\n	&lt;/build&gt;\r\n&lt;/project&gt;</code></pre>\r\n\r\n<p>&nbsp; &nbsp; 03. test_one文件夹下的pom文件如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n		 	http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\r\n\r\n	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\r\n	&lt;artifactId&gt;test_one&lt;/artifactId&gt;\r\n	&lt;!-- 打包方式为: war --&gt;\r\n	&lt;packaging&gt;war&lt;/packaging&gt;\r\n	&lt;description&gt;test_one&lt;/description&gt;\r\n	&lt;!-- 声明其父项目的pom文件 --&gt;\r\n	&lt;parent&gt;\r\n		&lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n		&lt;artifactId&gt;test&lt;/artifactId&gt;\r\n		&lt;version&gt;1.0&lt;/version&gt;\r\n		&lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;\r\n	&lt;/parent&gt;\r\n\r\n	&lt;dependencies&gt;\r\n		&lt;!-- 整合test_base的war包, 整合后会在test_one项目中加入test_base项目中的JS, CSS, JSP, HTML, 配置文件等非.class文件. --&gt;\r\n		&lt;!-- 若有同目录同名文件, 以test_one项目中的为准. --&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n			&lt;artifactId&gt;test_base&lt;/artifactId&gt;\r\n			&lt;version&gt;1.0&lt;/version&gt;\r\n			&lt;type&gt;war&lt;/type&gt;\r\n		&lt;/dependency&gt;\r\n\r\n		&lt;!-- 整合test_base的jar包, 整合后会在test_one项目中加入test_base项目中的.class文件, test_base项目中的依赖包也会加入. --&gt;\r\n		&lt;!-- 若有同目录同名文件, 以test_one项目中的为准. --&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n			&lt;artifactId&gt;test_base&lt;/artifactId&gt;\r\n			&lt;version&gt;1.0&lt;/version&gt;\r\n			&lt;classifier&gt;local&lt;/classifier&gt;\r\n		&lt;/dependency&gt;\r\n	&lt;/dependencies&gt;\r\n&lt;/project&gt;</code></pre>\r\n\r\n<p>&nbsp; &nbsp; 04. test_two文件夹下的pom文件如下:&nbsp;</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n		 	http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\r\n\r\n	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\r\n	&lt;artifactId&gt;test_two&lt;/artifactId&gt;\r\n	&lt;!-- 打包方式为: war --&gt;\r\n	&lt;packaging&gt;war&lt;/packaging&gt;\r\n	&lt;description&gt;test_two&lt;/description&gt;\r\n	&lt;!-- 声明其父项目的pom文件 --&gt;\r\n	&lt;parent&gt;\r\n		&lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n		&lt;artifactId&gt;test&lt;/artifactId&gt;\r\n		&lt;version&gt;1.0&lt;/version&gt;\r\n		&lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;\r\n	&lt;/parent&gt;\r\n\r\n	&lt;dependencies&gt;\r\n		&lt;!-- 整合test_base的war包, 整合后会在test_two项目中加入test_base项目中的JS, CSS, JSP, HTML, 配置文件等非.class文件. --&gt;\r\n		&lt;!-- 若有同目录同名文件, 以test_two项目中的为准. --&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n			&lt;artifactId&gt;test_base&lt;/artifactId&gt;\r\n			&lt;version&gt;1.0&lt;/version&gt;\r\n			&lt;type&gt;war&lt;/type&gt;\r\n		&lt;/dependency&gt;\r\n\r\n		&lt;!-- 整合test_base的jar包, 整合后会在test_two项目中加入test_base项目中的.class文件, test_base项目中的依赖包也会加入. --&gt;\r\n		&lt;!-- 若有同目录同名文件, 以test_two项目中的为准. --&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.paulandcode&lt;/groupId&gt;\r\n			&lt;artifactId&gt;test_base&lt;/artifactId&gt;\r\n			&lt;version&gt;1.0&lt;/version&gt;\r\n			&lt;classifier&gt;local&lt;/classifier&gt;\r\n		&lt;/dependency&gt;\r\n	&lt;/dependencies&gt;\r\n&lt;/project&gt;</code></pre>\r\n\r\n<p>4. 合并结果</p>\r\n\r\n<p>&nbsp; &nbsp; 01. test_one项目</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;com.paulandcode.test包下的TestCase类为test_one原有的TestCase类,&nbsp;WEB-INF下含有test.html和test1.html两个文件</p>\r\n\r\n<p>&nbsp; &nbsp; 02. test_two项目</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;com.paulandcode.test包下新增了test_base的TestCase类,&nbsp;WEB-INF下新增了test_base的test.html文件</p>\r\n\r\n<p>5. 总结</p>\r\n\r\n<p>&nbsp; &nbsp; 01.&nbsp;test_base文件夹下存放共有文件.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; 02.&nbsp;test_one和test_two文件夹下存放特有文件.&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; 03. 若有同路径同名文件,&nbsp;test_one和test_two下的文件会覆盖test_base下的文件.&nbsp;</p>', '2018-07-25 07:59:16.110769', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('ec838fa835b44f95ae3c819f166ce6c2', 'Linux零碎笔记', '<p>001.gui与tui：<br />\r\n&nbsp;&nbsp; &nbsp;gui，完全的图形界面。tui，终端下的图形界面。</p>\r\n\r\n<p>002.补全命令：<br />\r\n&nbsp;&nbsp; &nbsp;输入前缀，按一次Tab。若前缀不唯一，按2次Tab，出现相关命令列表。</p>\r\n\r\n<p>003.RHEL7.2实现上网功能：<br />\r\n&nbsp;&nbsp; &nbsp;1.固定的可用联网IP地址<br />\r\n&nbsp;&nbsp; &nbsp;2.关闭防火墙<br />\r\n&nbsp;&nbsp; &nbsp;3.关闭selinux<br />\r\n&nbsp;&nbsp; &nbsp;4.光盘自动挂载<br />\r\n&nbsp;&nbsp; &nbsp;5.配置好本地yum源</p>\r\n\r\n<p>004.linux系统安装分区（标准分区）：<br />\r\n&nbsp;&nbsp; &nbsp;1.boot分区：引导分区(启动系统用的)，grub(引导器)，内核文件 &nbsp; 200M<br />\r\n&nbsp;&nbsp; &nbsp;2.swap分区：内存扩展分区，一般最多8G或16G&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;1000M<br />\r\n&nbsp;&nbsp; &nbsp;3./ 根：所有文件的根&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;10G&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;4.sda：linux下的第一个磁盘<br />\r\n&nbsp;&nbsp; &nbsp;5.RHEL7使用xfs文件系统，RHEL6使用ext4文件系统，Win7/10使用NTFS文件系统</p>\r\n\r\n<p>005.手动配置以太网_IPv4设置：<br />\r\n&nbsp;&nbsp; &nbsp;1.ip地址：192.168.0.71（网段192.168一样，且是没用过的ip）<br />\r\n&nbsp;&nbsp; &nbsp;2.子网掩码：24<br />\r\n&nbsp;&nbsp; &nbsp;3.网关：192.168.0.1<br />\r\n&nbsp;&nbsp; &nbsp;4.DNS服务器：8.8.8.8（或114.114.114.114）</p>\r\n\r\n<p>006.ubuntu第一次切换到root用户失败:<br />\r\n&nbsp;&nbsp; &nbsp;1.为root设置一个root密码：$ sudo passwd root 之后会提示要输入root用户的密码，连续输入root密码<br />\r\n&nbsp;&nbsp; &nbsp;2.使用：$ su,并按照提示输入root密码，就可以在终端中切换成超级管理员用户身份了！&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;3.设置后,以后就可以直接root登录了</p>\r\n\r\n<p>007.ubuntu安装yum:<br />\r\n&nbsp;&nbsp; &nbsp;1.安装了build-essential: apt-get install build-essential<br />\r\n&nbsp;&nbsp; &nbsp;2.安装yum: apt-get install yum</p>\r\n\r\n<p>008.Xshell由于权限问题无法上传文件到linux:<br />\r\n&nbsp;&nbsp; &nbsp;给lunux的文件夹设置权限:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;例: 给/usr下的java文件夹添加上传权限<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;# cd /usr<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;# chmod 777 java/<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;添加权限后,在/usr目录下输入# ll<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;显示java/这一个文件夹drwxrwxrwx(之前为drwxr-xr-x),并且有绿色阴影<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;chmod -R 777 java/&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;-R表示包括子文件夹</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Ubuntu chmod 命令可以用来修改文件或文件夹的读写权限<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;chmod 命令有两种使用方式:</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;（1）chmod [ u / g / o / a ] [ + / - / = ] [ r / w / x ] file<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;其中 ：<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;u表示User，是文件的所有者<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;g表示跟User同Group的用户<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;o表示Other，即其他用户<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;a表示ALL，所有用户<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;+表示增加权限<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;-表示取消权限<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;=表示取消之前的权限，并给予唯一的权限<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;r表示Read，即读文件<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;w表示Write，即写文件<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;x表示运行文件<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;file表示文件的路径，如ubandy-rest/job/views.py<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;For example： chmod u+rw ubandy-rest/job/views.py<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2）chmod [xyz] file</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;其中，x，y，z分别表示数字（最大不超过7），并分别对应User、Group、Other<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;x，y，z的值由r（r=4），w ( w=2 )，x ( x=1 )来确定<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;For example：chmod 765 ubandy-rest/authentication/models.py &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;当然，你也可以使用通配符 &lsquo;*&rsquo;，来设置当前路径下的所有文件的权限<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;For example：<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;假如，当前你的路径下有文件：1.txt， 2.html， 3.py<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;使用命令：chmod 777 * &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;可以同时设置上述三个文件的权限为rwx<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;如果你要修改整个文件夹的权限，比如你有一个文件夹WhoJoy，<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;你想修改这个文件夹（包括内部的所有文件）的权限，那么<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;可以使用命令：chmod -R 777 WhoJoy/ &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;其中：-R表示以递归整个文件夹中的子文件</p>\r\n\r\n<p>009.ubuntu中apt命令是什么的缩写:the Advanced Packaging Tool</p>\r\n\r\n<p>010.Xshell命令行的锁定/解除:Ctrl + q</p>\r\n\r\n<p>011.Xshell无法连接到虚拟机,可能原因:&nbsp;&nbsp; &nbsp;1.防火墙未打开22端口<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2.未安装openssh-server<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;3.虚拟机无法联网</p>\r\n\r\n<p>012.ubuntu标准磁盘分区:21.5GB&nbsp;&nbsp; &nbsp;#1 &nbsp; primary &nbsp; /boot &nbsp; 2.0GB&nbsp;&nbsp; &nbsp;f &nbsp; &nbsp;ext4<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#2 &nbsp; primary &nbsp; swap &nbsp; &nbsp;2.5GB&nbsp;&nbsp; &nbsp;f &nbsp; &nbsp;swap<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#3 &nbsp; primary &nbsp; /home &nbsp; 7.0GB &nbsp; &nbsp;f &nbsp; &nbsp;ext4<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;#5 &nbsp; logical &nbsp; / &nbsp; &nbsp; &nbsp; 10.0GB&nbsp;&nbsp; &nbsp;f &nbsp; &nbsp;ext4</p>\r\n\r\n<p>013.ubuntu查看所有组和用户: cat /etc/group &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;sudo cat /etc/shadow</p>\r\n\r\n<p>014.查看ip网址:&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;https://ip.cn &nbsp; 或者&nbsp;&nbsp; &nbsp;https://ipinfo.io&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</p>\r\n\r\n<p>015.ubuntu下载ping和ifconfig命令:&nbsp;&nbsp; &nbsp;apt install iputils-ping&nbsp;&nbsp; &nbsp;apt install net-tools</p>\r\n\r\n<p>016.ubuntu16.04关闭/开启mysql开机启动: &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;#禁止启动<br />\r\n&nbsp;&nbsp; &nbsp;sudo systemctl disable mysql<br />\r\n&nbsp;&nbsp; &nbsp;#开机启动<br />\r\n&nbsp;&nbsp; &nbsp;sudo systemctl enable mysql</p>\r\n\r\n<p>017.查看一个目录下所有文件的数量(包括子目录下的文件,只算文件,不算目录): ls&nbsp;-lR|grep&nbsp;&quot;^-&quot;|wc&nbsp;-l</p>\r\n\r\n<p>018.ubuntu设置mysql不区分大小写:在/etc/mysql/mysql.conf.d/mysqld.cnf文件中加一行代码: lower_case_table_names=1</p>\r\n\r\n<p>019.关机: init 0</p>\r\n\r\n<p>020.虚拟机切换到主机: Ctrl + Alt</p>\r\n\r\n<p>021.清屏: Ctrl + l</p>\r\n\r\n<p>022.取消某一操作: Ctrl + c</p>\r\n\r\n<p>023.虚拟机BIOS设置: 开机按F2(或虚拟机_电源_打开电源进入固件)</p>\r\n\r\n<p>024.查看ip: ifconfig</p>\r\n\r\n<p>025.编辑文件: vim</p>\r\n\r\n<p>026.保存退出: :wq</p>\r\n\r\n<p>027.不保存退出: :q!</p>\r\n\r\n<p>028.撤销: Esc + u</p>\r\n\r\n<p>029.进入插入模式: i</p>\r\n\r\n<p>030.复制粘贴: 插入模式下选中一段文本,按下鼠标滚轮</p>\r\n\r\n<p>031.重启: reboot(或者sudo shutdown -r now)</p>\r\n\r\n<p>032.查看当前登录用户: whoami</p>\r\n\r\n<p>033.切换用户: su - root(用户名)</p>\r\n\r\n<p>034.VMware进入全屏: Ctrl + Alt + Enter&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Xshell进入全屏: Alt + Enter</p>\r\n\r\n<p>035.创建新的文件: touch a.txt</p>\r\n\r\n<p>036.复制一个文件夹下所有文件(包括子文件夹)到另一个文件夹下:<br />\r\n&nbsp;&nbsp; &nbsp;cp -r /fangjian/tomcat8_new/webapps/ROOT/* /fangjian/bak/oa_20170905_test/ROOT</p>\r\n\r\n<p>037.删除一个文件夹下所有文件(包括子文件夹): rm -rf /fangjian/bak/oa_20170905_test/*(不加/*则删父文件夹)</p>\r\n\r\n<p>038.查看Linux是32位还是64位: sudo uname -m (i686表示是32位,x86_64表示是64位)</p>\r\n\r\n<p>039.解压压缩文件: tar -zxvf test.tar.gz</p>\r\n\r\n<p>040.创建文件夹: mkdir java</p>\r\n\r\n<p>041.为过长的目录建立一个链接: ln -s /usr/java/jdk1.8.0_60/ /usr/jdk</p>\r\n\r\n<p>042.查看某进程名的PID: ps -ef | grep java</p>\r\n\r\n<p>043.根据端口号查看该端口号被谁占用: lsof -i:8080(若命令用不了,则需yum -y install lsof)<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;或者: netstat -apn | grep 8080<br />\r\n044.根据进程PID查看该进程占用的端口号:&nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;netstat -nap | grep 2703(若命令用不了,则需yum -y install net-tools)</p>\r\n\r\n<p>045.根据进程PID杀掉该进程:kill -9 2703</p>\r\n\r\n<p>046.纯文本形式访问网址: elinks -dump http://www.baidu.com(若命令用不了,则需yum -y install elinks)</p>\r\n\r\n<p>047.RHEL7查看已启动的服务列表：systemctl list-unit-files|grep enabled</p>\r\n\r\n<p>048.关闭虚拟机: shutdown -h now</p>\r\n\r\n<p>049.Xshell锁屏: Ctrl+s &nbsp;解锁: Ctrl+q</p>\r\n\r\n<p>050.登录mysql: mysql -h localhost -u root -proot</p>\r\n\r\n<p>051.查看jdk安装路径: which java &nbsp;或者: echo $JAVA_HOME</p>\r\n\r\n<p>052.查看tomcat版本: 进入tomcat的bin下执行sh version.sh</p>\r\n\r\n<p>053.zip压缩文件: zip &nbsp;-r fileName.zip &nbsp;文件夹名 &nbsp; &nbsp; 解压缩: unzip fileName.zip</p>\r\n\r\n<p>054.查看ubuntu版本:sudo lsb_release -a</p>\r\n\r\n<p>055.复制一个文件夹下所有文件(包括子文件夹的所有文件但不复制目录,不考虑文件重名)到另一个文件夹下:<br />\r\nfind /home/dailin/ -type f -exec cp {} /home/c1 \\;</p>\r\n\r\n<p>056.查看当前java安装路径:echo $JAVA_HOME</p>\r\n\r\n<p>057.显示所有ufw应用的配置：sudo ufw app list</p>\r\n\r\n<p>058.vim快捷键<br />\r\n&nbsp;&nbsp; &nbsp;01.光标跳转到页面第一行: gg<br />\r\n&nbsp;&nbsp; &nbsp;02.光标跳转到页面最后一行: Shift + g<br />\r\n&nbsp;&nbsp; &nbsp;03.删除光标所在行: dd<br />\r\n&nbsp;&nbsp; &nbsp;04.删除光标所在的向下n行: ndd &nbsp; &nbsp;n表示数字&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;05.清空文本:先执行:gg 再执行:d + (Shift + g)<br />\r\n&nbsp;&nbsp; &nbsp;06.复制光标所在的行: yy<br />\r\n&nbsp;&nbsp; &nbsp;07.复制光标所在的向下n行: nyy &nbsp; n表示数字<br />\r\n&nbsp;&nbsp; &nbsp;08.将已复制的数据粘贴在光标的下一行: 小p表示<br />\r\n&nbsp;&nbsp; &nbsp;09.将已复制的数据粘贴在光标的上一行: 大P<br />\r\n&nbsp;&nbsp; &nbsp;10.撤销上一步操作:&nbsp;&nbsp; &nbsp;u (相当于windws的Ctrl + z)<br />\r\n&nbsp;&nbsp; &nbsp;11.与u相反，回到后一步操作: ctrl+r (相当于windws的Ctrl + y)<br />\r\n&nbsp;&nbsp; &nbsp;12.重复前一个操作: . &nbsp; &nbsp; &nbsp; 点<br />\r\n&nbsp;&nbsp; &nbsp;13.跳转到某一指定行: &nbsp;&nbsp; &nbsp;:12 &nbsp;跳转到第12行<br />\r\n&nbsp;&nbsp; &nbsp;14.键入/后，光标进入VIM底部的命令行，这时就可以输入以/为开始的/搜索命令,按n搜索下一个,按N搜索上一个</p>\r\n\r\n<p>059. 查看文件占用空间大小: du -ah -d 0 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(-a代表所有文件)(-h代表加单位)<br />\r\n(-d 0代表:只深入到第n层目录,若无此属性,则包含所有子目录)</p>\r\n\r\n<p>060.ubuntu查看磁盘空间: df -h</p>\r\n\r\n<p>061.ubuntu永久修改主机名<br />\r\n&nbsp;&nbsp; &nbsp;1、查看主机名<br />\r\n&nbsp;&nbsp; &nbsp;在Ubuntu系统中，快速查看主机名有多种方法：<br />\r\n&nbsp;&nbsp; &nbsp;其一，打开一个GNOME终端窗口，在命令提示符中可以看到主机名，主机名通常位于&ldquo;@&rdquo;符号后；<br />\r\n&nbsp;&nbsp; &nbsp;其二，在终端窗口中输入命令：hostname或uname &ndash;n，均可以查看到当前主机的主机名。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;2、临时修改主机名<br />\r\n&nbsp;&nbsp; &nbsp;命令行下运行命令：&ldquo;hostname 新主机名&rdquo;<br />\r\n&nbsp;&nbsp; &nbsp;其中&ldquo;新主机名&rdquo;可以用任何合法字符串来表示。不过采用这种方式，新主机名并不保存在系统中，重启系统后主机名将恢复为原先的主机名称。<br />\r\n&nbsp;&nbsp; &nbsp;例子：hostname ubuntu-temp<br />\r\n&nbsp;&nbsp; &nbsp;这样主机名字就临时被修改为ubuntu-temp，但是终端下不会立即显示生效后的主机名，重开一个终端窗口(通过ssh连接的终端需要重新连接才可以);</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;3、永久修改主机名<br />\r\n&nbsp;&nbsp; &nbsp;在Ubuntu系统中永久修改主机名也比较简单。主机名存放在/etc/hostname文件中，修改主机名时，编辑hostname文件，在文件中输入新的主机名并保存该文件即可。<br />\r\n&nbsp;&nbsp; &nbsp;重启系统后，参照上面介绍的快速查看主机名的办法来确认主机名有没有修改成功。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;值得指出的是，在其它Linux发行版中，并非都存在/etc/hostname文件。<br />\r\n&nbsp;&nbsp; &nbsp;如Fedora发行版将主机名存放在/etc/sysconfig/network文件中。所以，修改主机名时应注意区分是哪种Linux发行版。</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;4、/etc/hostname与/etc/hosts的区别<br />\r\n&nbsp;&nbsp; &nbsp;/etc/hostname中存放的是主机名，hostname文件的一个例子：<br />\r\n&nbsp;&nbsp; &nbsp;paulandcode</p>\r\n\r\n<p>&nbsp;&nbsp; &nbsp;/etc/hosts存放的是域名与ip的对应关系，域名与主机名没有任何关系，你可以为任何一个IP指定任意一个或多个名字，hosts文件的一个例子：(IP地址 hostname aliases) aliases可选<br />\r\n&nbsp;&nbsp; &nbsp;127.0.0.1 &nbsp; &nbsp; &nbsp; localhost&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;paulandcode<br />\r\n&nbsp;&nbsp; &nbsp;127.0.1.1 &nbsp; &nbsp; &nbsp; v-jiwan-ubuntu</p>\r\n\r\n<p>062.linux的bash命令一般存放在/sbin, /bin, /usr/bin,这几个目录中</p>\r\n\r\n<p>063.ubuntu 显示相对路径:<br />\r\n&nbsp;&nbsp; &nbsp;打开 home/paul/.bashrc<br />\r\n&nbsp;&nbsp; &nbsp;找到(可能有多处)：<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;PS1=&#39;${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ &#39;<br />\r\n&nbsp;&nbsp; &nbsp;修改将小写w改为大写W保存<br />\r\n&nbsp;&nbsp; &nbsp;执行source home/paul/.bashrc</p>\r\n\r\n<p>064.Ubuntu的add-apt-repository: command not found<br />\r\n&nbsp;&nbsp; &nbsp;sudo apt-get install software-properties-common python-software-properties</p>\r\n\r\n<p>065.创建用户:<br />\r\n&nbsp;&nbsp; &nbsp;adduser paul &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;创建用户<br />\r\n&nbsp;&nbsp; &nbsp;passwd paul &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;给已创建的用户testuser设置密码<br />\r\n&nbsp;&nbsp; &nbsp;userdel paul &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;用户名删除用户<br />\r\n&nbsp;&nbsp; &nbsp;给paul用户增加所有权限:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;vim /etc/sudoers<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;在root &nbsp; &nbsp;ALL=(ALL:ALL) ALL这一行的下面增加如下代码:<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;paul &nbsp; &nbsp;ALL=(ALL:ALL) ALL</p>\r\n\r\n<p>066.给用户增加sudu权限:<br />\r\n&nbsp;&nbsp; &nbsp;1) 进入到root用户下。<br />\r\n&nbsp;&nbsp; &nbsp;2）添加文件的写权限。也就是输入命令&quot;chmod u+w /etc/sudoers&quot;。<br />\r\n&nbsp;&nbsp; &nbsp;3）编辑该文件,找到这一 行：&quot;root ALL=(ALL) ALL&quot;在起下面添加&quot;yourName ALL=(ALL) ALL&quot;<br />\r\n&nbsp;&nbsp; &nbsp;4）撤销文件的写权限。也就是输入命令&quot;chmod u-w /etc/sudoers&quot;</p>\r\n\r\n<p>067.删除除了某几个文件之外的所有文件,<br />\r\n&nbsp;&nbsp; &nbsp;例:删除A文件夹下除了a文件夹和b.txt文件的其他所有文件和文件夹<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;rm -rf A/!(a|b.txt)<br />\r\n&nbsp;&nbsp; &nbsp;不过一般bash中运行后会提示<br />\r\n&nbsp;&nbsp; &nbsp;&ldquo;-bash: !: event not found &rdquo; 可以通过运行shopt -s extgolb来解决。如下：<br />\r\n&nbsp;&nbsp; &nbsp;[root@localhost abc]# rm -f !(a)<br />\r\n&nbsp;&nbsp; &nbsp;-bash: !: event not found<br />\r\n&nbsp;&nbsp; &nbsp;[root@localhost abc]# shopt -s extglob<br />\r\n&nbsp;&nbsp; &nbsp;[root@localhost abc]# rm -f !(a)<br />\r\n&nbsp;&nbsp; &nbsp;[root@localhost abc]# ls<br />\r\n&nbsp;&nbsp; &nbsp;a</p>\r\n\r\n<p>068.linux脚本加入延时等待<br />\r\n&nbsp;&nbsp; &nbsp;默认以秒为单位,以后接时间的单位，可以以m表示分钟，h表示小时，d表示天数<br />\r\n&nbsp;&nbsp; &nbsp;sleep 5<br />\r\n&nbsp;&nbsp; &nbsp;sleep 0.005<br />\r\n&nbsp;&nbsp; &nbsp;sleep 3m</p>\r\n\r\n<p>069.awk -F &#39;:&#39; &#39;{print $1&quot;\\t&quot;$3}&#39;，以冒号为分隔符后把第1,3列,以\\t分隔输出<br />\r\n&nbsp;&nbsp; &nbsp;例: kill掉第一个java进程id<br />\r\n&nbsp;&nbsp; &nbsp;netstat -apn |grep java |awk &#39;{print $7}&#39; |xargs |awk -F &#39;/&#39; &#39;{print $1}&#39; |xargs kill -9</p>\r\n\r\n<p>070.查看文件夹的目录结构:<br />\r\n&nbsp;&nbsp; &nbsp;sudo tree /etc/nginx</p>', '2018-07-13 06:20:48.147478', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('eda6ab5458dd496abe54b2d44bd690c4', '某类型文件设置默认打开软件不成功(例: Sublime默认打开txt文件设置不成功)', '<p>1. CMD输入regedit打开注册表</p>\r\n\r\n<p>2. 在HKEY_CLASSES_ROOT下一级中找到需要设置的文件类型(如.txt), 在默认的数据中自定义一个名字, 如textfile</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/%E6%9F%90%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%E4%B8%8D%E6%88%90%E5%8A%9F(%E4%BE%8B%3A%20Sublime%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80txt%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%88%90%E5%8A%9F)/01.png\" style=\"height:177px; width:800px\" /></p>\r\n\r\n<p>3. 对HKEY_CLASSES_ROOT右键 --&gt; 新建 --&gt; 项, 取名为上面自定义的名字, 如textfile, 并创建如下图的结构, shell, open, command这几个名称固定,不能变.</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/%E6%9F%90%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%E4%B8%8D%E6%88%90%E5%8A%9F(%E4%BE%8B%3A%20Sublime%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80txt%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%88%90%E5%8A%9F)/02.png\" style=\"height:98px; width:397px\" /></p>\r\n\r\n<p>4. 左键单击command, 在右侧默认的数据中添加如下代码(注意是英文双引号, 且&quot;%1&quot;前面有一个空格, 第一个双引号中的路径是要启动软件的路径)</p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">\"D:\\Sublime\\sublime_text.exe\" \"%1\"</code></pre>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/%E6%9F%90%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%E4%B8%8D%E6%88%90%E5%8A%9F(%E4%BE%8B%3A%20Sublime%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80txt%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%88%90%E5%8A%9F)/03.png\" style=\"height:120px; width:800px\" /></p>\r\n\r\n<p>5. 在要打开的文件上右键 --&gt; 打开方式 --&gt; 选择其他应用, 若为找到需要的应用, 则在更多应用里面找, 把始终使用此应用打开选中</p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/%E6%9F%90%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%E4%B8%8D%E6%88%90%E5%8A%9F(%E4%BE%8B%3A%20Sublime%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80txt%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%88%90%E5%8A%9F)/04.png\" style=\"height:386px; width:800px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"https://paulandcode-blog.oss-cn-beijing.aliyuncs.com/blogs/%E6%9F%90%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%E4%B8%8D%E6%88%90%E5%8A%9F(%E4%BE%8B%3A%20Sublime%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80txt%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%88%90%E5%8A%9F)/05.png\" style=\"height:688px; width:592px\" /></p>\r\n\r\n<p>&nbsp;</p>', '2018-11-05 09:18:59.158896', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('f28a2fa5b91b4b45935939da1b2daab9', 'Java发送Get和Post请求(HttpClient)', '<p>1. 导包</p>\r\n\r\n<pre>\r\n<code class=\"language-markup\">&lt;dependency&gt;\r\n    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\r\n    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\r\n    &lt;version&gt;4.5.6&lt;/version&gt;\r\n&lt;/dependency&gt;</code></pre>\r\n\r\n<p>2. 工具类</p>\r\n\r\n<pre>\r\n<code class=\"language-java\">package com.product.utils;\r\n\r\nimport org.apache.http.NameValuePair;\r\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\r\nimport org.apache.http.client.methods.CloseableHttpResponse;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.client.utils.URIBuilder;\r\nimport org.apache.http.entity.StringEntity;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.message.BasicHeader;\r\nimport org.apache.http.message.BasicNameValuePair;\r\nimport org.apache.http.util.EntityUtils;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.util.*;\r\n\r\n/**\r\n * Java发送Get和Post请求(HttpClient)\r\n *\r\n * @author paulandcode paulandcode@gmail.com\r\n * @date 2018年9月9日 上午7:40:42\r\n */\r\npublic class HttpUtil {\r\n    /**\r\n     * 成功状态码\r\n     */\r\n    private static final int SUCCESS = 200;\r\n\r\n	/**\r\n	 * 关闭HttpClient的客户端和响应\r\n	 *\r\n     * @param client 客户端\r\n     * @param response 响应\r\n	 * @return void\r\n	 */\r\n    private static void closeClientAndResponse(CloseableHttpClient client, CloseableHttpResponse response) {\r\n        try {\r\n            if (response != null) {\r\n                response.close();\r\n            }\r\n            if (client != null) {\r\n                client.close();\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n	/**\r\n	 * HttpClient模拟浏览器进行Get请求\r\n	 *\r\n     * @param url 请求路径, 示例: http://localhost:8080/api/testget\r\n     * @param params 请求参数\r\n	 * @return java.util.Map&lt;java.lang.String,java.lang.String&gt;\r\n	 */\r\n    public static Map&lt;String, String&gt; doGet(String url, Map&lt;String, String&gt; params) {\r\n        Map&lt;String, String&gt; result = new HashMap&lt;&gt;(2);\r\n        result.put(\"code\", \"200\");\r\n        CloseableHttpClient client = null;\r\n        CloseableHttpResponse response = null;\r\n        try {\r\n            //创建一个httpclient对象\r\n            client = HttpClients.createDefault();\r\n            //创建URIBuilder\r\n            URIBuilder uri = new URIBuilder(url);\r\n            //设置参数\r\n            if (params != null) {\r\n                Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = params.entrySet();\r\n                for (Map.Entry&lt;String, String&gt; entry : entries) {\r\n                    uri.addParameter(entry.getKey(), entry.getValue());\r\n                }\r\n            }\r\n            //创建httpGet对象\r\n            HttpGet hg = new HttpGet(uri.build());\r\n            //设置请求的报文头部的编码\r\n            hg.setHeader(new BasicHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\"));\r\n            //设置期望服务端返回的编码\r\n            hg.setHeader(new BasicHeader(\"Accept\", \"application/json;charset=utf-8\"));\r\n            //请求服务\r\n            response = client.execute(hg);\r\n            //获取响应码\r\n            int statusCode = response.getStatusLine().getStatusCode();\r\n            if (statusCode == SUCCESS) {\r\n                // 通过EntityUtils的一个工具方法获取返回内容\r\n                String resStr = EntityUtils.toString(response.getEntity(), \"utf-8\");\r\n                result.put(\"data\", resStr);\r\n            } else {\r\n                result.put(\"code\", statusCode + \"\");\r\n            }\r\n        } catch (URISyntaxException | IOException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            //关闭response和client\r\n            closeClientAndResponse(client, response);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * HttpClient模拟浏览器进行Post请求\r\n     *\r\n     * @param url 请求路径, 示例: http://localhost:8080/api/testget\r\n     * @param params 请求参数\r\n     * @return java.util.Map&lt;java.lang.String,java.lang.String&gt;\r\n     */\r\n    public static Map&lt;String, String&gt; doPost(String url, Map&lt;String, String&gt; params){\r\n        Map&lt;String, String&gt; result = new HashMap&lt;&gt;(2);\r\n        result.put(\"code\", \"200\");\r\n        CloseableHttpClient client = null;\r\n        CloseableHttpResponse response = null;\r\n        try {\r\n            //创建一个httpclient对象\r\n            client = HttpClients.createDefault();\r\n            //创建一个post对象\r\n            HttpPost post = new HttpPost(url);\r\n            //创建一个Entity，模拟表单数据\r\n            List&lt;NameValuePair&gt; formList = new ArrayList&lt;&gt;();\r\n            //添加表单数据\r\n            if (params != null) {\r\n                Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = params.entrySet();\r\n                for (Map.Entry&lt;String, String&gt; entry : entries) {\r\n                    formList.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));\r\n                }\r\n            }\r\n            //包装成一个Entity对象\r\n            StringEntity entity = new UrlEncodedFormEntity(formList, \"utf-8\");\r\n            //设置请求的内容\r\n            post.setEntity(entity);\r\n            //设置请求的报文头部的编码\r\n            post.setHeader(new BasicHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\"));\r\n            //设置期望服务端返回的编码\r\n            post.setHeader(new BasicHeader(\"Accept\", \"application/json;charset=utf-8\"));\r\n            //执行post请求\r\n            response = client.execute(post);\r\n            //获取响应码\r\n            int statusCode = response.getStatusLine().getStatusCode();\r\n            if (statusCode == SUCCESS) {\r\n                //获取数据\r\n                String resStr = EntityUtils.toString(response.getEntity(), \"utf-8\");\r\n                result.put(\"data\", resStr);\r\n            } else {\r\n                result.put(\"code\", statusCode + \"\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            //关闭response和client\r\n            closeClientAndResponse(client, response);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-10-23 23:52:23.823199', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('f80d92343f1c4337b2906e683b652cb1', 'Oracle定时任务', '<p>1. 创建定时任务要执行的存储过程</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">Create or replace Procedure t_alarm_info_pro\r\nIS \r\nBEGIN\r\n	DELETE FROM T_ALARM_INFO WHERE to_char(INTIME,\'yyyy\') &lt; to_char(sysdate,\'yyyy\');\r\n  COMMIT;  \r\nEND;</code></pre>\r\n\r\n<p>2. 创建定时任务(variable这句话要在sqlplus中运行, sqlplus中以/结束)</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">variable t_alarm_info__timer number;\r\nBEGIN\r\nDbms_Job.Submit(:t_alarm_info__timer,\'t_alarm_info_pro;\',sysdate,\'sysdate+30\');\r\nCOMMIT;\r\nEND;</code></pre>\r\n\r\n<p>3. 启动定时任务</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">BEGIN\r\ndbms_job.run(:t_alarm_info__timer);\r\nEND;</code></pre>\r\n\r\n<p>4. 删除定时任务</p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">BEGIN\r\ndbms_job.remove(:t_alarm_info__timer);\r\nEND;</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-11-01 06:47:49.670766', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('fa4de7d30f24490982f9916e30bdd50d', '分页工具类', '<pre>\r\n<code class=\"language-java\">import java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * 分页工具类\r\n * \r\n * @author paulandcode\r\n * @email paulandcode@gmail.com\r\n * @date 2017年5月18日 下午13:27:13\r\n */\r\npublic class PageUtils implements Serializable {\r\n	private static final long serialVersionUID = 1L;\r\n	// 总记录数\r\n	private int totalCount;\r\n	// 每页记录数\r\n	private int pageSize;\r\n	// 总页数\r\n	private int totalPage;\r\n	// 当前页数\r\n	private int currPage;\r\n	// 分页数据\r\n	private List&lt;?&gt; list;\r\n	\r\n	/**\r\n	 * 新建分页\r\n	 * @param list        分页数据\r\n	 * @param totalCount  总记录数\r\n	 * @param pageSize    每页记录数\r\n	 * @param currPage    当前页数\r\n	 */\r\n	public PageUtils(List&lt;?&gt; list, int totalCount, int pageSize, int currPage) {\r\n		this.list = list;\r\n		this.totalCount = totalCount;\r\n		this.pageSize = pageSize;\r\n		this.currPage = currPage;\r\n		this.totalPage = (int)Math.ceil((double)totalCount/pageSize);\r\n	}\r\n\r\n	public int getTotalCount() {\r\n		return totalCount;\r\n	}\r\n\r\n	public void setTotalCount(int totalCount) {\r\n		this.totalCount = totalCount;\r\n	}\r\n\r\n	public int getPageSize() {\r\n		return pageSize;\r\n	}\r\n\r\n	public void setPageSize(int pageSize) {\r\n		this.pageSize = pageSize;\r\n	}\r\n\r\n	public int getTotalPage() {\r\n		return totalPage;\r\n	}\r\n\r\n	public void setTotalPage(int totalPage) {\r\n		this.totalPage = totalPage;\r\n	}\r\n\r\n	public int getCurrPage() {\r\n		return currPage;\r\n	}\r\n\r\n	public void setCurrPage(int currPage) {\r\n		this.currPage = currPage;\r\n	}\r\n\r\n	public List&lt;?&gt; getList() {\r\n		return list;\r\n	}\r\n\r\n	public void setList(List&lt;?&gt; list) {\r\n		this.list = list;\r\n	}	\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-08-13 01:44:25.607255', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('fd29857c4da2412c93f38f59654e3f30', '字符串首字母大写', '<pre>\r\n<code class=\"language-java\">/**\r\n * 字符串首字母大写\r\n *\r\n * @author paulandcode\r\n * @since 2018年7月26日 下午4:29:19\r\n */\r\npublic class StringUtils {\r\n	/**\r\n	 * 字符串首字母大写\r\n	 */\r\n	public static String captureName(String name) {\r\n        char[] cs=name.toCharArray();\r\n        cs[0]-=32;\r\n        return String.valueOf(cs);\r\n    }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>', '2018-07-26 08:30:14.524413', 'c1c8c692c1674bfd81cfb08f9e201662');
INSERT INTO `blog_blog` VALUES ('ffb5139d2e4e4682aa0041c93d208892', '几个可用的Maven仓库地址', '<ol>\r\n	<li><a href=\"http://maven.aliyun.com/nexus/content/groups/public/\" target=\"_blank\">http://maven.aliyun.com/nexus/content/groups/public/</a></li>\r\n	<li><a href=\"https://repository.jboss.org/nexus/content/groups/public/\" target=\"_blank\">https://repository.jboss.org/nexus/content/groups/public/</a></li>\r\n	<li><a href=\"http://mirrors.ibiblio.org/pub/mirrors/maven2/\" target=\"_blank\">http://mirrors.ibiblio.org/pub/mirrors/maven2/</a></li>\r\n	<li><a href=\"http://repo2.maven.org/maven2/\" target=\"_blank\">http://repo2.maven.org/maven2/</a></li>\r\n	<li><a href=\"http://uk.maven.org/maven2/\" target=\"_blank\">http://uk.maven.org/maven2/</a></li>\r\n</ol>', '2018-07-14 23:21:06.433194', 'c1c8c692c1674bfd81cfb08f9e201662');

-- ----------------------------
-- Table structure for blog_blog_label
-- ----------------------------
DROP TABLE IF EXISTS `blog_blog_label`;
CREATE TABLE `blog_blog_label`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_id` char(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `label_id` char(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `blog_blog_label_blog_id_label_id_8c671b1b_uniq`(`blog_id`, `label_id`) USING BTREE,
  INDEX `blog_blog_label_label_id_ff74fc01_fk_blog_label_id`(`label_id`) USING BTREE,
  CONSTRAINT `blog_blog_label_blog_id_aae76f0d_fk_blog_blog_id` FOREIGN KEY (`blog_id`) REFERENCES `blog_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `blog_blog_label_label_id_ff74fc01_fk_blog_label_id` FOREIGN KEY (`label_id`) REFERENCES `blog_label` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 256 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_blog_label
-- ----------------------------
INSERT INTO `blog_blog_label` VALUES (69, '0252f91ade2245a1a11c5f65e7065e71', '57d76dc24d31440388c6dc068e262619');
INSERT INTO `blog_blog_label` VALUES (70, '0252f91ade2245a1a11c5f65e7065e71', '9177a8e98a2c4ed09ab26a057688faf5');
INSERT INTO `blog_blog_label` VALUES (227, '02713a65903e4fd0b1aafa7e3ad903a3', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (41, '050901e2f1ec411a8394353296c46a7e', 'b50869fc4bec4f1ba7802f7dbc5e181c');
INSERT INTO `blog_blog_label` VALUES (65, '055ae804b4944028a413731e36b49aae', '57d76dc24d31440388c6dc068e262619');
INSERT INTO `blog_blog_label` VALUES (66, '055ae804b4944028a413731e36b49aae', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (152, '05803bd048be417ab4aecac505fb5d9c', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (67, '05e53c833a5b4b5a870b2a905a85c4b3', '57d76dc24d31440388c6dc068e262619');
INSERT INTO `blog_blog_label` VALUES (27, '065ede53a76646e498ada9adef5cfd63', '592ee30819644028987c52a90f2f5a94');
INSERT INTO `blog_blog_label` VALUES (235, '075e02a6942647d19d8441e5ca1c8a79', 'c0cf6909992b4605ba551bf2a18b72d4');
INSERT INTO `blog_blog_label` VALUES (215, '080897478c494a3e93c6afc5e045472e', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (24, '081d97cb01ae46618d0bb59575e14bd1', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (238, '0a9a88ca98114802bd0b54330e21d97e', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (30, '0ab931471761452596dae9d1e92c70e2', 'effd4af8dde14ccb942a30b8e6577803');
INSERT INTO `blog_blog_label` VALUES (199, '0ac1909eb3694edea3a49f9db40a6833', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (224, '0ad209e08fea46158a938b55862c6b68', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (219, '0c1f8ec49779447aa8c1dfc973a2578e', '509f59efd31e4d8dab0ac41eadf46f70');
INSERT INTO `blog_blog_label` VALUES (37, '0d66a898fb504667aa5d5db4ad7d8ff2', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (38, '0d66a898fb504667aa5d5db4ad7d8ff2', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (20, '0e91ed7db6fb4460acb567cc58e6f754', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (16, '0e91ed7db6fb4460acb567cc58e6f754', 'a30916c995e34084a7810ed7a94c8129');
INSERT INTO `blog_blog_label` VALUES (101, '0ed3f9cd5b174f9d9e9eeef983181740', '2db302e963854f03a410768d692bf865');
INSERT INTO `blog_blog_label` VALUES (164, '0f9a0c46b4934e8785d99b73e86d4f97', 'c61cd11a44f44f37948184048ea4c664');
INSERT INTO `blog_blog_label` VALUES (165, '0f9a0c46b4934e8785d99b73e86d4f97', 'effd4af8dde14ccb942a30b8e6577803');
INSERT INTO `blog_blog_label` VALUES (184, '0fb8071f375645e0bb6ec344cdcc03d9', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (78, '1269beb5e2da47d284d3a27f42e14557', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (202, '129c0172edaf47a392de9c7ee014a1ff', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (149, '12ea83e27c5d43d180b986d4ec534604', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (148, '12ea83e27c5d43d180b986d4ec534604', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (253, '1386d3942fa94283a049e7d8fe23ead4', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (252, '1386d3942fa94283a049e7d8fe23ead4', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (251, '1386d3942fa94283a049e7d8fe23ead4', 'effd4af8dde14ccb942a30b8e6577803');
INSERT INTO `blog_blog_label` VALUES (154, '183c1b61f6f145a49040822496643531', '496b18fad36c481aa486c87cc1b138f4');
INSERT INTO `blog_blog_label` VALUES (6, '18fdaadcd9ba4a8b845869823c474f59', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (7, '18fdaadcd9ba4a8b845869823c474f59', 'a30916c995e34084a7810ed7a94c8129');
INSERT INTO `blog_blog_label` VALUES (185, '19a99046f5654a8cb90af6213d782378', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (174, '1ab74d32dd8b4142b15ffe6d37ffdf7e', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (175, '1ab74d32dd8b4142b15ffe6d37ffdf7e', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (126, '1b91c23fd0cf48f28a49ad3e77a1f834', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (131, '1c6ba033f8f84e908f85da43df21366e', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (132, '1d03a20c9da14631abc736ea11c145a9', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (181, '1fbf5eb847314a8bafaf581beaf90b64', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (83, '1fed2049afb8416aba3f3e7633d8e938', '79f4f2aee6ae4e4db43bfe350b8a6947');
INSERT INTO `blog_blog_label` VALUES (178, '25ff06468e6c4300a4b56424e8ef34c4', 'b67d717876104b5faa4585e975c7dd13');
INSERT INTO `blog_blog_label` VALUES (246, '265d0347d9e74cc39ba7bf3ec3d6e390', 'effd4af8dde14ccb942a30b8e6577803');
INSERT INTO `blog_blog_label` VALUES (156, '2879ba32a21e4371b7a1c7a221db38d0', '96201737cc9841ae8ee91c4104777141');
INSERT INTO `blog_blog_label` VALUES (198, '292e0df3f11b46d6acf38fe73b274ab9', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (240, '2bfb9afb80134f08b01115f0d3041f8f', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (77, '2c2f6154902b491092e98a084651bdcf', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (109, '2d7556945061483d98fbc7c16ddca3fe', '496b18fad36c481aa486c87cc1b138f4');
INSERT INTO `blog_blog_label` VALUES (108, '2d7556945061483d98fbc7c16ddca3fe', 'c0cf6909992b4605ba551bf2a18b72d4');
INSERT INTO `blog_blog_label` VALUES (110, '2d7556945061483d98fbc7c16ddca3fe', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (42, '30798e0e4cd1400f85f17d290cdb62f4', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (43, '30798e0e4cd1400f85f17d290cdb62f4', 'b50869fc4bec4f1ba7802f7dbc5e181c');
INSERT INTO `blog_blog_label` VALUES (119, '31b1c8fc02754b3088503f6487d2ffb8', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (112, '3249e4df543a45d89309084888e03591', '496b18fad36c481aa486c87cc1b138f4');
INSERT INTO `blog_blog_label` VALUES (114, '3249e4df543a45d89309084888e03591', '592ee30819644028987c52a90f2f5a94');
INSERT INTO `blog_blog_label` VALUES (111, '3249e4df543a45d89309084888e03591', 'c0cf6909992b4605ba551bf2a18b72d4');
INSERT INTO `blog_blog_label` VALUES (113, '3249e4df543a45d89309084888e03591', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (192, '3279ad93a7194ede9e6235515c9f4830', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (19, '327acc92bbd24971ab1e00b6efb0d8a0', '813ba35f2f80439a981f551da2de5702');
INSERT INTO `blog_blog_label` VALUES (231, '33b4a9a401c54fe891e8e2728de51c74', 'c61cd11a44f44f37948184048ea4c664');
INSERT INTO `blog_blog_label` VALUES (169, '33d34504c8b145f597eeba81501d6dc9', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (97, '37bbd201ffc14eac94f32e02ea554d7d', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (96, '37bbd201ffc14eac94f32e02ea554d7d', 'cee5c72bd49646eb99200087f69c8580');
INSERT INTO `blog_blog_label` VALUES (79, '38771e365481437f90ba27903b5850a8', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (226, '39880fde5c9544d4b1a2c14320544e7f', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (183, '3a72a10df2a5456cb8f1f53462f66250', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (138, '3ae146bfd6b641e1a99f83737b6dcdfe', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (139, '3ae146bfd6b641e1a99f83737b6dcdfe', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (71, '3cf53d5d7b4b4128abc7869c44a4ae70', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (72, '3cf53d5d7b4b4128abc7869c44a4ae70', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (225, '3e212bcc52fc4c048b590b1b03a5d6d3', '509f59efd31e4d8dab0ac41eadf46f70');
INSERT INTO `blog_blog_label` VALUES (25, '3e83523263674d6daba8bf62a2610c72', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (26, '3e83523263674d6daba8bf62a2610c72', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (50, '3f9d3bea949b436d925cdd10382874bc', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (151, '4124fad1f97b4af98ccc92dba218033c', '592ee30819644028987c52a90f2f5a94');
INSERT INTO `blog_blog_label` VALUES (150, '4124fad1f97b4af98ccc92dba218033c', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (36, '41ee600687704b13a21e37a1e2fc4593', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (84, '4275e65d147f4f549ec3b36f9494d73c', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (173, '46051cbbaf464349978f3a623603c26f', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (172, '46051cbbaf464349978f3a623603c26f', 'b67d717876104b5faa4585e975c7dd13');
INSERT INTO `blog_blog_label` VALUES (255, '46c0029888f54acaa2585d2aa6160dc8', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (176, '46fdfe42afd64c1c9a3c1564c8b2a2dd', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (177, '46fdfe42afd64c1c9a3c1564c8b2a2dd', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (122, '48f4d7e0cf8641d189bd2b212d14da9b', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (136, '48fd10718c9d47198263f63f20a39287', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (137, '48fd10718c9d47198263f63f20a39287', 'effd4af8dde14ccb942a30b8e6577803');
INSERT INTO `blog_blog_label` VALUES (100, '4b2d83c944974ce1954e88404732ce73', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (188, '4b695aab7cfc4b5296b9afc381495da4', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (189, '4b695aab7cfc4b5296b9afc381495da4', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (239, '4bb3c66be8894447a3fd95f279c768cc', 'b67d717876104b5faa4585e975c7dd13');
INSERT INTO `blog_blog_label` VALUES (170, '4e8e4c47ff384915b3eed1c70852b7a8', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (171, '4e8e4c47ff384915b3eed1c70852b7a8', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (195, '4fa9ad7b10144910a4d8234bd439a5e3', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (102, '5118307546e2452681bf9135153f8c70', '9177a8e98a2c4ed09ab26a057688faf5');
INSERT INTO `blog_blog_label` VALUES (40, '51d310acbc3d474baf3df988371f68d1', 'b50869fc4bec4f1ba7802f7dbc5e181c');
INSERT INTO `blog_blog_label` VALUES (247, '537b389aa19b44c28804d93a593ef874', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (250, '53f43a237d204b0995e872b9387b846d', 'b67d717876104b5faa4585e975c7dd13');
INSERT INTO `blog_blog_label` VALUES (162, '5417c724dd43485e895d3160e7221c7b', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (82, '5598fc7a5c1547738ec1f5dc03d52e93', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (80, '5598fc7a5c1547738ec1f5dc03d52e93', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (244, '55b4a069b8194eddbe25a088cc7dab4a', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (140, '585768a33d094ed283c36f55e8fc2cde', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (141, '585768a33d094ed283c36f55e8fc2cde', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (168, '58b6b745edc14d848e7910a1b5d7d223', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (127, '58c05f1698aa4c878489ff3fe1b6247f', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (153, '59c92df25773494daaa189ee5296a9e4', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (204, '5a1e008db75a46608af934a68dbab642', 'b67d717876104b5faa4585e975c7dd13');
INSERT INTO `blog_blog_label` VALUES (145, '5a7e299f7496441394b513acfc8a7853', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (90, '5c9984862ac44a3f88c9cc2931d8749c', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (92, '5c9984862ac44a3f88c9cc2931d8749c', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (91, '5c9984862ac44a3f88c9cc2931d8749c', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (243, '5ec164d307bb495e91e4f9acb9f9218e', '496b18fad36c481aa486c87cc1b138f4');
INSERT INTO `blog_blog_label` VALUES (197, '5ee6a27331684273a3dccfd6591dbcc4', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (213, '60b645d6849548bc8b9db288d4fc48ec', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (218, '60b645d6849548bc8b9db288d4fc48ec', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (39, '653cd06a0bd040749fe92d4734cc6c24', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (21, '661bd4590cfb4e589ed234ba3dd8b128', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (14, '661bd4590cfb4e589ed234ba3dd8b128', 'a30916c995e34084a7810ed7a94c8129');
INSERT INTO `blog_blog_label` VALUES (125, '66765477f3be4a44bc527b835760ec70', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (44, '66a0aa39a114440fa3bacd2489389e9e', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (45, '66a0aa39a114440fa3bacd2489389e9e', 'b50869fc4bec4f1ba7802f7dbc5e181c');
INSERT INTO `blog_blog_label` VALUES (236, '66b72ad934f24ce48aa0ae4aa59c9cfc', 'c0cf6909992b4605ba551bf2a18b72d4');
INSERT INTO `blog_blog_label` VALUES (205, '6ad3d4aa18b141c7a34da503fc89e1d6', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (206, '6ad3d4aa18b141c7a34da503fc89e1d6', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (248, '6ca7b63e19df48598e8381e4083ba382', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (249, '6ca7b63e19df48598e8381e4083ba382', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (182, '7066d496355d41a0b15f1e7bf172f69b', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (234, '70d4234aeebb4d7b9620be7bcb97d64a', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (104, '757dacdafdc44f0c8cc5424b8914e4f8', '9177a8e98a2c4ed09ab26a057688faf5');
INSERT INTO `blog_blog_label` VALUES (116, '768ec5ff0dc34083941b0e1149e9f482', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (203, '781f6d89bfad49e99ca631a17f754db9', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (129, '78df6ea17bcb47acb11a81f6bd1f7fc0', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (161, '790a7a38e5b54457ada9f414264add38', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (5, '7d4611f0279245e5b114db9bf97ec2da', 'effd4af8dde14ccb942a30b8e6577803');
INSERT INTO `blog_blog_label` VALUES (95, '7e4f5698064e4b8aaa547e9a8b7cea5c', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (93, '7e4f5698064e4b8aaa547e9a8b7cea5c', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (94, '7e4f5698064e4b8aaa547e9a8b7cea5c', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (29, '7f0c4ca1ec194c33963e32b06fac535b', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (120, '820395346ede4a41a5210fb6b0ea4c84', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (68, '84045eb9202045b592948ca0604f3b7e', '57d76dc24d31440388c6dc068e262619');
INSERT INTO `blog_blog_label` VALUES (186, '847468598b47459f87a7227f22e8c785', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (193, '873e23f9fcda4188a767011223e07ef4', 'c61cd11a44f44f37948184048ea4c664');
INSERT INTO `blog_blog_label` VALUES (142, '87837d25a91943e3811476f53fcf6fc2', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (143, '87837d25a91943e3811476f53fcf6fc2', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (64, '8a0176c1a9d642299910a41a5dba1536', '57d76dc24d31440388c6dc068e262619');
INSERT INTO `blog_blog_label` VALUES (57, '8a0176c1a9d642299910a41a5dba1536', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (53, '8a0176c1a9d642299910a41a5dba1536', '813ba35f2f80439a981f551da2de5702');
INSERT INTO `blog_blog_label` VALUES (60, '8a0176c1a9d642299910a41a5dba1536', '8c61f937a5204f15842226851a14fa53');
INSERT INTO `blog_blog_label` VALUES (61, '8a0176c1a9d642299910a41a5dba1536', '9177a8e98a2c4ed09ab26a057688faf5');
INSERT INTO `blog_blog_label` VALUES (58, '8a0176c1a9d642299910a41a5dba1536', 'a30916c995e34084a7810ed7a94c8129');
INSERT INTO `blog_blog_label` VALUES (63, '8a0176c1a9d642299910a41a5dba1536', 'b50869fc4bec4f1ba7802f7dbc5e181c');
INSERT INTO `blog_blog_label` VALUES (62, '8a0176c1a9d642299910a41a5dba1536', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (56, '8a0176c1a9d642299910a41a5dba1536', 'effd4af8dde14ccb942a30b8e6577803');
INSERT INTO `blog_blog_label` VALUES (59, '8a0176c1a9d642299910a41a5dba1536', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (187, '8a56c25d2a1e4c5d93849167f73be908', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (196, '8c3ad349aaec45d1a841f2ec5215cd84', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (237, '8c523e90d66e4af5bfcf0b52e6b74d84', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (51, '8d080c1c7b5349658ab4769ca6bea9e9', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (52, '8d080c1c7b5349658ab4769ca6bea9e9', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (210, '8ef8f543e310445895aea2a74c099447', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (209, '8ef8f543e310445895aea2a74c099447', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (155, '989a93c1710b4e5baf365e0184c7b540', '496b18fad36c481aa486c87cc1b138f4');
INSERT INTO `blog_blog_label` VALUES (180, '98b68feeb4724c8e8c1151ebd312d779', 'b67d717876104b5faa4585e975c7dd13');
INSERT INTO `blog_blog_label` VALUES (106, '9aa30e400cac4b9abaa36ab07420991f', '8c61f937a5204f15842226851a14fa53');
INSERT INTO `blog_blog_label` VALUES (133, '9b4633628b5a49ae96502fc76e2fa71f', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (229, '9eed816f8fee436fb42b22832814d4f7', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (228, '9eed816f8fee436fb42b22832814d4f7', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (123, '9eed816f8fee436fb42b22832814d4f7', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (212, '9f1c329dff8549e6890a22ad9c9e621b', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (211, '9f1c329dff8549e6890a22ad9c9e621b', 'c61cd11a44f44f37948184048ea4c664');
INSERT INTO `blog_blog_label` VALUES (99, '9f5a94e9f5ba4b1dbfcfaf9e292c3b3f', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (98, '9f5a94e9f5ba4b1dbfcfaf9e292c3b3f', 'cee5c72bd49646eb99200087f69c8580');
INSERT INTO `blog_blog_label` VALUES (144, 'a1bff6c2a0614f3ab0459555eb46f068', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (179, 'a67166d8b2984185a6b0e2f96690ced7', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (81, 'a81259d2adc8481aadf5ee0349af33d4', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (48, 'a81259d2adc8481aadf5ee0349af33d4', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (194, 'aa40284a750044caa39fe8c41b6fbaf1', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (245, 'abf3b27595274720be85ecd3d4ffdab1', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (207, 'aecae1e0441e47f1892b84ca03229fe2', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (22, 'b041a292df8f45008b299fd9ba8c594a', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (9, 'b041a292df8f45008b299fd9ba8c594a', 'a30916c995e34084a7810ed7a94c8129');
INSERT INTO `blog_blog_label` VALUES (242, 'b041b6f6ebfb4ae48e799efe84709c01', '9177a8e98a2c4ed09ab26a057688faf5');
INSERT INTO `blog_blog_label` VALUES (160, 'b0e2059c7be54038916e7a2edd87d05d', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (103, 'b2e2be65ec1342ca8c1eee4dc9bab95d', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (115, 'b3106376d26c4fa58158e0de4633ab1a', '8ff361b7badf489fb072903c2c0c641e');
INSERT INTO `blog_blog_label` VALUES (166, 'b99153b4aecc4f1cad82e48c12a1e5ce', '509f59efd31e4d8dab0ac41eadf46f70');
INSERT INTO `blog_blog_label` VALUES (167, 'b99153b4aecc4f1cad82e48c12a1e5ce', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (11, 'b9c2fa10722d4e86915a3b222ee6adc7', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (12, 'b9c2fa10722d4e86915a3b222ee6adc7', 'a30916c995e34084a7810ed7a94c8129');
INSERT INTO `blog_blog_label` VALUES (216, 'ba266149590e4f8ca9ac8958c0ce5efa', '509f59efd31e4d8dab0ac41eadf46f70');
INSERT INTO `blog_blog_label` VALUES (163, 'be38f487687a4aa88368f03822c99163', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (28, 'bea32ea8c9d447ce972791cdc95116bc', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (220, 'bf4da0e68964411da7a93a3766853ad2', '509f59efd31e4d8dab0ac41eadf46f70');
INSERT INTO `blog_blog_label` VALUES (23, 'c103c3844d95407185368a580ab076dd', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (130, 'c54208e462a84f81a09434b9708e0736', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (107, 'c96b399e31b94571997c791252b2e4d7', '8c61f937a5204f15842226851a14fa53');
INSERT INTO `blog_blog_label` VALUES (208, 'c96d43f4d68e401f807782dd85ecfb28', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (105, 'ca27648bc68a447eb9453016bccc30f0', '8c61f937a5204f15842226851a14fa53');
INSERT INTO `blog_blog_label` VALUES (146, 'cad959b60c604051a67a45e9d9b80d24', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (117, 'cf5aeb9de71d452e81e05c5b6a94ffb1', '67f3546f0b874f76aeca138fdf10358d');
INSERT INTO `blog_blog_label` VALUES (118, 'cf5aeb9de71d452e81e05c5b6a94ffb1', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (89, 'cf97c2fdf42e4269b8f1c2c48783e172', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (134, 'd0aea702485f4c0c972f58fca49dc68e', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (254, 'd1e0c90f8a3342f68774cd7f9ead060f', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (230, 'd45c7bf61b92461cae4607f2af6774f9', 'c61cd11a44f44f37948184048ea4c664');
INSERT INTO `blog_blog_label` VALUES (31, 'd4bdd60637934d2ea51adb23637cda2f', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (32, 'd4bdd60637934d2ea51adb23637cda2f', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (191, 'd5129020b19f4e63a502ac65bc111f19', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (190, 'd5129020b19f4e63a502ac65bc111f19', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (233, 'd5763e9ead754d848e8bc54ecb459e28', '9177a8e98a2c4ed09ab26a057688faf5');
INSERT INTO `blog_blog_label` VALUES (241, 'd5763e9ead754d848e8bc54ecb459e28', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (34, 'd60e6333106e442b9934113185c41561', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (121, 'd813f0dd89604a31b2cc2ad210e40ad4', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (54, 'd82d7a31c939407a8673260d6439f7dc', '813ba35f2f80439a981f551da2de5702');
INSERT INTO `blog_blog_label` VALUES (75, 'd94d1bf91dc8426fb64e29ac2440f9b6', '7cf6f179bdc24bca9027de3f995934ea');
INSERT INTO `blog_blog_label` VALUES (46, 'daaf797e5ec74a42a4c0a3f951f3ef9c', '6be27b345cc44641a1ffdeeb0fc9d98c');
INSERT INTO `blog_blog_label` VALUES (159, 'db6b319ea27a4a0f8882b046dad6c228', 'beb0c4b13163434999fa273474fabef6');
INSERT INTO `blog_blog_label` VALUES (35, 'dbd7527971444477bc0fe7ef277e1dd6', 'b3a6ddcfd18c4dc7bffaed855e1ae498');
INSERT INTO `blog_blog_label` VALUES (223, 'def79b38f40d4d4c87f7c80947e37f8c', '52cd06ea527f49d7bb2cd144f37f7718');
INSERT INTO `blog_blog_label` VALUES (221, 'def79b38f40d4d4c87f7c80947e37f8c', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (222, 'def79b38f40d4d4c87f7c80947e37f8c', 'fb475e1e6b4d4fedb65b16d9fcea61e1');
INSERT INTO `blog_blog_label` VALUES (88, 'e3385c6b8a1c4e9bb2c7cbaf23a7218b', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (87, 'e3385c6b8a1c4e9bb2c7cbaf23a7218b', 'cee5c72bd49646eb99200087f69c8580');
INSERT INTO `blog_blog_label` VALUES (85, 'e3401dc7f3434c6080ad39cc9b6fc88c', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (86, 'e3401dc7f3434c6080ad39cc9b6fc88c', 'c17fd7f44eed47efb8494c3cad662517');
INSERT INTO `blog_blog_label` VALUES (128, 'e3bb274a988a427ca981b1438afa789b', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (124, 'e79c1c0226cd4d789fb9bf77a24e2e4f', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (33, 'e88dc9b4952f47e8824fe43b4eb2fddc', '9177a8e98a2c4ed09ab26a057688faf5');
INSERT INTO `blog_blog_label` VALUES (17, 'ec838fa835b44f95ae3c819f166ce6c2', '3d8652f7023a425ea428dbcfaf37db4d');
INSERT INTO `blog_blog_label` VALUES (217, 'eda6ab5458dd496abe54b2d44bd690c4', 'c4af0e6c478547db9c10dc788617fa66');
INSERT INTO `blog_blog_label` VALUES (201, 'f28a2fa5b91b4b45935939da1b2daab9', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (214, 'f80d92343f1c4337b2906e683b652cb1', '4c0d58c765684c4dbeb882e5d2dade2e');
INSERT INTO `blog_blog_label` VALUES (147, 'fa4de7d30f24490982f9916e30bdd50d', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (135, 'fd29857c4da2412c93f38f59654e3f30', '880a439b2e3a43b3881eded4f50f88ec');
INSERT INTO `blog_blog_label` VALUES (18, 'ffb5139d2e4e4682aa0041c93d208892', '9177a8e98a2c4ed09ab26a057688faf5');

-- ----------------------------
-- Table structure for blog_label
-- ----------------------------
DROP TABLE IF EXISTS `blog_label`;
CREATE TABLE `blog_label`  (
  `id` char(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `name` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `count` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_label
-- ----------------------------
INSERT INTO `blog_label` VALUES ('2db302e963854f03a410768d692bf865', '插件', 0);
INSERT INTO `blog_label` VALUES ('3d8652f7023a425ea428dbcfaf37db4d', 'Linux', 0);
INSERT INTO `blog_label` VALUES ('496b18fad36c481aa486c87cc1b138f4', 'Spring', 0);
INSERT INTO `blog_label` VALUES ('4c0d58c765684c4dbeb882e5d2dade2e', 'Oracle', 0);
INSERT INTO `blog_label` VALUES ('509f59efd31e4d8dab0ac41eadf46f70', '设计模式', 0);
INSERT INTO `blog_label` VALUES ('52cd06ea527f49d7bb2cd144f37f7718', '报错', 0);
INSERT INTO `blog_label` VALUES ('57d76dc24d31440388c6dc068e262619', 'Jenkins', 0);
INSERT INTO `blog_label` VALUES ('592ee30819644028987c52a90f2f5a94', 'MyBatis', 0);
INSERT INTO `blog_label` VALUES ('67f3546f0b874f76aeca138fdf10358d', 'Eclipse', 0);
INSERT INTO `blog_label` VALUES ('6be27b345cc44641a1ffdeeb0fc9d98c', 'IDEA', 0);
INSERT INTO `blog_label` VALUES ('79f4f2aee6ae4e4db43bfe350b8a6947', 'CSS', 0);
INSERT INTO `blog_label` VALUES ('7cf6f179bdc24bca9027de3f995934ea', 'MySQL', 0);
INSERT INTO `blog_label` VALUES ('813ba35f2f80439a981f551da2de5702', 'Docker', 0);
INSERT INTO `blog_label` VALUES ('880a439b2e3a43b3881eded4f50f88ec', 'Java工具类', 0);
INSERT INTO `blog_label` VALUES ('8c61f937a5204f15842226851a14fa53', 'Python', 0);
INSERT INTO `blog_label` VALUES ('8ff361b7badf489fb072903c2c0c641e', 'HTML', 0);
INSERT INTO `blog_label` VALUES ('9177a8e98a2c4ed09ab26a057688faf5', 'Maven', 0);
INSERT INTO `blog_label` VALUES ('96201737cc9841ae8ee91c4104777141', '面试', 0);
INSERT INTO `blog_label` VALUES ('a30916c995e34084a7810ed7a94c8129', 'Nginx', 0);
INSERT INTO `blog_label` VALUES ('b3a6ddcfd18c4dc7bffaed855e1ae498', 'Ant', 0);
INSERT INTO `blog_label` VALUES ('b50869fc4bec4f1ba7802f7dbc5e181c', 'Git', 0);
INSERT INTO `blog_label` VALUES ('b67d717876104b5faa4585e975c7dd13', 'kettle', 0);
INSERT INTO `blog_label` VALUES ('beb0c4b13163434999fa273474fabef6', 'ActiveMQ', 0);
INSERT INTO `blog_label` VALUES ('c0cf6909992b4605ba551bf2a18b72d4', '源码', 0);
INSERT INTO `blog_label` VALUES ('c17fd7f44eed47efb8494c3cad662517', 'Tomcat', 0);
INSERT INTO `blog_label` VALUES ('c4af0e6c478547db9c10dc788617fa66', 'Windows', 0);
INSERT INTO `blog_label` VALUES ('c61cd11a44f44f37948184048ea4c664', 'SpringBoot', 0);
INSERT INTO `blog_label` VALUES ('cee5c72bd49646eb99200087f69c8580', '虚拟机', 0);
INSERT INTO `blog_label` VALUES ('e968280d25fb4d3290e83afb71132259', 'JVM', 0);
INSERT INTO `blog_label` VALUES ('effd4af8dde14ccb942a30b8e6577803', 'Redis', 0);
INSERT INTO `blog_label` VALUES ('fb475e1e6b4d4fedb65b16d9fcea61e1', 'Java', 0);

-- ----------------------------
-- Table structure for blog_status
-- ----------------------------
DROP TABLE IF EXISTS `blog_status`;
CREATE TABLE `blog_status`  (
  `id` char(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `name` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_status
-- ----------------------------
INSERT INTO `blog_status` VALUES ('22ac56c65a0d44c5bf6b45e876c742f9', '草稿');
INSERT INTO `blog_status` VALUES ('c1c8c692c1674bfd81cfb08f9e201662', '发布');

-- ----------------------------
-- Table structure for django_admin_log
-- ----------------------------
DROP TABLE IF EXISTS `django_admin_log`;
CREATE TABLE `django_admin_log`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `object_repr` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `action_flag` smallint(5) UNSIGNED NOT NULL,
  `change_message` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content_type_id` int(11) NULL DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `django_admin_log_content_type_id_c4bce8eb_fk_django_co`(`content_type_id`) USING BTREE,
  INDEX `django_admin_log_user_id_c564eba6_fk_auth_user_id`(`user_id`) USING BTREE,
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 693 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_admin_log
-- ----------------------------
INSERT INTO `django_admin_log` VALUES (1, '2018-07-11 03:00:42.370503', '1ca70887-ed20-49c2-91e3-bf1d760e18f2', '草稿', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (2, '2018-07-11 03:00:42.459732', '16426cf4-b8cf-4063-9eeb-7a3221286bad', '草稿', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (3, '2018-07-11 03:00:48.762603', '16426cf4-b8cf-4063-9eeb-7a3221286bad', '草稿', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (4, '2018-07-11 03:00:52.275834', '1ca70887-ed20-49c2-91e3-bf1d760e18f2', '草稿', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (5, '2018-07-11 03:00:59.618523', '22ac56c6-5a0d-44c5-bf6b-45e876c742f9', '草稿', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (6, '2018-07-11 03:01:07.228881', 'c1c8c692-c167-4bfd-81cf-b08f9e201662', '发布', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (7, '2018-07-11 03:33:00.831142', '61782748-bd00-4b55-8cb7-6c690e5c5501', '测试', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (8, '2018-07-11 03:33:06.032411', '8d98c3cc-0fe3-4a76-aad8-31601f321e84', 'Java', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (9, '2018-07-11 03:33:14.103052', '98042082-75af-4e8c-91a1-9504fe792825', '测试', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (10, '2018-07-11 03:33:41.545285', '98042082-75af-4e8c-91a1-9504fe792825', '测试', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (11, '2018-07-11 03:38:44.469447', '46fda6f1-1289-451a-b7bb-ed18f58f0f53', '试一下', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (12, '2018-07-11 03:38:51.383430', '9b8bc9f8-ec48-4ee3-bc67-e229e0397bd3', '测一测', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (13, '2018-07-11 03:38:57.720464', '4738de10-442f-4323-af81-f459fccc9a82', '试一下', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (14, '2018-07-11 05:10:20.040643', '4738de10-442f-4323-af81-f459fccc9a82', '试一下', 3, '', 7, 1);
INSERT INTO `django_admin_log` VALUES (15, '2018-07-11 05:10:20.046237', '98042082-75af-4e8c-91a1-9504fe792825', '测试', 3, '', 7, 1);
INSERT INTO `django_admin_log` VALUES (16, '2018-07-11 05:10:38.017803', '9b8bc9f8-ec48-4ee3-bc67-e229e0397bd3', '测一测', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (17, '2018-07-11 05:10:38.021321', '8d98c3cc-0fe3-4a76-aad8-31601f321e84', 'Java', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (18, '2018-07-11 05:10:38.026561', '61782748-bd00-4b55-8cb7-6c690e5c5501', '测试', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (19, '2018-07-11 05:10:38.027884', '46fda6f1-1289-451a-b7bb-ed18f58f0f53', '试一下', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (20, '2018-07-11 05:54:57.128527', 'effd4af8-dde1-4ccb-942a-30b8e6577803', 'Redis', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (21, '2018-07-11 05:55:03.987811', '7d4611f0-2792-45e5-b114-db9bf97ec2da', 'Redis简介', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (22, '2018-07-11 05:56:05.226490', '7d4611f0-2792-45e5-b114-db9bf97ec2da', 'Redis简介', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (23, '2018-07-11 06:14:47.274998', '7d4611f0-2792-45e5-b114-db9bf97ec2da', 'Redis简介', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (24, '2018-07-11 06:27:36.791178', '7d4611f0-2792-45e5-b114-db9bf97ec2da', 'Redis简介', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (25, '2018-07-11 06:30:41.813955', '7d4611f0-2792-45e5-b114-db9bf97ec2da', 'Redis简介', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (26, '2018-07-11 06:32:16.333049', '7d4611f0-2792-45e5-b114-db9bf97ec2da', 'Redis简介', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (27, '2018-07-11 07:17:19.584535', 'a30916c9-95e3-4084-a781-0ed7a94c8129', 'Nginx', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (28, '2018-07-11 07:19:29.250700', '3d8652f7-023a-425e-a428-dbcfaf37db4d', 'Linux', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (29, '2018-07-11 07:19:32.075574', '18fdaadc-d9ba-4a8b-8458-69823c474f59', 'Nginx简介', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (30, '2018-07-11 07:30:37.558671', '18fdaadc-d9ba-4a8b-8458-69823c474f59', 'Nginx简介', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (31, '2018-07-11 07:35:19.125512', '126b8655-42f7-4d09-885b-5ab3c5c89240', 'Ubuntu', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (32, '2018-07-11 07:35:33.654364', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (33, '2018-07-11 07:36:06.273030', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (34, '2018-07-11 07:40:18.112022', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (35, '2018-07-11 07:41:46.084261', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (36, '2018-07-11 07:43:22.972312', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (37, '2018-07-11 07:49:37.712194', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (38, '2018-07-11 08:09:44.494094', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (39, '2018-07-11 08:11:42.160896', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (40, '2018-07-11 08:18:57.990258', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (41, '2018-07-12 01:31:53.099919', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并配置Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (42, '2018-07-12 01:35:23.791046', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (43, '2018-07-12 01:36:46.511188', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (44, '2018-07-12 01:46:22.082065', 'b9c2fa10-722d-4e86-915a-3b222ee6adc7', 'Nginx如何处理手机端和PC端跳转不同页面', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (45, '2018-07-12 02:20:42.326226', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (46, '2018-07-12 02:25:00.112528', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (47, '2018-07-12 02:29:57.081086', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (48, '2018-07-12 02:33:53.047063', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (49, '2018-07-12 02:34:53.710289', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (50, '2018-07-12 02:40:23.852497', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (51, '2018-07-12 02:40:46.616445', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (52, '2018-07-12 02:56:59.810558', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (53, '2018-07-12 02:57:21.284805', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (54, '2018-07-12 03:02:25.988407', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (55, '2018-07-12 03:03:42.015290', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (56, '2018-07-12 03:05:37.755199', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (57, '2018-07-12 05:38:39.511833', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx主配置文件nginx.conf', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (58, '2018-07-13 02:58:54.660277', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx主配置文件nginx.conf', 2, '[{\"changed\": {\"fields\": [\"content\", \"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (59, '2018-07-13 03:04:20.129792', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx主配置文件nginx.conf', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (60, '2018-07-13 03:34:26.245033', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx主配置文件nginx.conf', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (61, '2018-07-13 05:36:33.871471', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx主配置文件nginx.conf', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (62, '2018-07-13 05:41:20.576825', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx配置文件nginx.conf', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (63, '2018-07-13 06:02:45.181625', 'ec838fa8-35b4-4f95-ae3c-819f166ce6c2', 'Linux的一些零碎笔记(小知识, 快捷键及常用命令)', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (64, '2018-07-13 06:03:50.101788', 'ec838fa8-35b4-4f95-ae3c-819f166ce6c2', 'Linux零碎笔记(小知识, 快捷键及常用命令)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (65, '2018-07-13 06:17:18.424012', '9177a8e9-8a2c-4ed0-9ab2-6a057688faf5', 'Maven', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (66, '2018-07-13 06:17:23.376054', 'ffb5139d-2e4e-4682-aa00-41c93d208892', '几个可用的Maven仓库地址', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (67, '2018-07-13 06:20:19.509794', '813ba35f-2f80-439a-981f-551da2de5702', 'Docker', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (68, '2018-07-13 06:20:30.912880', '327acc92-bbd2-4971-ab1e-00b6efb0d8a0', 'Docker零碎笔记', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (69, '2018-07-13 06:20:48.157221', 'ec838fa8-35b4-4f95-ae3c-819f166ce6c2', 'Linux零碎笔记', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (70, '2018-07-13 06:21:00.186019', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx配置文件nginx.conf', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (71, '2018-07-13 06:21:08.499201', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (72, '2018-07-13 06:21:25.021130', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (73, '2018-07-13 06:21:59.859093', '0e91ed7d-b6fb-4460-acb5-67cc58e6f754', 'Nginx配置文件nginx.conf', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (74, '2018-07-13 06:22:10.567236', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (75, '2018-07-13 06:22:17.737206', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (76, '2018-07-13 06:25:48.418234', '7cf6f179-bdc2-4bca-9027-de3f995934ea', 'MySQL', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (77, '2018-07-13 06:25:56.996310', 'c103c384-4d95-4071-8536-8a580ab076dd', 'Mysql悲观锁', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (78, '2018-07-13 06:26:39.610062', '081d97cb-01ae-4661-8d0b-b59575e14bd1', 'MySQL乐观锁', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (79, '2018-07-13 06:28:20.861579', '52cd06ea-527f-49d7-bb2c-d144f37f7718', '报错', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (80, '2018-07-13 06:28:29.350481', '3e835232-6367-4d6d-aba8-bf62a2610c72', 'MySQL5.7group by 报错', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (81, '2018-07-13 06:29:36.416567', '592ee308-1964-4028-987c-52a90f2f5a94', 'MyBatis', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (82, '2018-07-13 06:29:46.298204', '065ede53-a766-46e4-98ad-a9adef5cfd63', 'MyBatis的mapper文件中#与$的用法', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (83, '2018-07-13 06:30:40.137656', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (84, '2018-07-13 06:43:39.728756', '880a439b-2e3a-43b3-881e-ded4f50f88ec', 'Java工具类', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (85, '2018-07-13 06:43:47.904100', 'bea32ea8-c9d4-47ce-9727-91cdc95116bc', 'Java后台获得客户端IP', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (86, '2018-07-13 07:10:50.659885', 'bea32ea8-c9d4-47ce-9727-91cdc95116bc', 'Java后台获得客户端IP', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (87, '2018-07-13 07:23:49.259864', '7f0c4ca1-ec19-4c33-963e-32b06fac535b', '获取Request和Response', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (88, '2018-07-13 07:50:57.029429', '0ab93147-1761-4525-96da-e9d1e92c70e2', 'Redis配置文件redis.conf', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (89, '2018-07-13 08:21:08.306343', 'd4bdd606-3793-4d2e-a51a-db23637cda2f', 'Linux上的MySQL设置区分大小写', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (90, '2018-07-13 08:27:01.893381', 'd4bdd606-3793-4d2e-a51a-db23637cda2f', 'Linux上的MySQL设置区分大小写', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (91, '2018-07-14 08:44:29.879799', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (92, '2018-07-14 13:07:03.487570', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (93, '2018-07-14 13:26:13.639655', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (94, '2018-07-14 13:29:46.274764', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (95, '2018-07-14 13:34:59.706979', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (96, '2018-07-14 13:37:25.101796', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (97, '2018-07-14 14:14:26.364203', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (98, '2018-07-14 14:16:03.956229', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (99, '2018-07-14 14:19:58.617526', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (100, '2018-07-14 14:28:53.045349', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (101, '2018-07-14 15:04:00.642337', '6be27b34-5cc4-4641-a1ff-deeb0fc9d98c', 'IDEA', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (102, '2018-07-14 15:04:50.299824', 'd60e6333-106e-442b-9934-113185c41561', 'IDEA用Tomcat部署时war和war exploded的区别', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (103, '2018-07-14 15:05:38.811221', 'd60e6333-106e-442b-9934-113185c41561', 'IDEA用Tomcat部署时war和war exploded的区别', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (104, '2018-07-14 15:06:43.413017', 'd60e6333-106e-442b-9934-113185c41561', 'IDEA用Tomcat部署时war和war exploded的区别', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (105, '2018-07-14 22:52:30.308348', 'b3a6ddcf-d18c-4dc7-bffa-ed855e1ae498', 'ANT', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (106, '2018-07-14 22:52:37.956626', 'dbd75279-7144-4477-bc0f-e7ef277e1dd6', 'ANT配置环境变量', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (107, '2018-07-14 22:59:04.294962', '41ee6006-8770-4b13-a21e-37a1e2fc4593', 'Java代码行数统计', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (108, '2018-07-14 23:04:06.489364', '0d66a898-fb50-4667-aa5d-5db4ad7d8ff2', 'Windows安装MySQL5.7.20报错', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (109, '2018-07-14 23:05:19.829600', '3e835232-6367-4d6d-aba8-bf62a2610c72', 'MySQL5.7GROUP BY报错', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (110, '2018-07-14 23:05:56.894045', '3e835232-6367-4d6d-aba8-bf62a2610c72', 'MySQL5.7语句GROUP BY报错', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (111, '2018-07-14 23:10:03.883333', '0d66a898-fb50-4667-aa5d-5db4ad7d8ff2', 'Windows安装MySQL5.7.20报错', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (112, '2018-07-14 23:12:32.050501', '0d66a898-fb50-4667-aa5d-5db4ad7d8ff2', 'Windows安装MySQL5.7.20报错', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (113, '2018-07-14 23:12:52.059253', '0d66a898-fb50-4667-aa5d-5db4ad7d8ff2', 'Windows安装MySQL5.7.20报错', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (114, '2018-07-14 23:13:35.059357', '0d66a898-fb50-4667-aa5d-5db4ad7d8ff2', 'Windows安装MySQL5.7.20报错', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (115, '2018-07-14 23:16:54.249720', '0d66a898-fb50-4667-aa5d-5db4ad7d8ff2', 'Windows安装MySQL5.7.20报错', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (116, '2018-07-14 23:17:47.741352', '7d4611f0-2792-45e5-b114-db9bf97ec2da', 'Redis简介', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (117, '2018-07-14 23:18:09.676155', '18fdaadc-d9ba-4a8b-8458-69823c474f59', 'Nginx简介', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (118, '2018-07-14 23:21:06.435359', 'ffb5139d-2e4e-4682-aa00-41c93d208892', '几个可用的Maven仓库地址', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (119, '2018-07-14 23:25:33.295564', '67f3546f-0b87-4f76-aeca-138fdf10358d', 'Eclipse', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (120, '2018-07-14 23:26:02.803884', '653cd06a-0bd0-4074-9fe9-2d4734cc6c24', 'Eclipse常用配置', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (121, '2018-07-15 00:10:58.667321', 'b50869fc-4bec-4f1b-a780-2f7dbc5e181c', 'Git', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (122, '2018-07-15 00:11:03.433421', '51d310ac-bc3d-474b-af3d-f988371f68d1', '.gitignore文件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (123, '2018-07-15 00:14:14.953722', '050901e2-f1ec-411a-8394-353296c46a7e', '上传本地项目到远程Git仓库', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (124, '2018-07-15 00:18:58.604132', '050901e2-f1ec-411a-8394-353296c46a7e', '上传本地项目到远程Git仓库', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (125, '2018-07-15 00:19:37.264257', '050901e2-f1ec-411a-8394-353296c46a7e', '通过命令行上传本地项目到远程Git仓库', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (126, '2018-07-15 02:28:27.077903', '050901e2-f1ec-411a-8394-353296c46a7e', '通过命令行使用Git', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (127, '2018-07-15 07:04:02.416903', '30798e0e-4cd1-400f-85f1-7d290cdb62f4', '通过Eclipse使用Git', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (128, '2018-07-16 02:00:48.635921', '30798e0e-4cd1-400f-85f1-7d290cdb62f4', '通过Eclipse使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (129, '2018-07-16 02:34:18.400502', '050901e2-f1ec-411a-8394-353296c46a7e', '通过命令行使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (130, '2018-07-16 02:34:48.776700', '050901e2-f1ec-411a-8394-353296c46a7e', '通过命令行使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (131, '2018-07-16 02:39:09.051091', '51d310ac-bc3d-474b-af3d-f988371f68d1', '.gitignore文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (132, '2018-07-16 02:51:00.599408', '050901e2-f1ec-411a-8394-353296c46a7e', '通过命令行使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (133, '2018-07-16 02:51:50.626121', '51d310ac-bc3d-474b-af3d-f988371f68d1', '.gitignore文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (134, '2018-07-16 03:08:58.821973', '30798e0e-4cd1-400f-85f1-7d290cdb62f4', '通过Eclipse使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (135, '2018-07-16 03:19:54.782558', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (136, '2018-07-16 03:36:12.777170', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都一样)', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (137, '2018-07-16 03:40:25.891800', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA快捷键', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (138, '2018-07-16 03:41:13.968264', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都类似)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (139, '2018-07-16 03:42:37.963129', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (140, '2018-07-16 05:03:55.824426', 'fb475e1e-6b4d-4fed-b65b-16d9fcea61e1', 'Java', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (141, '2018-07-16 05:04:03.972643', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (142, '2018-07-16 05:14:50.029048', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"content\", \"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (143, '2018-07-16 05:19:10.950295', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (144, '2018-07-16 05:20:43.413245', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (145, '2018-07-16 05:27:02.229683', 'c4af0e6c-4785-47db-9c10-dc788617fa66', 'Windows', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (146, '2018-07-16 05:27:06.575790', '3f9d3bea-949b-436d-925c-dd10382874bc', 'Windows如何新建以\".\"开头的文件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (147, '2018-07-16 05:55:26.724882', '8d080c1c-7b53-4965-8ab4-769ca6bea9e9', 'Windows配置JDK环境变量', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (148, '2018-07-16 05:56:49.472731', '8d080c1c-7b53-4965-8ab4-769ca6bea9e9', 'Windows配置JDK环境变量', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (149, '2018-07-16 07:11:31.976488', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (150, '2018-07-16 07:20:46.509065', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (151, '2018-07-16 07:24:47.918929', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (152, '2018-07-16 07:31:30.892261', '327acc92-bbd2-4971-ab1e-00b6efb0d8a0', 'Docker零碎笔记', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (153, '2018-07-16 07:38:40.472826', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (154, '2018-07-16 07:38:58.854073', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (155, '2018-07-16 07:46:41.793545', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (156, '2018-07-16 07:57:55.084691', 'd82d7a31-c939-407a-8673-260d6439f7dc', 'Dockerfile实现在centos7-jdk8容器中安装其他应用', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (157, '2018-07-16 07:58:59.447969', 'd82d7a31-c939-407a-8673-260d6439f7dc', 'Dockerfile实现在centos7-jdk8容器中安装应用(以libreoffice为例)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (158, '2018-07-16 08:38:39.029286', 'd82d7a31-c939-407a-8673-260d6439f7dc', 'Dockerfile实现在centos7-jdk8容器中安装应用(以libreoffice为例)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (159, '2018-07-16 08:41:18.985400', 'd82d7a31-c939-407a-8673-260d6439f7dc', 'Dockerfile实现在centos7-jdk8容器中安装应用(以libreoffice为例)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (160, '2018-07-16 08:56:44.237525', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (161, '2018-07-16 09:00:29.737041', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (162, '2018-07-17 00:51:34.294303', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (163, '2018-07-17 05:10:20.901563', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都类似)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (164, '2018-07-17 05:26:28.341517', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都类似)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (165, '2018-07-17 05:34:32.969422', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都类似)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (166, '2018-07-17 05:36:05.375382', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都类似)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (167, '2018-07-17 06:03:59.519772', 'c8e40dd7-4c6b-4ebb-823f-3f5743439bac', 'Nexus', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (168, '2018-07-17 06:04:30.200760', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (169, '2018-07-17 06:04:40.629233', '8c61f937-a520-4f15-8422-26851a14fa53', 'Python', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (170, '2018-07-17 06:05:09.517748', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (171, '2018-07-17 06:05:50.101529', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (172, '2018-07-17 06:06:36.308963', 'c17fd7f4-4eed-47ef-b849-4c3cad662517', 'Tomcat', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (173, '2018-07-17 06:06:40.507914', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (174, '2018-07-17 06:06:59.947198', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (175, '2018-07-17 06:07:23.872219', '57d76dc2-4d31-4403-88c6-dc068e262619', 'Jenkins', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (176, '2018-07-17 06:07:31.037145', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (177, '2018-07-17 06:08:51.911561', 'c8e40dd7-4c6b-4ebb-823f-3f5743439bac', 'Nexus', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (178, '2018-07-17 07:09:41.654379', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (179, '2018-07-17 07:35:32.816956', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (180, '2018-07-17 07:51:12.416782', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (181, '2018-07-17 08:36:35.877775', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (182, '2018-07-17 08:39:35.491316', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (183, '2018-07-18 00:41:45.911510', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (184, '2018-07-18 00:44:12.036006', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (185, '2018-07-18 00:44:36.433195', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (186, '2018-07-18 00:54:26.714396', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (187, '2018-07-18 00:55:01.648887', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (188, '2018-07-18 00:58:46.329496', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (189, '2018-07-18 00:59:00.770385', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (190, '2018-07-18 01:02:57.582543', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (191, '2018-07-18 01:04:58.647543', '05e53c83-3a5b-4b5a-870b-2a905a85c4b3', 'Jenkins配置用户权限', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (192, '2018-07-18 01:05:18.328194', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (193, '2018-07-18 01:08:12.514096', '05e53c83-3a5b-4b5a-870b-2a905a85c4b3', 'Jenkins配置用户权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (194, '2018-07-18 01:11:06.328489', '05e53c83-3a5b-4b5a-870b-2a905a85c4b3', 'Jenkins配置用户权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (195, '2018-07-18 01:11:59.849056', '05e53c83-3a5b-4b5a-870b-2a905a85c4b3', 'Jenkins配置用户权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (196, '2018-07-18 01:19:58.398553', '84045eb9-2020-45b5-9294-8ca0604f3b7e', 'Jenkins汉化', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (197, '2018-07-18 01:27:21.444653', '84045eb9-2020-45b5-9294-8ca0604f3b7e', 'Jenkins汉化', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (198, '2018-07-18 01:29:44.608978', '84045eb9-2020-45b5-9294-8ca0604f3b7e', 'Jenkins汉化', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (199, '2018-07-18 01:37:48.595007', '84045eb9-2020-45b5-9294-8ca0604f3b7e', 'Jenkins汉化', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (200, '2018-07-18 01:41:17.182102', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (201, '2018-07-18 01:48:04.758921', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (202, '2018-07-18 01:53:17.049029', '055ae804-b494-4028-a413-731e36b49aae', 'Windows安装Jenkins', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (203, '2018-07-18 01:58:05.800802', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (204, '2018-07-18 01:59:00.797745', '84045eb9-2020-45b5-9294-8ca0604f3b7e', 'Jenkins汉化', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (205, '2018-07-18 02:08:02.418841', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (206, '2018-07-18 02:18:24.284195', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (207, '2018-07-18 02:29:04.663641', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (208, '2018-07-18 02:47:42.639388', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (209, '2018-07-18 02:48:23.529934', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (210, '2018-07-18 02:48:40.454414', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (211, '2018-07-18 02:51:43.674462', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (212, '2018-07-18 03:20:10.697317', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (213, '2018-07-18 03:26:57.183699', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (214, '2018-07-18 03:48:30.648980', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (215, '2018-07-18 03:49:26.990101', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (216, '2018-07-18 04:00:27.790240', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (217, '2018-07-18 05:26:23.752148', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (218, '2018-07-18 06:17:54.657540', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (219, '2018-07-18 06:21:55.167041', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (220, '2018-07-18 06:22:53.609634', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (221, '2018-07-18 06:23:26.045541', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (222, '2018-07-18 06:23:54.405345', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (223, '2018-07-18 06:25:49.261900', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (224, '2018-07-18 06:28:08.738221', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (225, '2018-07-18 06:35:47.349536', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (226, '2018-07-18 07:14:31.935968', '3cf53d5d-7b4b-4128-abc7-869c44a4ae70', 'Linux下使用命令行导入, 导出MySQL数据库', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (227, '2018-07-18 07:15:22.712058', '72728d01-d4c7-4ef6-a772-30b0c5d4dd1f', '只作记录, 尚未理解', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (228, '2018-07-18 07:15:31.347571', '081d97cb-01ae-4661-8d0b-b59575e14bd1', 'MySQL乐观锁', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (229, '2018-07-18 07:15:40.670122', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (230, '2018-07-18 07:20:01.203364', 'd94d1bf9-1dc8-426f-b64e-29ac2440f9b6', 'MySQL中my.cnf的配置及说明', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (231, '2018-07-18 07:20:58.120163', 'd94d1bf9-1dc8-426f-b64e-29ac2440f9b6', 'MySQL中my.cnf的配置及说明', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (232, '2018-07-18 07:21:17.571719', '72728d01-d4c7-4ef6-a772-30b0c5d4dd1f', '只作记录, 尚未掌握', 2, '[{\"changed\": {\"fields\": [\"name\"]}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (233, '2018-07-18 07:23:28.279674', '2c2f6154-902b-4910-92e9-8a084651bdcf', 'Ubuntu安装MySQL', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (234, '2018-07-18 07:27:07.732241', '1269beb5-e2da-47d2-84d3-a27f42e14557', 'MySQL允许远程访问', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (235, '2018-07-18 07:30:44.181083', '38771e36-5481-437f-90ba-27903b5850a8', 'MySQL忘记密码解决方案', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (236, '2018-07-18 07:31:57.869259', '3cf53d5d-7b4b-4128-abc7-869c44a4ae70', 'Linux下使用命令行导入, 导出MySQL数据库', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (237, '2018-07-18 07:45:14.511597', '38771e36-5481-437f-90ba-27903b5850a8', 'MySQL忘记密码解决方案', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (238, '2018-07-18 07:45:43.158649', '38771e36-5481-437f-90ba-27903b5850a8', 'MySQL忘记密码解决方案', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (239, '2018-07-18 07:47:10.194920', '38771e36-5481-437f-90ba-27903b5850a8', 'MySQL忘记密码解决方案', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (240, '2018-07-18 07:49:37.560038', '38771e36-5481-437f-90ba-27903b5850a8', 'MySQL忘记密码解决方案', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (241, '2018-07-18 07:58:10.458479', '5598fc7a-5c15-4773-8ec1-f5dc03d52e93', 'RedHat7安装MySQL5.7.19', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (242, '2018-07-18 07:59:36.237063', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (243, '2018-07-18 07:59:47.388748', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (244, '2018-07-18 08:00:32.395334', '126b8655-42f7-4d09-885b-5ab3c5c89240', 'Ubuntu', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (245, '2018-07-18 08:01:01.598947', '5598fc7a-5c15-4773-8ec1-f5dc03d52e93', 'RedHat7安装MySQL5.7.19', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (246, '2018-07-18 08:09:35.398893', '5598fc7a-5c15-4773-8ec1-f5dc03d52e93', 'RedHat7安装MySQL5.7.19', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (247, '2018-07-18 08:31:13.151673', '5598fc7a-5c15-4773-8ec1-f5dc03d52e93', 'RedHat7安装MySQL5.7.19', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (248, '2018-07-18 08:55:34.578379', '5598fc7a-5c15-4773-8ec1-f5dc03d52e93', 'RedHat7安装MySQL5.7.19', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (249, '2018-07-18 08:56:42.378107', '5598fc7a-5c15-4773-8ec1-f5dc03d52e93', 'RedHat7安装MySQL5.7.19', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (250, '2018-07-19 00:58:28.217058', '79f4f2ae-e6ae-4e4d-b43b-fe350b8a6947', 'CSS', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (251, '2018-07-19 00:58:35.662048', '1fed2049-afb8-416a-ba3f-3e7633d8e938', 'CSS设置字体时乱码', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (252, '2018-07-19 00:59:23.940689', '1fed2049-afb8-416a-ba3f-3e7633d8e938', 'CSS设置字体时乱码', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (253, '2018-07-19 00:59:46.485327', '1fed2049-afb8-416a-ba3f-3e7633d8e938', 'CSS设置字体时乱码', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (254, '2018-07-19 02:06:04.222187', '4275e65d-147f-4f54-9ec3-b36f9494d73c', 'Ubuntu通过命令行连接WIFI', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (255, '2018-07-19 02:40:15.331016', '4275e65d-147f-4f54-9ec3-b36f9494d73c', 'Ubuntu通过命令行连接WIFI', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (256, '2018-07-19 03:11:10.530483', '4275e65d-147f-4f54-9ec3-b36f9494d73c', 'Ubuntu通过命令行连接WIFI', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (257, '2018-07-19 03:20:36.980936', 'e3401dc7-f343-4c60-80ad-39cc9b6fc88c', 'Linux重启后Tomcat自动启动', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (258, '2018-07-19 03:21:02.702119', 'e3401dc7-f343-4c60-80ad-39cc9b6fc88c', 'Linux重启后Tomcat自动启动', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (259, '2018-07-19 03:23:59.318097', 'cee5c72b-d496-46eb-9920-0087f69c8580', '虚拟机', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (260, '2018-07-19 03:24:17.601225', 'e3385c6b-8a1c-4e9b-b2c7-cbaf23a7218b', '虚拟机上的Tomcat无法被主机访问的问题', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (261, '2018-07-19 03:27:03.225369', 'cf97c2fd-f42e-4269-b8f1-c2c48783e172', 'Linux防火墙常用命令', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (262, '2018-07-19 03:44:10.293649', 'cf97c2fd-f42e-4269-b8f1-c2c48783e172', 'Linux防火墙常用命令', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (263, '2018-07-19 03:47:05.127357', 'cf97c2fd-f42e-4269-b8f1-c2c48783e172', 'Linux防火墙常用命令', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (264, '2018-07-19 05:08:02.443264', 'cf97c2fd-f42e-4269-b8f1-c2c48783e172', 'Linux防火墙常用命令', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (265, '2018-07-19 05:45:58.826547', 'cf97c2fd-f42e-4269-b8f1-c2c48783e172', 'Linux防火墙常用命令', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (266, '2018-07-19 06:02:51.181297', 'cf97c2fd-f42e-4269-b8f1-c2c48783e172', 'Linux防火墙常用命令', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (267, '2018-07-19 06:23:19.664428', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed.', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (268, '2018-07-19 06:23:49.040052', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed.', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (269, '2018-07-19 06:24:22.461093', 'd94d1bf9-1dc8-426f-b64e-29ac2440f9b6', 'MySQL中my.cnf的配置及说明', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (270, '2018-07-19 06:24:30.212495', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (271, '2018-07-19 06:24:36.788192', '081d97cb-01ae-4661-8d0b-b59575e14bd1', 'MySQL乐观锁', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (272, '2018-07-19 06:24:52.385488', '72728d01-d4c7-4ef6-a772-30b0c5d4dd1f', '只作记录, 尚未掌握', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (273, '2018-07-19 06:26:18.953742', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed.', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (274, '2018-07-19 06:28:57.590736', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed.', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (275, '2018-07-19 06:48:01.989915', '7e4f5698-064e-4b8a-aa54-7e9a8b7cea5c', 'Java项目连接MySQL时报错: \"The last packet sent successfully to the server was 0 milliseconds ago.\"', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (276, '2018-07-19 06:48:36.869039', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed. java.net.UnknownHostException', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (277, '2018-07-19 06:49:11.004864', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed...java.net.UnknownHostException...', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (278, '2018-07-19 06:50:54.522412', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed...java.net.UnknownHostException...', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (279, '2018-07-19 06:51:32.885123', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'tt', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (280, '2018-07-19 06:51:54.858863', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed...java.net.UnknownHostException...', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (281, '2018-07-19 06:52:19.112532', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed...java.net', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (282, '2018-07-19 06:52:44.416964', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed......java.net.UnknownHostException......', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (283, '2018-07-19 06:53:02.280914', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed...java.net.UnknownHostException...', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (284, '2018-07-19 06:53:48.767835', '7e4f5698-064e-4b8a-aa54-7e9a8b7cea5c', 'Java项目连接MySQL时报错: \"The last packet sent successfully to the server was 0 milliseconds ago.\"', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (285, '2018-07-19 06:54:21.011556', '5c998486-2ac4-4a3f-88c9-cc2931d8749c', 'Linux启动Java项目报错: Get local host name failed.java.net.UnknownHostException.', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (286, '2018-07-19 06:58:56.556830', '37bbd201-ffc1-4eac-94f3-2e02ea554d7d', 'Linux虚拟机桥接联网的配置文件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (287, '2018-07-19 07:02:29.095664', '9f5a94e9-f5ba-4b1d-bfcf-af9e292c3b3f', 'VMware安装VMwareTool', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (288, '2018-07-19 07:24:31.913136', '9f5a94e9-f5ba-4b1d-bfcf-af9e292c3b3f', 'VMware12安装VMwareTool', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (289, '2018-07-19 07:32:14.421062', '9f5a94e9-f5ba-4b1d-bfcf-af9e292c3b3f', 'VMware12安装VMwareTool', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (290, '2018-07-19 07:48:13.535220', '4b2d83c9-4497-4ce1-954e-88404732ce73', 'Log4j配置文件log4j.properties', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (291, '2018-07-19 07:51:38.359866', '2db302e9-6385-4f03-a410-768d692bf865', '插件', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (292, '2018-07-19 07:52:39.580524', '0ed3f9cd-5b17-4f9d-9e9e-eef983181740', 'Web打印插件Lodop', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (293, '2018-07-19 07:57:27.705625', '51183075-46e2-4526-81bf-9135153f8c70', 'Maven配置文件setting.xml', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (294, '2018-07-19 08:06:42.489239', 'b2e2be65-ec13-42ca-8c1e-ee4dc9bab95d', 'Windows的CMD从C盘跳转到其他磁盘', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (295, '2018-07-19 08:26:03.620293', '757dacda-fdc4-4f0c-8cc5-424b8914e4f8', 'Maven的配置和使用', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (296, '2018-07-19 08:47:40.381291', 'ca27648b-c68a-447e-b945-3016bccc30f0', 'Python程序执行机制', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (297, '2018-07-19 08:50:58.813304', '9aa30e40-0cac-4b9a-baa3-6ab07420991f', 'Django安装数据库', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (298, '2018-07-19 08:52:26.620092', 'c96b399e-31b9-4571-997c-791252b2e4d7', 'Django备份和恢复数据库', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (299, '2018-07-23 00:54:01.653689', '496b18fa-d36c-481a-a486-c87cc1b138f4', 'Spring', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (300, '2018-07-23 00:54:11.335886', 'c0cf6909-992b-4605-ba55-1bf2a18b72d4', '源码', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (301, '2018-07-23 00:54:38.980596', '2d755694-5061-483d-98fb-c7c16ddca3fe', '要扫描的controller包下的所有@Controller修饰的类及其方法, 若不写@RequestMapping, 则指定默认的url', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (302, '2018-07-23 01:02:40.479559', '2d755694-5061-483d-98fb-c7c16ddca3fe', '重写源码, 实现功能: 要扫描的controller包下的所有@Controller修饰的类及其方法, 若不写@RequestMapping, 则指定默认的url', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (303, '2018-07-23 02:00:18.325545', '3249e4df-543a-45d8-9309-084888e03591', '重写源码, 实现功能: MyBatis的mapper文件修改后, 不用重启服务器即可生效', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (304, '2018-07-23 02:27:51.513940', '8ff361b7-badf-489f-b072-903c2c0c641e', 'HTML', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (305, '2018-07-23 02:28:02.283068', 'b3106376-d26c-4fa5-8158-e0de4633ab1a', '自定义HTML页面的ioc图标', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (306, '2018-07-23 02:33:55.791547', '768ec5ff-0dc3-4083-941b-0e1149e9f482', 'Tomcat9需要配置环境变量', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (307, '2018-07-23 02:34:41.800034', '768ec5ff-0dc3-4083-941b-0e1149e9f482', 'Tomcat9需要配置环境变量', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (308, '2018-07-23 02:39:38.870032', 'cf5aeb9d-e71d-452e-81e0-5c5b6a94ffb1', 'Eclipse的Servers中无法发布Tomcat项目', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (309, '2018-07-23 03:09:09.050408', '31b1c8fc-0275-4b30-8850-3f6487d2ffb8', 'Eclipse的Tomcat项目热加载', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (310, '2018-07-23 03:10:23.306848', '31b1c8fc-0275-4b30-8850-3f6487d2ffb8', 'Eclipse的Tomcat项目热加载', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (311, '2018-07-23 03:12:47.563356', '31b1c8fc-0275-4b30-8850-3f6487d2ffb8', 'Eclipse的Tomcat项目热加载', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (312, '2018-07-23 03:14:29.721049', '31b1c8fc-0275-4b30-8850-3f6487d2ffb8', 'Eclipse的Tomcat项目热加载', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (313, '2018-07-23 03:15:50.355804', '31b1c8fc-0275-4b30-8850-3f6487d2ffb8', 'Eclipse的Tomcat项目热加载', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (314, '2018-07-23 03:23:24.392808', '82039534-6ede-4a41-a521-0fb6b0ea4c84', 'Win10卸载Windows Defender', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (315, '2018-07-23 03:26:54.749093', 'd813f0dd-8960-4a31-b2cc-2ad210e40ad4', 'Windows查找端口号被占用', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (316, '2018-07-23 03:35:55.380751', '48f4d7e0-cf86-41d1-89bd-2b212d14da9b', 'XMind快捷键', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (317, '2018-07-23 03:43:18.251205', '9eed816f-8fee-436f-b42b-22832814d4f7', 'Alibaba代码规范插件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (318, '2018-07-23 03:43:37.606664', '9eed816f-8fee-436f-b42b-22832814d4f7', 'Alibaba代码规范插件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (319, '2018-07-25 05:39:35.537210', '081d97cb-01ae-4661-8d0b-b59575e14bd1', 'MySQL乐观锁', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (320, '2018-07-25 05:39:53.584200', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (321, '2018-07-25 07:36:41.224355', '48f4d7e0-cf86-41d1-89bd-2b212d14da9b', 'XMind快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (322, '2018-07-25 07:45:23.924675', 'ca27648b-c68a-447e-b945-3016bccc30f0', 'Python程序执行机制', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (323, '2018-07-25 07:47:27.119716', '5598fc7a-5c15-4773-8ec1-f5dc03d52e93', 'RedHat7安装MySQL5.7.19', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (324, '2018-07-25 07:48:28.142926', 'b041a292-df8f-4500-8b29-9fd9ba8c594a', 'Ubuntu16.04上安装并启动Nginx', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (325, '2018-07-25 07:52:10.571819', '0252f91a-de22-45a1-a11c-5f65e7065e71', 'Jenkins自动部署Maven项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (326, '2018-07-25 07:53:17.558128', '84045eb9-2020-45b5-9294-8ca0604f3b7e', 'Jenkins汉化', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (327, '2018-07-25 07:53:58.298158', '05e53c83-3a5b-4b5a-870b-2a905a85c4b3', 'Jenkins配置用户权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (328, '2018-07-25 07:55:31.337163', '66a0aa39-a114-440f-a3ba-cd2489389e9e', '通过IDEA使用Git(IDEA, PyCharm, AndroidStudio等这些套路都类似)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (329, '2018-07-25 07:56:41.899094', '30798e0e-4cd1-400f-85f1-7d290cdb62f4', '通过Eclipse使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (330, '2018-07-25 07:58:02.660858', 'd60e6333-106e-442b-9934-113185c41561', 'IDEA用Tomcat部署时war和war exploded的区别', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (331, '2018-07-25 07:59:16.114471', 'e88dc9b4-952f-47e8-824f-e43b4eb2fddc', 'Maven将多项目合并成一个war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (332, '2018-07-25 07:59:50.379246', '661bd459-0cfb-4e58-9ed2-34ba3dd8b128', 'Nginx的一些默认目录及文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (333, '2018-07-26 00:43:39.956811', 'e79c1c02-26cd-4d78-9fb9-bf77a24e2e4f', '判断设备类型(PC, 手机等), 浏览器类型(IE, Google等)', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (334, '2018-07-26 00:48:31.758968', 'e79c1c02-26cd-4d78-9fb9-bf77a24e2e4f', '判断设备类型(PC, 手机等), 浏览器类型(IE, Google等)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (335, '2018-07-26 00:59:48.142235', 'e79c1c02-26cd-4d78-9fb9-bf77a24e2e4f', '判断设备类型(PC, 手机等), 浏览器类型(IE, Google等)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (336, '2018-07-26 01:01:46.007207', 'e79c1c02-26cd-4d78-9fb9-bf77a24e2e4f', '判断设备类型(PC, 手机等), 浏览器类型(IE, Google等)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (337, '2018-07-26 02:07:15.283071', 'e79c1c02-26cd-4d78-9fb9-bf77a24e2e4f', '判断设备类型(PC, 手机等), 浏览器类型(IE, Google等)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (338, '2018-07-26 02:17:56.425665', '66765477-f3be-4a44-bc52-7b835760ec70', 'Properties载入工具类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (339, '2018-07-26 02:28:28.549571', '1b91c23f-d0cf-48f2-8a49-ad3e77a1f834', '日期处理', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (340, '2018-07-26 02:36:11.652036', '58c05f16-98aa-4c87-8489-ff3fe1b6247f', '根据日期生成目录', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (341, '2018-07-26 02:38:35.089243', '58c05f16-98aa-4c87-8489-ff3fe1b6247f', '根据日期生成目录', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (342, '2018-07-26 03:01:01.459700', 'e3bb274a-988a-427c-a981-b1438afa789b', '根据附件名获得附件类型', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (343, '2018-07-26 03:04:33.226667', 'e3bb274a-988a-427c-a981-b1438afa789b', '根据附件名获得附件类型', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (344, '2018-07-26 05:37:46.402508', '78df6ea1-7bcb-47ac-b11a-81f6bd1f7fc0', '附件上传下载', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (345, '2018-07-26 06:56:01.844259', 'c54208e4-62a8-4f81-a094-34b9708e0736', '通过Java后台进行Http访问', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (346, '2018-07-26 07:02:53.123453', '1c6ba033-f8f8-4e90-8f85-da43df21366e', '获得UUID', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (347, '2018-07-26 07:13:46.888337', '1d03a20c-9da1-4631-abc7-36ea11c145a9', '将List乱序', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (348, '2018-07-26 08:09:07.303065', '9b463362-8b5a-49ae-9650-2fc76e2fa71f', '自定义异常类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (349, '2018-07-26 08:17:56.816275', 'd0aea702-485f-4c0c-972f-58fca49dc68e', '异常拦截处理', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (350, '2018-07-26 08:30:14.528058', 'fd29857c-4da2-412c-93f3-8f59654e3f30', '字符串首字母大写', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (351, '2018-07-26 08:55:30.824083', '1d03a20c-9da1-4631-abc7-36ea11c145a9', 'List乱序与按照汉字拼音排序', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (352, '2018-07-30 03:25:25.736444', '48fd1071-8c9d-4719-8263-f63f20a39287', 'Redis工具类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (353, '2018-07-30 08:12:33.804483', '3ae146bf-d6b6-41e1-a99f-83737b6dcdfe', 'Java报错: java.lang.UnsupportedOperationException', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (354, '2018-07-31 02:49:13.285018', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (355, '2018-07-31 02:49:19.232315', '081d97cb-01ae-4661-8d0b-b59575e14bd1', 'MySQL乐观锁', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (356, '2018-08-03 00:48:29.183680', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (357, '2018-08-03 01:21:57.391876', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (358, '2018-08-03 04:29:06.700962', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (359, '2018-08-06 01:59:01.581221', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (360, '2018-08-06 02:24:29.692511', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (361, '2018-08-06 06:04:31.494505', 'c103c384-4d95-4071-8536-8a580ab076dd', 'MySQL悲观锁', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (362, '2018-08-09 05:22:51.076136', '585768a3-3d09-4ed2-83c3-6f55e8fc2cde', 'Eclipse设置Java类和方法的注释模板', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (363, '2018-08-09 05:26:41.994305', '585768a3-3d09-4ed2-83c3-6f55e8fc2cde', 'Eclipse设置Java类和方法的注释模板', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (364, '2018-08-09 05:28:04.187524', '585768a3-3d09-4ed2-83c3-6f55e8fc2cde', 'Eclipse设置Java类和方法的注释模板', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (365, '2018-08-09 05:55:47.255989', '585768a3-3d09-4ed2-83c3-6f55e8fc2cde', 'Eclipse设置Java类和方法的注释模板', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (366, '2018-08-09 05:56:14.124645', '585768a3-3d09-4ed2-83c3-6f55e8fc2cde', 'Eclipse设置Java类和方法的注释模板', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (367, '2018-08-09 05:56:41.183426', '585768a3-3d09-4ed2-83c3-6f55e8fc2cde', 'Eclipse设置Java类和方法的注释模板', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (368, '2018-08-09 06:52:29.143688', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (369, '2018-08-09 06:56:12.838612', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (370, '2018-08-09 06:56:53.302880', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (371, '2018-08-09 07:13:23.043274', 'a1bff6c2-a061-4f3a-b045-9555eb46f068', '判断是否是中文', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (372, '2018-08-13 00:43:57.946874', '5a7e299f-7496-4413-94b5-13acfc8a7853', 'Web响应信息工具类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (373, '2018-08-13 01:11:53.008776', 'd0aea702-485f-4c0c-972f-58fca49dc68e', '异常拦截处理', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (374, '2018-08-13 01:23:42.415300', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (375, '2018-08-13 01:25:54.854784', 'cad959b6-0c60-4051-a67a-45e9d9b80d24', 'Cookie工具类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (376, '2018-08-13 01:26:44.945072', 'cad959b6-0c60-4051-a67a-45e9d9b80d24', 'Cookie工具类', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (377, '2018-08-13 01:31:37.430900', '1b91c23f-d0cf-48f2-8a49-ad3e77a1f834', '日期处理', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (378, '2018-08-13 01:36:34.316686', 'c54208e4-62a8-4f81-a094-34b9708e0736', 'HttpClient工具类(通过Java后台进行Http访问)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (379, '2018-08-13 01:44:25.612407', 'fa4de7d3-0f24-4909-82f9-916e30bdd50d', '分页工具类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (380, '2018-08-13 02:34:49.007061', '12ea83e2-7c5d-43d1-80b9-86d4ec534604', 'SQL查询工具类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (381, '2018-08-13 02:48:05.934701', '4124fad1-f97b-4af9-8ccc-92dba218033c', 'Mabatis字段下划线自动转换为驼峰', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (382, '2018-08-13 03:10:14.639944', '05803bd0-48be-417a-b4ae-cac505fb5d9c', 'Shiro工具类', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (383, '2018-08-13 03:21:04.571794', '59c92df2-5773-494d-aaa1-89ee5296a9e4', 'SpringContext', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (384, '2018-08-13 03:21:32.446200', '59c92df2-5773-494d-aaa1-89ee5296a9e4', 'SpringContext工具类', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (385, '2018-08-14 02:40:44.248368', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (386, '2018-08-20 03:34:12.864978', '183c1b61-f6f1-45a4-9040-822496643531', '@Controller和@RestController的区别', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (387, '2018-08-20 05:07:45.372427', '183c1b61-f6f1-45a4-9040-822496643531', '@Controller和@RestController的区别', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (388, '2018-08-20 05:53:44.677274', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (389, '2018-08-20 06:28:28.624340', '989a93c1-710b-4e5b-af36-5e0184c7b540', '将ID等请求参数当做请求URL', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (390, '2018-08-21 07:44:03.921136', '96201737-cc98-41ae-8ee9-1c4104777141', '面试准备', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (391, '2018-08-21 07:44:14.451959', '2879ba32-a21e-4371-b7a1-c7a221db38d0', 'Java类加载器ClassLoader', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (392, '2018-08-21 07:54:01.772977', '2879ba32-a21e-4371-b7a1-c7a221db38d0', 'Java类加载器ClassLoader', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (393, '2018-08-21 07:55:58.149877', '2879ba32-a21e-4371-b7a1-c7a221db38d0', 'Java类加载器ClassLoader', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (394, '2018-08-21 08:05:57.838615', 'e968280d-25fb-4d32-90e8-3afb71132259', 'JVM', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (395, '2018-08-21 08:06:27.755841', '2879ba32-a21e-4371-b7a1-c7a221db38d0', 'Java类加载器ClassLoader', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (396, '2018-08-21 08:08:17.482858', '2879ba32-a21e-4371-b7a1-c7a221db38d0', 'Java类加载器ClassLoader', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (397, '2018-08-21 08:27:13.196018', '2879ba32-a21e-4371-b7a1-c7a221db38d0', '面试题', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\", \"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (398, '2018-08-21 08:27:32.859384', '96201737-cc98-41ae-8ee9-1c4104777141', '面试', 2, '[{\"changed\": {\"fields\": [\"name\"]}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (399, '2018-08-21 08:37:14.814976', '2879ba32-a21e-4371-b7a1-c7a221db38d0', '面试题', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (400, '2018-08-21 08:49:08.825635', '2879ba32-a21e-4371-b7a1-c7a221db38d0', '面试题', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (401, '2018-08-21 08:55:36.620227', '2879ba32-a21e-4371-b7a1-c7a221db38d0', '面试题', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (402, '2018-08-21 09:00:03.084284', '2879ba32-a21e-4371-b7a1-c7a221db38d0', '面试题', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (403, '2018-08-22 08:35:56.010970', '2879ba32-a21e-4371-b7a1-c7a221db38d0', '面试题', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (404, '2018-08-28 23:05:17.693259', 'beb0c4b1-3163-4349-99fa-273474fabef6', 'ActiveMQ', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (405, '2018-08-28 23:05:23.816695', 'db6b319e-a27a-4a0f-8882-b046dad6c228', 'Apache ActiveMQ', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (406, '2018-08-28 23:29:06.535389', 'db6b319e-a27a-4a0f-8882-b046dad6c228', 'Apache ActiveMQ', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (407, '2018-08-28 23:32:48.146976', 'db6b319e-a27a-4a0f-8882-b046dad6c228', 'Apache ActiveMQ', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (408, '2018-08-28 23:40:43.159190', 'db6b319e-a27a-4a0f-8882-b046dad6c228', 'Apache ActiveMQ', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (409, '2018-08-30 02:00:02.231879', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (410, '2018-09-02 22:16:34.637107', 'b0e2059c-7be5-4038-916e-7a2edd87d05d', 'Win10添加开机启动项', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (411, '2018-09-02 22:17:49.432615', 'b0e2059c-7be5-4038-916e-7a2edd87d05d', 'Win10手动添加开机启动项', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (412, '2018-09-02 22:20:06.830734', 'b3a6ddcf-d18c-4dc7-bffa-ed855e1ae498', 'Ant', 2, '[{\"changed\": {\"fields\": [\"name\"]}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (413, '2018-09-02 22:20:34.770807', 'dbd75279-7144-4477-bc0f-e7ef277e1dd6', 'Ant配置环境变量', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (414, '2018-09-02 22:50:46.605943', '790a7a38-e5b5-4457-ada9-f414264add38', 'Eclipse中properties文件中文乱码', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (415, '2018-09-02 22:51:13.368684', '790a7a38-e5b5-4457-ada9-f414264add38', 'Eclipse的properties文件中文乱码', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (416, '2018-09-03 00:14:26.671811', '66765477-f3be-4a44-bc52-7b835760ec70', 'Properties载入工具类', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (417, '2018-09-06 05:30:25.292633', '5417c724-dd43-485e-895d-3160e7221c7b', 'Java后端解决跨域问题', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (418, '2018-09-07 05:58:46.491193', '4c0d58c7-6568-4c4d-beb8-82e5d2dade2e', 'Oracle', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (419, '2018-09-07 05:59:24.691205', 'be38f487-687a-4aa8-8368-f03822c99163', 'Navicat无法连接Oracle', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (420, '2018-09-07 06:15:25.836721', 'be38f487-687a-4aa8-8368-f03822c99163', 'Navicat无法连接Oracle', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (421, '2018-09-08 01:29:37.297745', 'c61cd11a-44f4-4f37-9481-84048ea4c664', 'SpringBoot', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (422, '2018-09-08 01:29:58.658237', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (423, '2018-09-08 01:33:11.308459', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (424, '2018-09-08 01:41:40.331923', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (425, '2018-09-08 02:07:10.459387', '509f59ef-d31e-4d8d-ab0a-c41eadf46f70', '设计模式', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (426, '2018-09-08 02:07:19.269196', 'b99153b4-aecc-4f1c-ad82-e48c12a1e5ce', '单例模式', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (427, '2018-09-08 02:24:24.730036', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (428, '2018-09-08 02:43:11.826611', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (429, '2018-09-08 07:27:32.253499', '58b6b745-edc1-4d84-8e79-10a1b5d7d223', '将Spring的Been注入到静态工具类中', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (430, '2018-09-08 07:33:10.793820', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (431, '2018-09-08 10:54:59.809628', '33d34504-c8b1-45f5-97ee-ba81501d6dc9', '使用FastJson时报错', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (432, '2018-09-10 09:40:51.779149', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (433, '2018-09-10 09:44:34.693432', '0f9a0c46-b493-4e87-85d9-9b73e86d4f97', 'SpringBoot使用注解设置Redis缓存', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (434, '2018-09-10 10:15:02.142723', '050901e2-f1ec-411a-8394-353296c46a7e', '通过命令行使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (435, '2018-09-11 09:20:35.650138', '4e8e4c47-ff38-4915-b3ee-d1c70852b7a8', '如何Ping固定端口号', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (436, '2018-09-11 10:06:27.504470', '1269beb5-e2da-47d2-84d3-a27f42e14557', 'MySQL无法连接', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (437, '2018-09-11 10:08:35.869307', '1269beb5-e2da-47d2-84d3-a27f42e14557', 'MySQL无法连接', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (438, '2018-09-12 12:55:26.007106', 'b67d7178-7610-4b5f-aa45-85e975c7dd13', 'kettle', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (439, '2018-09-12 12:55:31.532263', '46051cbb-af46-4349-978f-3a623603c26f', 'Kettle报错: Unexpected problem reading shared objects from XML file:null', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (440, '2018-09-12 12:56:48.811285', '46051cbb-af46-4349-978f-3a623603c26f', 'Kettle报错: Unexpected problem reading shared objects from XML file:null', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (441, '2018-09-12 13:02:32.343033', '1ab74d32-dd8b-4142-b15f-fe6d37ffdf7e', '阿里云的Linux报错: sudo: unable to resolve host [hostname]', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (442, '2018-09-12 13:02:50.997419', '1ab74d32-dd8b-4142-b15f-fe6d37ffdf7e', '阿里云的Linux报错: sudo: unable to resolve host [hostname]', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (443, '2018-09-12 13:11:10.435653', '46fdfe42-afd6-4c1c-9a3c-1564c8b2a2dd', 'Java, Kettle, Jenkins等第三方插件执行Linux的sudo命令时报错: sudo: no tty present and no askpass program specified', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (444, '2018-09-12 13:13:35.269514', '1ab74d32-dd8b-4142-b15f-fe6d37ffdf7e', '阿里云的Linux报错: sudo: unable to resolve host [hostname]', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (445, '2018-09-12 13:37:43.871870', '25ff0646-8e6c-4300-a4b5-6424e8ef34c4', '如何将Kettle日志输出到文件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (446, '2018-09-12 13:57:47.227897', '25ff0646-8e6c-4300-a4b5-6424e8ef34c4', '如何将Kettle日志输出到文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (447, '2018-09-13 03:17:19.087610', 'a67166d8-b298-4185-a6b0-e2f96690ced7', '使用Tomcat时, 请求参数带大括号, 返回400', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (448, '2018-09-13 12:35:35.342137', '46051cbb-af46-4349-978f-3a623603c26f', 'Kettle报错: Unexpected problem reading shared objects from XML file:null', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (449, '2018-09-14 00:53:07.946664', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (450, '2018-09-14 01:03:24.938598', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (451, '2018-09-14 01:06:56.406291', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (452, '2018-09-14 01:11:56.822783', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (453, '2018-09-14 01:20:23.912981', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (454, '2018-09-14 01:27:59.163233', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (455, '2018-09-14 01:29:38.714941', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (456, '2018-09-14 01:32:07.649516', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (457, '2018-09-14 01:35:43.809564', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (458, '2018-09-14 02:08:50.589589', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (459, '2018-09-14 02:42:09.132792', '1fbf5eb8-4731-4a8b-afaf-581beaf90b64', 'Quartz定时器框架和Java自带Timer定时器区别', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (460, '2018-09-14 02:42:55.734202', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (461, '2018-09-14 03:11:55.410929', '7066d496-355d-41a0-b15f-1e7bf172f69b', 'Sublime安装自动识别编码插件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (462, '2018-09-14 03:13:21.522195', '7066d496-355d-41a0-b15f-1e7bf172f69b', 'Sublime安装自动识别编码插件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (463, '2018-09-14 03:34:13.621150', '25ff0646-8e6c-4300-a4b5-6424e8ef34c4', '将Kettle日志输出到文件', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (464, '2018-09-16 06:19:47.761284', '98b68fee-b472-4c8e-8c11-51ebd312d779', 'Kettle零碎知识', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (465, '2018-09-16 06:48:09.171300', '3a72a10d-f2a5-456c-b8f1-f53462f66250', 'Oracle的sysdate和系统时间不一致', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (466, '2018-09-18 07:50:27.647868', 'be38f487-687a-4aa8-8368-f03822c99163', 'Navicat无法连接Oracle', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (467, '2018-09-20 04:15:29.128295', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (468, '2018-09-20 07:14:09.244905', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (469, '2018-09-20 07:15:43.322871', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (470, '2018-09-21 02:45:43.752204', 'be38f487-687a-4aa8-8368-f03822c99163', 'Navicat无法连接Oracle', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (471, '2018-09-21 03:08:55.938540', 'be38f487-687a-4aa8-8368-f03822c99163', 'Navicat无法连接Oracle', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (472, '2018-09-21 08:10:09.800452', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (473, '2018-09-21 08:11:13.004435', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (474, '2018-09-22 02:10:41.952357', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (475, '2018-09-27 13:39:32.757114', '0fb8071f-3756-45e0-bb6e-c344cdcc03d9', 'Eclipse安装Subversion', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (476, '2018-09-28 03:01:23.488947', 'be38f487-687a-4aa8-8368-f03822c99163', 'Navicat无法连接Oracle', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (477, '2018-10-08 12:25:23.719530', '050901e2-f1ec-411a-8394-353296c46a7e', '通过命令行使用Git', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (478, '2018-10-08 13:48:06.677028', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (479, '2018-10-08 13:52:06.235813', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (480, '2018-10-08 13:52:56.597441', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (481, '2018-10-08 13:57:05.052098', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (482, '2018-10-08 14:04:24.528425', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (483, '2018-10-08 14:26:13.688244', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (484, '2018-10-20 23:36:18.275046', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (485, '2018-10-20 23:52:04.651942', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (486, '2018-10-20 23:57:36.277293', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (487, '2018-10-21 00:01:44.649026', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (488, '2018-10-21 00:12:48.050977', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (489, '2018-10-21 00:30:28.532675', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (490, '2018-10-21 01:15:13.601432', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (491, '2018-10-21 01:25:37.716070', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (492, '2018-10-21 01:29:00.428101', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (493, '2018-10-21 02:03:10.581943', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (494, '2018-10-21 02:13:19.578232', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (495, '2018-10-21 02:17:16.063471', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (496, '2018-10-21 02:18:50.046361', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (497, '2018-10-21 02:19:47.148462', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (498, '2018-10-21 02:38:56.705940', '84746859-8b47-459f-87a7-227f22e8c785', '项目整合Quartz', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (499, '2018-10-21 02:41:00.751883', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (500, '2018-10-21 02:41:24.100677', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (501, '2018-10-21 02:41:59.027381', '19a99046-f565-4a8c-b90a-f6213d782378', 'Quartz的Cron表达式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (502, '2018-10-21 03:19:24.348184', '84746859-8b47-459f-87a7-227f22e8c785', '项目整合Quartz', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (503, '2018-10-21 03:25:24.719407', '84746859-8b47-459f-87a7-227f22e8c785', '项目整合Quartz', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (504, '2018-10-21 03:37:57.522131', '84746859-8b47-459f-87a7-227f22e8c785', '项目整合Quartz', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (505, '2018-10-21 03:38:50.768121', '84746859-8b47-459f-87a7-227f22e8c785', '项目整合Quartz', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (506, '2018-10-21 03:49:24.597635', '8a56c25d-2a1e-4c5d-9384-9167f73be908', 'Java动态编程(动态生成.class文件)', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (507, '2018-10-21 05:58:56.877218', '4b695aab-7cfc-4b52-96b9-afc381495da4', 'Java 通过IP获取对应的国家省份城市经纬度(离线文件方案)', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (508, '2018-10-21 06:17:05.185897', 'd5129020-b19f-4e63-a502-ac65bc111f19', 'ORA-01810: 格式代码出现两次', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (509, '2018-10-21 06:31:51.947512', '3279ad93-a719-4ede-9e62-35515c9f4830', 'Oracle递归查询树结构', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (510, '2018-10-21 06:32:42.391662', '3279ad93-a719-4ede-9e62-35515c9f4830', 'Oracle递归查询树结构', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (511, '2018-10-21 06:41:33.788139', '873e23f9-fcda-4188-a767-011223e07ef4', 'SpringBoot上传文件大小限制', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (512, '2018-10-21 06:47:13.541527', 'aa40284a-7500-44ca-a39f-e8c41b6fbaf1', 'Oracle排序并分组后取每一组第一条数据', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (513, '2018-10-21 07:00:32.843423', '4fa9ad7b-1014-4910-a4d8-234bd439a5e3', 'Oracle角色与权限', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (514, '2018-10-21 07:05:33.275586', '4fa9ad7b-1014-4910-a4d8-234bd439a5e3', 'Oracle角色与权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (515, '2018-10-21 08:34:10.250836', '4fa9ad7b-1014-4910-a4d8-234bd439a5e3', 'Oracle角色与权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (516, '2018-10-21 08:36:14.129713', '4fa9ad7b-1014-4910-a4d8-234bd439a5e3', 'Oracle角色与权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (517, '2018-10-21 08:42:38.052140', '4fa9ad7b-1014-4910-a4d8-234bd439a5e3', 'Oracle角色与权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (518, '2018-10-21 08:45:00.924484', '4fa9ad7b-1014-4910-a4d8-234bd439a5e3', 'Oracle角色与权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (519, '2018-10-21 08:45:34.941788', '4fa9ad7b-1014-4910-a4d8-234bd439a5e3', 'Oracle角色与权限', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (520, '2018-10-21 08:52:32.831109', '8c3ad349-aaec-45d1-a841-f2ec5215cd84', '查看Oracle当前连接数和允许的最大连接数', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (521, '2018-10-21 08:56:26.837916', '8c3ad349-aaec-45d1-a841-f2ec5215cd84', '查看Oracle当前连接数和允许的最大连接数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (522, '2018-10-21 09:42:38.318725', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (523, '2018-10-21 09:48:46.590554', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (524, '2018-10-21 09:54:39.238408', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (525, '2018-10-21 09:56:08.626133', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (526, '2018-10-22 00:40:41.722657', '5ee6a273-3168-4273-a3dc-cfd6591dbcc4', '2018.2.4版本IDEA无法连接SVN', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (527, '2018-10-22 00:51:44.027885', '5ee6a273-3168-4273-a3dc-cfd6591dbcc4', '2018.2.4版本IDEA无法连接SVN', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (528, '2018-10-22 00:52:57.972960', '5ee6a273-3168-4273-a3dc-cfd6591dbcc4', '2018.2.4版本IDEA无法连接SVN', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (529, '2018-10-22 00:53:27.571778', '5ee6a273-3168-4273-a3dc-cfd6591dbcc4', '2018.2.4版本IDEA无法连接SVN', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (530, '2018-10-22 01:11:20.050928', '292e0df3-f11b-46d6-acf3-8fe73b274ab9', 'IDEA如何进行ignore文件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (531, '2018-10-22 01:12:41.107205', '292e0df3-f11b-46d6-acf3-8fe73b274ab9', 'IDEA如何进行ignore文件', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (532, '2018-10-22 01:18:41.456465', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA中Web Application:Exploded和Web Application:Archive的区别与配置', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (533, '2018-10-22 01:24:13.853110', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA中Web Application Exploded和Web Application Archive的区别与配置', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (534, '2018-10-23 01:16:20.712160', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA中Web Application Exploded和Web Application Archive的区别与配置', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (535, '2018-10-23 01:27:05.539718', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA中Web Application Exploded和Web Application Archive的区别与配置', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (536, '2018-10-23 01:49:27.884327', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA中Web Application Exploded和Web Application Archive的区别与配置', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (537, '2018-10-23 08:37:07.320203', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA中Web Application Exploded和Web Application Archive的区别与配置', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (538, '2018-10-23 08:49:35.969877', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA中Web Application Exploded和Web Application Archive的区别与配置', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (539, '2018-10-23 08:50:04.274009', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (540, '2018-10-23 08:59:59.025058', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (541, '2018-10-23 09:12:33.766957', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (542, '2018-10-23 09:20:04.291983', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (543, '2018-10-23 09:24:05.425903', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (544, '2018-10-23 10:39:20.089239', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (545, '2018-10-23 10:46:46.716318', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (546, '2018-10-23 10:57:41.700999', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (547, '2018-10-23 23:52:23.831145', 'f28a2fa5-b91b-4b45-9359-39da1b2daab9', 'Java发送Get和Post请求(HttpClient)', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (548, '2018-10-24 00:50:13.300985', '129c0172-edaf-47a3-92de-9c7ee014a1ff', 'Oracle动态语句', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (549, '2018-10-24 01:48:02.362308', '781f6d89-bfad-49e9-9ca6-31a17f754db9', 'Java执行Bat命令(或其他命令)', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (550, '2018-10-24 01:56:00.713792', '781f6d89-bfad-49e9-9ca6-31a17f754db9', 'Java执行Bat命令(或其他命令)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (551, '2018-10-24 01:58:13.622207', '781f6d89-bfad-49e9-9ca6-31a17f754db9', 'Java执行Bat命令(或其他命令)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (552, '2018-10-24 06:02:39.585569', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (553, '2018-10-24 07:28:19.839330', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (554, '2018-10-24 07:40:48.831111', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (555, '2018-10-24 07:46:14.923804', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (556, '2018-10-24 07:48:25.424271', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (557, '2018-10-24 07:56:40.285943', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (558, '2018-10-24 08:02:57.531794', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (559, '2018-10-24 08:05:21.284813', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (560, '2018-10-24 08:07:44.844831', '5a1e008d-b75a-4660-8af9-34a68dbab642', '使用Kitchen.bat执行kettle时传递参数', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (561, '2018-10-24 08:23:06.313084', '6ad3d4aa-18b1-41c7-a34d-a503fc89e1d6', '不使用Request获得Web项目的全路径', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (562, '2018-10-24 08:23:52.395702', '6ad3d4aa-18b1-41c7-a34d-a503fc89e1d6', '不使用Request获得Web项目的全路径', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (563, '2018-10-24 08:24:57.131827', '6ad3d4aa-18b1-41c7-a34d-a503fc89e1d6', '不使用Request获得Web项目的全路径', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (564, '2018-10-24 08:31:42.680617', '6ad3d4aa-18b1-41c7-a34d-a503fc89e1d6', '不使用Request获得Web项目的全路径', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (565, '2018-10-24 08:32:52.514767', 'aecae1e0-441e-47f1-892b-84ca03229fe2', '下划线与驼峰相互转换', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (566, '2018-10-24 09:48:44.776503', 'c96d43f4-d68e-401f-8077-82dd85ecfb28', 'Map的LinkedCaseInsensitiveMap和CaseInsensitiveMap', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (567, '2018-10-24 09:55:45.657329', '8ef8f543-e310-4458-95ae-a2a74c099447', 'Java报错: SEVERE: Unable to process Jar entry [......]for annotations java.io.EOFException', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (568, '2018-10-24 12:53:57.118503', '8ef8f543-e310-4458-95ae-a2a74c099447', 'Java报错: SEVERE: Unable to process Jar entry [......]for annotations java.io.EOFException', 2, '[{\"changed\": {\"fields\": [\"content\", \"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (569, '2018-10-24 12:55:24.480823', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (570, '2018-11-01 04:04:09.721943', '60b645d6-8495-48bc-8b9d-b288d4fc48ec', '将Tomcat注册为Windows服务', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (571, '2018-11-01 06:28:01.468794', 'f80d9234-3f1c-4337-b290-6e683b652cb1', 'Oracle定时任务', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (572, '2018-11-01 06:47:49.672954', 'f80d9234-3f1c-4337-b290-6e683b652cb1', 'Oracle定时任务', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (573, '2018-11-02 03:08:25.534681', '0ac1909e-b369-4ede-a3a4-9f9db40a6833', 'IDEA发布Web项目', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (574, '2018-11-02 05:26:00.210649', '08089747-8c49-4a3e-93c6-afc5e045472e', 'log4j.properties文件', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (575, '2018-11-02 06:22:48.544501', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (576, '2018-11-02 09:51:04.088050', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (577, '2018-11-05 06:41:48.360108', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (578, '2018-11-05 06:41:58.818521', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (579, '2018-11-05 06:48:40.890097', '82039534-6ede-4a41-a521-0fb6b0ea4c84', 'Win10关闭Windows Defender', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (580, '2018-11-05 06:50:00.252371', '82039534-6ede-4a41-a521-0fb6b0ea4c84', 'Win10关闭Windows Defender', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (581, '2018-11-05 08:53:42.960421', 'eda6ab54-58dd-496a-be54-b2d44bd690c4', '某类型文件设置默认打开软件不成功(例: Sublime默认打开txt文件设置不成功)', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (582, '2018-11-05 09:12:11.692703', 'eda6ab54-58dd-496a-be54-b2d44bd690c4', '某类型文件设置默认打开软件不成功(例: Sublime默认打开txt文件设置不成功)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (583, '2018-11-05 09:18:59.161315', 'eda6ab54-58dd-496a-be54-b2d44bd690c4', '某类型文件设置默认打开软件不成功(例: Sublime默认打开txt文件设置不成功)', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (584, '2018-11-05 09:21:12.596560', '60b645d6-8495-48bc-8b9d-b288d4fc48ec', '将Tomcat注册为Windows服务', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (585, '2018-11-06 05:20:26.652263', '5ee6a273-3168-4273-a3dc-cfd6591dbcc4', '2018.2.4版本IDEA无法连接SVN', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (586, '2018-11-13 02:01:54.310428', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (587, '2018-11-13 02:02:16.195274', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (588, '2018-11-13 02:08:24.775291', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (589, '2018-11-13 02:11:23.588292', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (590, '2018-11-13 02:21:33.904322', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (591, '2018-11-14 10:06:23.927309', '0c1f8ec4-9779-447a-a8c1-dfc973a2578e', '观察者模式', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (592, '2018-11-14 10:13:01.529472', '0c1f8ec4-9779-447a-a8c1-dfc973a2578e', '观察者模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (593, '2018-11-14 11:34:10.040602', '0c1f8ec4-9779-447a-a8c1-dfc973a2578e', '观察者模式', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (594, '2018-11-14 11:38:57.972661', '0c1f8ec4-9779-447a-a8c1-dfc973a2578e', '观察者模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (595, '2018-11-14 11:39:36.611105', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (596, '2018-11-14 11:47:05.337949', '0c1f8ec4-9779-447a-a8c1-dfc973a2578e', '观察者模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (597, '2018-11-15 08:39:11.369289', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (598, '2018-11-15 08:56:59.281596', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (599, '2018-11-15 09:07:19.831651', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (600, '2018-11-15 09:17:28.311670', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (601, '2018-11-15 09:19:57.474934', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (602, '2018-11-15 09:21:19.735268', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (603, '2018-11-15 09:23:42.433679', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (604, '2018-11-16 00:33:34.497860', 'b99153b4-aecc-4f1c-ad82-e48c12a1e5ce', '单例模式(Singleton Pattern)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (605, '2018-11-16 00:37:22.041587', 'ba266149-590e-4f8c-a9ac-8958c0ce5efa', '策略模式(Strategy Pattern)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (606, '2018-11-16 00:38:39.917585', '0c1f8ec4-9779-447a-a8c1-dfc973a2578e', '观察者模式(Observer Pattern)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (607, '2018-11-16 00:39:12.514695', 'bf4da0e6-8964-411d-a7a9-3a3766853ad2', '代理模式(Proxy Pattern)', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (608, '2018-11-20 08:36:05.155217', '87837d25-a919-43e3-8114-76f53fcf6fc2', 'Eclipse快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (609, '2018-11-20 08:46:54.678479', 'def79b38-f40d-4d4c-87f7-c80947e37f8c', 'Tomcat启动报错: Unsupported major.minor version 52.0', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (610, '2018-11-20 08:47:45.173531', 'def79b38-f40d-4d4c-87f7-c80947e37f8c', 'Tomcat启动报错: Unsupported major.minor version 52.0', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (611, '2018-11-20 10:03:10.584864', '60b645d6-8495-48bc-8b9d-b288d4fc48ec', '将Tomcat注册为Windows服务', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (612, '2018-11-20 10:04:56.825178', '60b645d6-8495-48bc-8b9d-b288d4fc48ec', '将Tomcat注册为Windows服务', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (613, '2018-11-20 10:23:24.432576', '0ad209e0-8fea-4615-8a93-8b55862c6b68', 'Lucene对拼音搜索的支持', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (614, '2018-11-20 10:25:46.134776', '0ad209e0-8fea-4615-8a93-8b55862c6b68', 'Lucene对拼音搜索的支持', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (615, '2018-11-20 23:04:51.005630', '3e212bcc-52fc-4c04-8b59-0b1b03a5d6d3', '装饰者模式', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (616, '2018-11-21 08:24:49.828615', 'be38f487-687a-4aa8-8368-f03822c99163', 'Navicat无法连接Oracle', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (617, '2018-12-04 12:26:31.131221', '39880fde-5c95-44d4-b1a2-c14320544e7f', 'ORACLE同步两张表: 通过某一个字段个来同步另一个字段', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (618, '2018-12-05 05:52:33.717750', 'a81259d2-adc8-481a-adf5-ee0349af33d4', 'Ubuntu安装JDK', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (619, '2018-12-05 13:06:28.260019', '3e212bcc-52fc-4c04-8b59-0b1b03a5d6d3', '装饰者模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (620, '2018-12-05 13:09:13.632527', '3e212bcc-52fc-4c04-8b59-0b1b03a5d6d3', '装饰者模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (621, '2018-12-05 13:09:56.834007', '3e212bcc-52fc-4c04-8b59-0b1b03a5d6d3', '装饰者模式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (622, '2018-12-06 00:04:51.429396', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (623, '2018-12-06 00:38:01.689092', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (624, '2018-12-06 00:41:55.196200', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (625, '2018-12-06 00:47:37.086830', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (626, '2018-12-06 00:47:52.733385', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (627, '2018-12-06 00:53:13.739188', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (628, '2018-12-06 01:18:24.876019', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (629, '2018-12-06 01:31:45.831350', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (630, '2018-12-06 01:50:27.056756', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (631, '2018-12-06 02:18:14.388017', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (632, '2018-12-06 02:18:16.787267', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[]', 7, 1);
INSERT INTO `django_admin_log` VALUES (633, '2018-12-06 02:45:46.520532', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (634, '2018-12-06 02:47:38.369328', '9f1c329d-ff85-49e6-890a-22ad9c9e621b', 'IDEA给Spring Boot打jar包和war包', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (635, '2018-12-10 00:57:17.971326', '02713a65-903e-4fd0-b1aa-fa7e3ad903a3', '去掉右下角的WPS登录图标, 关闭WPS广告', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (636, '2018-12-17 06:27:47.174820', '9eed816f-8fee-436f-b42b-22832814d4f7', '阿里巴巴代码规范插件', 2, '[{\"changed\": {\"fields\": [\"title\", \"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (637, '2018-12-17 07:34:13.266106', 'd45c7bf6-1b92-461c-ae46-07f2af6774f9', 'Spring Boot项目更改Tomcat默认端口号和context-path', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (638, '2018-12-17 08:58:33.926216', '33b4a9a4-01c5-4fe8-91e8-e2728de51c74', 'Spring Boot 项目前端页面跳转的两种方式', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (639, '2018-12-17 09:11:10.592364', '33b4a9a4-01c5-4fe8-91e8-e2728de51c74', 'Spring Boot 项目前端页面跳转的两种方式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (640, '2018-12-17 09:21:16.075557', '33b4a9a4-01c5-4fe8-91e8-e2728de51c74', 'Spring Boot 项目前端页面跳转的两种方式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (641, '2018-12-17 09:32:50.050443', '33b4a9a4-01c5-4fe8-91e8-e2728de51c74', 'Spring Boot 项目前端页面跳转的两种方式', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (642, '2019-02-18 14:10:30.206977', '2a6e89ef-c530-4ade-b625-fe1e839c8da4', 'jeesite', 1, '[{\"added\": {}}]', 9, 1);
INSERT INTO `django_admin_log` VALUES (643, '2019-02-18 14:10:50.130547', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天---使用Maven搭建多模块项目', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (644, '2019-02-18 14:11:37.125951', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天: 使用Maven搭建多模块项目;', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (645, '2019-02-18 14:39:12.574696', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天: 使用Maven搭建多模块项目;', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (646, '2019-02-18 14:42:29.933289', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天: 使用Maven搭建多模块项目;', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (647, '2019-02-18 14:43:01.700845', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天: 使用Maven搭建多模块项目;', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (648, '2019-02-18 14:43:40.486658', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天: 使用Maven搭建多模块项目;', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (649, '2019-02-18 14:55:30.410548', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天: 使用Maven搭建多模块项目;', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (650, '2019-02-18 15:11:31.768845', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', 'jeesite4学习第一天: 使用Maven搭建多模块项目;', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (651, '2019-03-15 02:30:57.368775', '70d4234a-eebb-4d7b-9620-be7bcb97d64a', '书单', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (652, '2019-03-15 02:33:07.284760', '075e02a6-9426-47d1-9d84-41e5ca1c8a79', '解决gradle下载慢的问题', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (653, '2019-03-15 02:35:44.225699', '075e02a6-9426-47d1-9d84-41e5ca1c8a79', 'gradle下载慢的问题及下载位置', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (654, '2019-03-15 02:46:21.735323', '66b72ad9-34f2-4ce4-8aa0-ae4aa59c9cfc', 'spring源码构建时缺失spring-cglib-repack和spring-objenesis-repack', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (655, '2019-03-15 03:18:16.764783', '8c523e90-d66e-4af5-bfcf-0b52e6b74d84', 'Oracle 导出、导入某用户所有数据（包括表、视图、存储过程...）', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (656, '2019-03-15 03:21:45.469827', '8c523e90-d66e-4af5-bfcf-0b52e6b74d84', 'Oracle 导出、导入某用户所有数据（包括表、视图、存储过程...）', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (657, '2019-03-15 03:35:56.240298', '0a9a88ca-9811-4802-bd0b-54330e21d97e', 'Oracle 11g导出表时, 部分空表无法导出', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (658, '2019-03-15 03:40:31.183847', '0a9a88ca-9811-4802-bd0b-54330e21d97e', 'Oracle 11g导出表时, 部分空表无法导出', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (659, '2019-03-15 07:39:33.453682', '4bb3c66b-e889-4447-a3fd-95f279c768cc', 'kettle使用命令行来运行ktr和kjb', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (660, '2019-03-15 07:40:47.810053', '4bb3c66b-e889-4447-a3fd-95f279c768cc', 'kettle使用命令行来运行ktr和kjb', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (661, '2019-03-15 08:30:58.539855', '4bb3c66b-e889-4447-a3fd-95f279c768cc', 'kettle使用命令行来运行ktr和kjb示例', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (662, '2019-03-18 07:32:15.972438', '2bfb9afb-8013-4f08-b011-15f0d3041f8f', '关于JAR包的版本', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (663, '2019-03-18 07:33:40.491634', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', '使用Maven搭建多模块项目', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (664, '2019-03-18 07:34:11.979099', 'd5763e9e-ad75-4d84-8e8b-c54ecb459e28', '使用Maven搭建多模块项目', 2, '[{\"changed\": {\"fields\": [\"label\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (665, '2019-03-18 07:34:45.273897', '2a6e89ef-c530-4ade-b625-fe1e839c8da4', 'jeesite', 3, '', 9, 1);
INSERT INTO `django_admin_log` VALUES (666, '2019-03-19 07:04:40.947927', '8c523e90-d66e-4af5-bfcf-0b52e6b74d84', 'Oracle 导出、导入某用户所有数据（包括表、视图、存储过程...）', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (667, '2019-03-20 08:30:23.684676', '0a9a88ca-9811-4802-bd0b-54330e21d97e', 'Oracle 11g导出表时, 部分空表无法导出', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (668, '2019-03-20 13:45:21.155691', 'b041b6f6-ebfb-4ae4-8e79-9efe84709c01', 'pom.xml文件中的scope标签设为provided', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (669, '2019-03-22 09:26:38.677738', 'daaf797e-5ec7-4a42-a4c0-a3f951f3ef9c', 'IDEA常用快捷键', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (670, '2019-03-26 10:29:35.917250', '5ec164d3-07bb-495e-91e4-f9acb9f9218e', '@Autowired与@Resource的区别', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (671, '2019-03-26 10:35:07.429081', '5ec164d3-07bb-495e-91e4-f9acb9f9218e', '@Autowired与@Resource的区别', 2, '[{\"changed\": {\"fields\": [\"status\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (672, '2019-03-27 11:14:08.021428', '5a7e299f-7496-4413-94b5-13acfc8a7853', 'Web响应信息工具类', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (673, '2019-03-27 11:14:50.973177', '5a7e299f-7496-4413-94b5-13acfc8a7853', 'Web响应信息工具类', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (674, '2019-04-22 02:44:05.682146', '55b4a069-b819-4edd-be25-a088cc7dab4a', '关于WebSocket', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (675, '2019-04-22 03:09:45.187327', '55b4a069-b819-4edd-be25-a088cc7dab4a', '关于WebSocket', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (676, '2019-04-23 09:07:12.131186', 'abf3b275-9527-4720-be85-ecd3d4ffdab1', 'Spring Boot 使用lombok简化', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (677, '2019-04-23 09:15:14.332725', 'abf3b275-9527-4720-be85-ecd3d4ffdab1', 'Spring Boot 使用lombok简化', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (678, '2019-04-23 09:38:19.724561', 'abf3b275-9527-4720-be85-ecd3d4ffdab1', 'Spring Boot 使用lombok简化', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (679, '2019-04-23 09:52:38.237040', '265d0347-d9e7-4cc3-9ba7-bf3ec3d6e390', 'windows安装redis msi提示错误: Redis on Windows Setup Wizard ended prematurely', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (680, '2019-05-18 13:46:47.280262', '537b389a-a19b-44c2-8804-d93a593ef874', 'Oracle 11g服务器安装详细步骤', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (681, '2019-05-18 13:47:18.503735', '537b389a-a19b-44c2-8804-d93a593ef874', 'Oracle 11g服务器安装详细步骤', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (682, '2019-05-18 14:20:47.687613', '6ca7b63e-19df-4859-8e83-81e4083ba382', '报错： IllegalArgumentException: The main resource set specified ... is not valid', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (683, '2019-05-18 14:26:19.494957', '53f43a23-7d20-4b09-95e8-72b9387b846d', 'Kettle连接MySQL数据库出现问题', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (684, '2019-05-29 11:16:10.727692', '3ae146bf-d6b6-41e1-a99f-83737b6dcdfe', 'Arrays.asList返回的List无法直接使用add()方法, Java报错: java.lang.UnsupportedOperationException', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (685, '2019-05-29 11:31:17.184498', '1386d394-2fa9-4283-a049-e7d8fe23ead4', '为什么一般使用Redis作缓存, 而不使用MySQL或Oracle自带的缓存', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (686, '2019-05-29 11:32:21.391879', '1386d394-2fa9-4283-a049-e7d8fe23ead4', '为什么一般使用Redis做缓存, 而不使用MySQL或Oracle自带的缓存', 2, '[{\"changed\": {\"fields\": [\"title\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (687, '2019-07-05 06:56:56.347870', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (688, '2019-07-06 06:47:16.153079', '8a0176c1-a9d6-4229-9910-a41a5dba1536', 'Docker的各种docker-compose.yml文件示例', 2, '[{\"changed\": {\"fields\": [\"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (689, '2019-07-15 01:06:28.950762', 'd1e0c90f-8a33-42f6-8774-cd7f9ead060f', 'code combat私服搭建', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (690, '2019-10-24 08:44:56.328297', '46c00298-88f5-4aca-a258-5d2aa6160dc8', 'Ubuntu18.04.2安装图形界面时无法进入的解决方案', 1, '[{\"added\": {}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (691, '2019-10-24 09:11:07.263371', '53f43a23-7d20-4b09-95e8-72b9387b846d', 'Kettle连接MySQL或Oracle等数据库出现问题', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);
INSERT INTO `django_admin_log` VALUES (692, '2019-10-24 09:16:45.551191', 'd45c7bf6-1b92-461c-ae46-07f2af6774f9', 'Spring Boot项目更改Tomcat默认端口号和context-path和命令行启动时指定端口号', 2, '[{\"changed\": {\"fields\": [\"title\", \"content\"]}}]', 7, 1);

-- ----------------------------
-- Table structure for django_content_type
-- ----------------------------
DROP TABLE IF EXISTS `django_content_type`;
CREATE TABLE `django_content_type`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `model` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `django_content_type_app_label_model_76bd3d3b_uniq`(`app_label`, `model`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_content_type
-- ----------------------------
INSERT INTO `django_content_type` VALUES (1, 'admin', 'logentry');
INSERT INTO `django_content_type` VALUES (3, 'auth', 'group');
INSERT INTO `django_content_type` VALUES (2, 'auth', 'permission');
INSERT INTO `django_content_type` VALUES (4, 'auth', 'user');
INSERT INTO `django_content_type` VALUES (7, 'blog', 'blog');
INSERT INTO `django_content_type` VALUES (9, 'blog', 'label');
INSERT INTO `django_content_type` VALUES (8, 'blog', 'status');
INSERT INTO `django_content_type` VALUES (5, 'contenttypes', 'contenttype');
INSERT INTO `django_content_type` VALUES (6, 'sessions', 'session');

-- ----------------------------
-- Table structure for django_migrations
-- ----------------------------
DROP TABLE IF EXISTS `django_migrations`;
CREATE TABLE `django_migrations`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_migrations
-- ----------------------------
INSERT INTO `django_migrations` VALUES (1, 'contenttypes', '0001_initial', '2018-07-11 02:56:16.116629');
INSERT INTO `django_migrations` VALUES (2, 'auth', '0001_initial', '2018-07-11 02:56:16.539804');
INSERT INTO `django_migrations` VALUES (3, 'admin', '0001_initial', '2018-07-11 02:56:16.624585');
INSERT INTO `django_migrations` VALUES (4, 'admin', '0002_logentry_remove_auto_add', '2018-07-11 02:56:16.636927');
INSERT INTO `django_migrations` VALUES (5, 'contenttypes', '0002_remove_content_type_name', '2018-07-11 02:56:16.700261');
INSERT INTO `django_migrations` VALUES (6, 'auth', '0002_alter_permission_name_max_length', '2018-07-11 02:56:16.734776');
INSERT INTO `django_migrations` VALUES (7, 'auth', '0003_alter_user_email_max_length', '2018-07-11 02:56:16.775146');
INSERT INTO `django_migrations` VALUES (8, 'auth', '0004_alter_user_username_opts', '2018-07-11 02:56:16.786264');
INSERT INTO `django_migrations` VALUES (9, 'auth', '0005_alter_user_last_login_null', '2018-07-11 02:56:16.817015');
INSERT INTO `django_migrations` VALUES (10, 'auth', '0006_require_contenttypes_0002', '2018-07-11 02:56:16.820418');
INSERT INTO `django_migrations` VALUES (11, 'auth', '0007_alter_validators_add_error_messages', '2018-07-11 02:56:16.832007');
INSERT INTO `django_migrations` VALUES (12, 'auth', '0008_alter_user_username_max_length', '2018-07-11 02:56:16.871675');
INSERT INTO `django_migrations` VALUES (13, 'auth', '0009_alter_user_last_name_max_length', '2018-07-11 02:56:16.910622');
INSERT INTO `django_migrations` VALUES (14, 'blog', '0001_initial', '2018-07-11 02:56:17.094584');
INSERT INTO `django_migrations` VALUES (15, 'sessions', '0001_initial', '2018-07-11 02:56:17.124738');
INSERT INTO `django_migrations` VALUES (16, 'blog', '0002_auto_20180719_1438', '2018-07-19 06:38:51.844251');

-- ----------------------------
-- Table structure for django_session
-- ----------------------------
DROP TABLE IF EXISTS `django_session`;
CREATE TABLE `django_session`  (
  `session_key` varchar(40) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `session_data` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`) USING BTREE,
  INDEX `django_session_expire_date_a5c62663`(`expire_date`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of django_session
-- ----------------------------
INSERT INTO `django_session` VALUES ('00wq2w8tv9f1mchzkdqlzuz427d1jl9j', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-12-03 01:37:47.751086');
INSERT INTO `django_session` VALUES ('0abgo2uyszetw1lraglb1c8n5s1vk7ni', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-10-05 02:35:45.185823');
INSERT INTO `django_session` VALUES ('0k4l1qtn8mp751swf2rkbvvro7c8xu9m', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-07-28 08:10:25.657964');
INSERT INTO `django_session` VALUES ('0rdvvmiur4qqo63mwno5u0245px1xa5a', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-21 06:01:45.415444');
INSERT INTO `django_session` VALUES ('0swnbu3ohdk2u7nzhvl790nkbelh93x3', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-03-29 02:11:49.004387');
INSERT INTO `django_session` VALUES ('12tqxdqwblxbbt94vaiiq4sjsnqhrerd', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-23 01:06:34.656869');
INSERT INTO `django_session` VALUES ('2n6a1qfxikxsln4xyr3lbosp4hkowgba', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-06-12 11:13:58.378260');
INSERT INTO `django_session` VALUES ('3dq8rzgzyo5xrvhirjtz3hc1rpe0t9ew', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-06-01 13:44:58.737684');
INSERT INTO `django_session` VALUES ('3jvx89bfp1p60f7ubzurguux99annz8g', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-16 22:14:12.346820');
INSERT INTO `django_session` VALUES ('3v9j1lzr0sqjr1b34wru3iow7camgphk', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-27 00:41:54.524840');
INSERT INTO `django_session` VALUES ('3ymykl7j4w8ecqthbkoerec5ga12hzsb', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 01:18:53.910499');
INSERT INTO `django_session` VALUES ('3ztvo3vwaf4g5q77a29qldwl7mcj0p3t', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-18 12:12:12.972449');
INSERT INTO `django_session` VALUES ('42zfdntauzwsxz6372ki0e1rvbushhpf', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-05-06 02:32:23.385901');
INSERT INTO `django_session` VALUES ('4j988fa98y0432g021v5hsggdd58mybf', 'ZWYzN2ZlNjE2Nzk1ODRhNWU3OTk5ZmRiNGI3ZGFkZDE4YmU3NmM5NTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 01:04:42.909508');
INSERT INTO `django_session` VALUES ('4rrpinyq7pvm9sug7xap0t419oxks4d2', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-04-09 10:27:30.285163');
INSERT INTO `django_session` VALUES ('4sg53wluxfhmyxs9v50c4pl5p4yv4oyz', 'YzI0YjMyYmQ5YjY1MmZlMDg5ZWJhOTA3M2E1MzU2NGJiNjYyZWEyMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-07-25 03:00:33.090079');
INSERT INTO `django_session` VALUES ('5nk24bc62q2c07tytr6wqzxz8mndqeqt', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 07:44:13.264495');
INSERT INTO `django_session` VALUES ('5nua2hc7dcuqosffhp48ojtg11fdu2p6', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-11 22:50:10.810550');
INSERT INTO `django_session` VALUES ('5vvmssvrer27nbfc732vgaepq88cnxkc', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 08:07:39.761725');
INSERT INTO `django_session` VALUES ('62lezm17fq5woqj8xm3mo73vn7a8y5i4', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-03 23:14:42.556082');
INSERT INTO `django_session` VALUES ('6ewsv21ub5pis9nvb821t4m76fa1v2vp', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-04 07:55:23.636945');
INSERT INTO `django_session` VALUES ('6xc3o603aauglaaxjoi9r1bayz8f5n42', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-03 03:30:11.362228');
INSERT INTO `django_session` VALUES ('77een2q4x68pwtne3zils42qjdomy1jj', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-13 07:58:05.472265');
INSERT INTO `django_session` VALUES ('7lju5fq0vkambhi58v54zhrvz5ncb7q0', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-06-29 09:51:45.541268');
INSERT INTO `django_session` VALUES ('86v17lp3vi4scr3av4y2qyslu1bi8ofz', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-17 00:18:20.735369');
INSERT INTO `django_session` VALUES ('91nzjd2fqs8i6ukqzx499zkzdu8ujt8d', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 01:49:02.151014');
INSERT INTO `django_session` VALUES ('9hc9c0996rj7iz2c1o0y8mz2erbrelvl', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-07 07:48:32.694154');
INSERT INTO `django_session` VALUES ('9wov7y7boo8puouuvbutl1k5tqyd0n0v', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-12-04 01:28:16.663395');
INSERT INTO `django_session` VALUES ('bqin9x2pjpzhald9dg9gc64vrdusx8jk', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-10-25 03:53:40.332213');
INSERT INTO `django_session` VALUES ('c2wncfzo65vbau757a9thlmv7rpct0i9', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-16 05:23:58.926018');
INSERT INTO `django_session` VALUES ('cljcjjwg7i2cqfsz1rxhs3asz4cndfy6', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-08 07:44:37.676241');
INSERT INTO `django_session` VALUES ('cnefflpekiin1fk2extuy1yh0xdst00l', 'YzI0YjMyYmQ5YjY1MmZlMDg5ZWJhOTA3M2E1MzU2NGJiNjYyZWEyMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-07-25 03:02:32.586539');
INSERT INTO `django_session` VALUES ('ddrbkv93h6m62w34ejoa1xnoxxjjq8dn', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-06 01:49:07.367834');
INSERT INTO `django_session` VALUES ('e1dt82rriftsv5o2am8ufvtl1xjs20kp', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-03 01:30:52.927110');
INSERT INTO `django_session` VALUES ('euegty8j64r7jxgiuri8bqep31zdvb02', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-04 01:24:08.934309');
INSERT INTO `django_session` VALUES ('f0xyfosgth9zj5wqmecahhvagyveh20a', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-05 08:35:38.031933');
INSERT INTO `django_session` VALUES ('f7d9t20zeztrzw5wqg74mt0si2qm6y2i', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-07-19 06:55:38.749643');
INSERT INTO `django_session` VALUES ('fqeca3nbo7up18g4tkokawpb9b37t9cq', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-11-26 12:47:20.259026');
INSERT INTO `django_session` VALUES ('gcdfhclvstb4x78e1i6crhy8mu9o0zpb', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-03 07:35:17.765962');
INSERT INTO `django_session` VALUES ('gnglc6ik8734fyo9pycj9shv6vxguyaa', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-04-10 11:13:25.602216');
INSERT INTO `django_session` VALUES ('ho5z7fnb0x26kwpmc1k87khccyr1ivwf', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-24 09:30:44.249459');
INSERT INTO `django_session` VALUES ('hq8a8zca0smdkrqvtimaelsuberflha0', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-07-28 08:10:15.463822');
INSERT INTO `django_session` VALUES ('hz1hv2r9cruuuxsm9npfloqoglgke1h0', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-06 10:39:37.004294');
INSERT INTO `django_session` VALUES ('i0vg371wtj1sjor3cyusfbmqcp9zxnzh', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-09-27 03:08:48.908944');
INSERT INTO `django_session` VALUES ('icwydzt3klp62lr631zdiv8otcsaz6of', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-07-30 03:19:18.839883');
INSERT INTO `django_session` VALUES ('iczqwe51c2e5hxzvs14jlsr5f5rqjkd9', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-03 03:30:11.299766');
INSERT INTO `django_session` VALUES ('imvmj32qxtpubj85q4dnrtvld52hpij9', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-10-04 04:12:12.761433');
INSERT INTO `django_session` VALUES ('j64h2g4rou3emuka85efx6wpszv25ysv', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-20 00:52:51.120436');
INSERT INTO `django_session` VALUES ('jizguqnt2ev537v646p5v64slylgcaoi', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-10-11 13:37:17.173620');
INSERT INTO `django_session` VALUES ('jurqdhzgvec27j3skd96a0ald2oe8mkg', 'ZWYzN2ZlNjE2Nzk1ODRhNWU3OTk5ZmRiNGI3ZGFkZDE4YmU3NmM5NTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 01:13:18.705258');
INSERT INTO `django_session` VALUES ('kiy4nfit9l5qlb9o1j3cf62vmnavsqnm', 'ZWYzN2ZlNjE2Nzk1ODRhNWU3OTk5ZmRiNGI3ZGFkZDE4YmU3NmM5NTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 08:00:00.262855');
INSERT INTO `django_session` VALUES ('kpx6k0lird4a2oddyfep2w9nf4yaf0ab', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-03-04 13:55:09.080748');
INSERT INTO `django_session` VALUES ('lihs1nwcwv30eqg1e4ws4yjtc900n5z0', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-09 00:29:35.906777');
INSERT INTO `django_session` VALUES ('m03nt7fjdm8oowagcoeh4o6wxx9t10km', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-01-01 13:23:48.485185');
INSERT INTO `django_session` VALUES ('m3u52hh1oz3hr9rqkr9bds47t9kd1l0a', 'YzI0YjMyYmQ5YjY1MmZlMDg5ZWJhOTA3M2E1MzU2NGJiNjYyZWEyMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-12-04 07:19:46.153310');
INSERT INTO `django_session` VALUES ('mccnxxpjvkqw9mfza536xns864h4gha5', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2019-11-07 08:31:01.477255');
INSERT INTO `django_session` VALUES ('mu3yaznd0f8hcrsk0iw2s55v9p1vfu7b', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-07-25 03:38:25.557248');
INSERT INTO `django_session` VALUES ('nlzp78llgf4xk3d1u6sux8155w1sf7b6', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 23:04:12.954107');
INSERT INTO `django_session` VALUES ('ocoxnvy6llbp09xrsoxtecc912al1589', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-03 02:59:34.107320');
INSERT INTO `django_session` VALUES ('oictfmfjb9rc5ffrfd7j4jx25gmn8o02', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-21 06:03:04.640924');
INSERT INTO `django_session` VALUES ('oqsic9jhh97qf57vg2tu18cy8aqt40ot', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-02 04:29:31.647806');
INSERT INTO `django_session` VALUES ('otzhq9vp24pqm3ebjqi2uw7k8fc7ycft', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-03 01:24:25.748207');
INSERT INTO `django_session` VALUES ('oythxnfjn07fqzw5wgk8xrgtt60bcf55', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 01:39:42.308422');
INSERT INTO `django_session` VALUES ('pfrb3i5hlydf17tg3hgwpej9p3svbnth', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-04 07:30:45.834655');
INSERT INTO `django_session` VALUES ('ql375tssgyi6jlphe83cjulmzcc48out', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-07-25 06:57:41.021441');
INSERT INTO `django_session` VALUES ('rzieha4e2l92blkzgzq7i2d04p5ho44c', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-04 07:09:02.775462');
INSERT INTO `django_session` VALUES ('sicubmi0nz350zufr3tpzdp6oglzde8e', 'ZWYzN2ZlNjE2Nzk1ODRhNWU3OTk5ZmRiNGI3ZGFkZDE4YmU3NmM5NTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 09:11:06.048426');
INSERT INTO `django_session` VALUES ('sytluw3poqwadocla5lwzxpi6dvrxp4n', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-04 08:23:48.296881');
INSERT INTO `django_session` VALUES ('t6fx5yhp9anvr5vh5dehhadp92jv7lbf', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-04 06:59:53.723289');
INSERT INTO `django_session` VALUES ('t78gor8ovz65hvya4kk69nccgz4rz376', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-09-05 00:30:56.248135');
INSERT INTO `django_session` VALUES ('tg2mvognkhekk7897u761c3r3i032e17', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2019-07-29 01:00:11.756017');
INSERT INTO `django_session` VALUES ('tpod0iy6yeh82u104xxfgiva2up4zjtg', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-05-07 08:54:47.442911');
INSERT INTO `django_session` VALUES ('u2u1zsw08yj6olxpm8l6oq87jqvlpzm1', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-15 00:36:48.353254');
INSERT INTO `django_session` VALUES ('v4231nbiydwwe2hq85zlhl33jn3ihedp', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-16 02:59:20.930961');
INSERT INTO `django_session` VALUES ('vu5ws9zmcsoeiu0yeq1qbotzn0zynb5f', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-19 06:41:17.193419');
INSERT INTO `django_session` VALUES ('vzswlfliuqof5nr5le10b2fdun1blb4k', 'YzI0YjMyYmQ5YjY1MmZlMDg5ZWJhOTA3M2E1MzU2NGJiNjYyZWEyMDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2lkIjoiMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-12-03 02:48:56.459088');
INSERT INTO `django_session` VALUES ('weg4vvdj5vgplg16cvaeah8h3ojj7z8l', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-08-06 02:24:07.620529');
INSERT INTO `django_session` VALUES ('wil897b650tcii9xlag5e0e349upg194', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-31 08:52:23.451019');
INSERT INTO `django_session` VALUES ('wz8n5a8fa7a4ly9nrn79e21uj63d0n4y', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-11-28 10:05:59.628798');
INSERT INTO `django_session` VALUES ('xdzqiey5dcjcih5waubqxi4q0dbe1upq', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-04 01:44:28.894001');
INSERT INTO `django_session` VALUES ('xst67cb8flqybop9uh6f57wytgcg1adl', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-03-29 03:17:25.784612');
INSERT INTO `django_session` VALUES ('y9bnbr6u5pny4q3fkqiawwoazbtfxh1h', 'ZWYzN2ZlNjE2Nzk1ODRhNWU3OTk5ZmRiNGI3ZGFkZDE4YmU3NmM5NTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-03 03:01:56.666651');
INSERT INTO `django_session` VALUES ('yb3j8k08xvnwyjw8y9wtta871fgelz1v', 'ZDhkNTE1NTdmYjVjYTY4NDM1MzEyOWUwZGVlN2U4YjA5ZmJkYjg5NDp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-03 02:56:16.091305');
INSERT INTO `django_session` VALUES ('yd0bachu17f1z1t4bd7zvyk84ul1wu0s', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-09-30 06:00:43.758414');
INSERT INTO `django_session` VALUES ('yg8brwzxi6v1ph6o3lw9awykedynujdk', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-10-22 12:24:33.450064');
INSERT INTO `django_session` VALUES ('yocr7gxob09jbho33xq12l4o42fj3q1o', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2019-08-14 03:47:18.170251');
INSERT INTO `django_session` VALUES ('yrb0dmliaqqa5ndzs8sdkwsyf01zg9uo', 'ZDFkYzNjNzM1NTRmMWZhMzU1NjllMDkwMWM5ZTU1ZGQ0NDI1YTBlZTp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhM2E4YzE1NmQwMGEyODgxYWVkNjYwMTgzMjQzMDJjZmQ3YTA4YTEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2018-12-04 07:12:19.651556');
INSERT INTO `django_session` VALUES ('zd0hseag1bn5dqvvuz0th09qim7g4wfp', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2019-07-20 06:46:21.310933');
INSERT INTO `django_session` VALUES ('zl7lo61f4szt09wizliovb6hosx0cer5', 'ZWU3Y2NhMjczMzBlNDBhZDE1OGFkYjMwYWM5MGYxZjFlNTJlMTUyMTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9oYXNoIjoiMGEzYThjMTU2ZDAwYTI4ODFhZWQ2NjAxODMyNDMwMmNmZDdhMDhhMSIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIn0=', '2018-11-14 01:08:20.991974');
INSERT INTO `django_session` VALUES ('zmyl5bttwsuxkrk9326woje487pcns2g', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-04 01:38:41.490835');
INSERT INTO `django_session` VALUES ('zpn198ll3k5r3b9wp6b3gpj9duwhn845', 'MTY2NjU1YTZiMzI4ODYyZGExYzYwZmE2NThiYjcyN2M2ODQ3NjExYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2hhc2giOiIwYTNhOGMxNTZkMDBhMjg4MWFlZDY2MDE4MzI0MzAyY2ZkN2EwOGExIn0=', '2018-12-19 05:51:26.538183');

SET FOREIGN_KEY_CHECKS = 1;
